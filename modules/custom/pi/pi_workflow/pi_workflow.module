<?php
// $Id: pi_workflow.module,v 1.1 2009/06/24 09:17:48 ou_pm Exp $

/**
 * @file
 * Implements Activity Guide workflow.
 */


function find_selected_measures_nid_for_uid_and_inquiry ($uid, $inquiry_id) {
	$query = "SELECT pi_selected_measures.nid FROM pi_selected_measures LEFT JOIN node_access ON node_access.nid = pi_selected_measures.nid LEFT JOIN node ON node.nid = pi_selected_measures.nid LEFT JOIN pi_activity_node ON pi_activity_node.nid =  pi_selected_measures.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid WHERE (og_uid.uid = '" . $uid . "' OR node.uid = '" . $uid . "') AND pi_activity_node.inquiry_id = '" . $inquiry_id . "' ";
	$result = db_result(db_query($query));
	return $result;
}

function find_selected_measures_nid_for_uid ($uid) {
	$query = "SELECT pi_selected_measures.nid FROM pi_selected_measures, node_access, og_uid WHERE pi_selected_measures.nid = node_access.nid AND node_access.gid = og_uid.nid AND og_uid.uid = '" . $uid . "' ";
	$result = db_result(db_query($query));
	return $result;
}

function add_data_parameter_when_selected_measures_created($node, $user) {
	$node_details = get_inquiry_details_from_current_path();
	
	//find group for user
	$group = get_current_group_of_user ($node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id, $user->uid);
	
	if (!$group) {
		return NULL;
	}
	
	//find new interview activity for that group
	$activity_query = "SELECT pi_activity.activity_id FROM pi_activity, pi_activity_actor WHERE pi_activity.node_type = \"pi_data\" AND pi_activity.activity_id = pi_activity_actor.activity_id AND pi_activity_actor.gid = " . $group . " ";
	$interview_activity = db_result(db_query($activity_query));
	
	if (!$interview_activity) {
		return NULL;
	}
	
	//add nid as parameter
	$loaded_activity = load_activity($interview_activity);
	
	$activity_array = array();
	$activity_array["name"] = $loaded_activity->name;
	$activity_array["activity_id"] = $interview_activity;
	$activity_array["description"] = $loaded_activity->description;
	$activity_array["activity_type"] = $loaded_activity->activity_type;
	$activity_array["node_type"] = $loaded_activity->node_type;
	$activity_array["parameters"] = t("251/" . $node->nid);
	$activity_array["destination"] = $loaded_activity->destination;
	$activity_array["audience"] = $loaded_activity->audience;
	save_activity($activity_array);
	
	//find results activity for that group
	
	$query = "SELECT pi_activity.activity_id FROM pi_activity WHERE pi_activity.parameters = \"" . $group . "\" ";
	$result_activity = db_result(db_query($query));
	
	//set view persmissions for class
	if ($result_activity) {
		$query = "UPDATE pi_activity_actor SET pi_activity_actor.gid = 236 WHERE pi_activity_actor.inquiry_id = " . $node_details->inquiry_id . " AND pi_activity_actor.activity_id = " . $result_activity . " ";
		db_query($query);
	}
	
}


function workflow_for_updated_node_adder_activity($node, $user) {
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
	$loaded_activity = load_activity($details->activity_id);
	
	//----
	//get the values of the key measures for the data node
  //get pi_key_measure_nid
  $pi_key_measures_query = db_query("SELECT pi_key_measures.nid FROM pi_key_measures LEFT JOIN node ON pi_key_measures.nid = node.nid LEFT JOIN node_access ON pi_key_measures.nid = node_access.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid LEFT JOIN pi_activity_node ON pi_key_measures.nid = pi_activity_node.nid WHERE (og_uid.uid = '" . $uid . "' OR node.uid = '" . $uid . "') AND pi_activity_node.inquiry_id = '" . $details->inquiry_id . "' ");
  $pi_key_measures_nid = db_fetch_object($pi_key_measures_query);
  
  //get pi_selected_measure_nid
  $pi_selected_measures_query = db_query("SELECT pi_selected_measures.nid FROM pi_selected_measures LEFT JOIN node_access ON pi_selected_measures.nid = node_access.nid LEFT JOIN node ON pi_selected_measures.nid = node.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid LEFT JOIN pi_activity_node ON pi_selected_measures.nid = pi_activity_node.nid WHERE (og_uid.uid = '" . $uid . "' OR node.uid = '" . $uid . "') AND pi_activity_node.inquiry_id = '" . $details->inquiry_id . "' ");
  $pi_selected_measures_nid = db_fetch_object($pi_selected_measures_query);
  
  //change to only get public and og nids
  /*
  $required_results = db_query("SELECT node.nid, node.title FROM node LEFT JOIN pi_key_measures ON node.nid = pi_key_measures.measure_nid LEFT JOIN pi_selected_measures ON pi_key_measures.measure_nid = pi_selected_measures.measure_nid WHERE pi_key_measures.nid = '" . $pi_key_measures_nid->nid ."' AND  pi_selected_measures.nid = '" . $pi_selected_measures_nid->nid . "' ORDER BY pi_selected_measures.weight ASC");*/
  $required_results = db_query("SELECT node.nid, node.title FROM node LEFT JOIN pi_key_measures ON node.nid = pi_key_measures.measure_nid WHERE pi_key_measures.nid = '" . $pi_key_measures_nid->nid ."' ");
  
  $title_array = array();
  $count = 0;
  while ($required_result = db_fetch_array($required_results)) {
  	$query = "SELECT pi_collected_data.value FROM pi_collected_data, pi_selected_measures WHERE pi_collected_data.nid = '" . $node->nid . "' AND pi_collected_data.psm_id = pi_selected_measures.psm_id AND pi_selected_measures.measure_nid = '" . $required_result['nid'] . "' ";
  	$value_result = db_fetch_object(db_query($query));
    $title_array[$count++] = $value_result->value;
  }
  
  	$activity_name = implode("-",$title_array);
	
	//----

	if (strlen($activity_name) < 2) {
		$activity_name = "Data";
	}
	$activity_array = array();
	$activity_array["name"] = $activity_name;
	$activity_array["activity_id"] = $loaded_activity->activity_id;
	$activity_array["description"] = $loaded_activity->description;
	$activity_array["activity_type"] = $loaded_activity->activity_type;
	$activity_array["node_type"] = $loaded_activity->node_type;
	$activity_array["parameters"] = $loaded_activity->parameters;
	$activity_array["destination"] = $loaded_activity->destination;
	$activity_array["audience"] = $loaded_activity->audience;
	
	save_activity($activity_array);
}

function update_activity_when_key_question_updated($node, $user) {
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
	$loaded_activity = load_activity($details->activity_id);
	
	//save current activity including the activity_id
	$activity_array = array();
	$activity_array["name"] = t("Q:" . $node->short_title);
	$activity_array["activity_id"] = $loaded_activity->activity_id;
	$activity_array["description"] = $loaded_activity->description;
	$activity_array["activity_type"] = $loaded_activity->activity_type;
	$activity_array["node_type"] = $loaded_activity->node_type;
	$activity_array["parameters"] = $loaded_activity->parameters;
	$activity_array["destination"] = $loaded_activity->destination;
	$activity_array["audience"] = $loaded_activity->audience;
	
	save_activity($activity_array);
}

function update_activity_when_add_measure_updated($node, $user) {
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
	$loaded_activity = load_activity($details->activity_id);
	
	//save current activity including the activity_id
	$activity_array = array();
	$activity_array["name"] = $node->title;
	$activity_array["activity_id"] = $loaded_activity->activity_id;
	$activity_array["description"] = $loaded_activity->description;
	$activity_array["activity_type"] = $loaded_activity->activity_type;
	$activity_array["node_type"] = $loaded_activity->node_type;
	$activity_array["parameters"] = $loaded_activity->parameters;
	$activity_array["destination"] = $loaded_activity->destination;
	$activity_array["audience"] = $loaded_activity->audience;
	
	save_activity($activity_array);
}

function add_activity_when_key_question_created($node, $user, $node_function, $visible_status) {
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
	$loaded_activity = load_activity($details->activity_id);
	
	//copy over current except for the activity_id
	$activity_array = array();
	$activity_array["name"] = t("Q:" . $node->short_title);
	$activity_array["description"] = $loaded_activity->description;
	$activity_array["activity_type"] = $loaded_activity->activity_type;
	$activity_array["node_type"] = $loaded_activity->node_type;
	$activity_array["parameters"] = $loaded_activity->parameters;
	$activity_array["destination"] = $loaded_activity->destination;
	$activity_array["audience"] = $loaded_activity->audience;
	
	//create the new activity
	save_activity($activity_array);
	$query2 = "SELECT MAX(pi_activity.activity_id) FROM pi_activity";
	$new_activity_id = db_result(db_query($query2));
	
	//****new details object
	$new_details = new stdClass;
	$new_details->inquiry_id = $details->inquiry_id;
	$new_details->stage_id = $details->stage_id;
	$new_details->phase_id = $details->phase_id;
	$new_details->activity_id = $new_activity_id;
	
		
	//set status for the new activity
	$activity_status = load_activity_status($details->inquiry_id, $details->activity_id, $user->uid);
	$new_activity_status = new stdClass;
	$new_activity_status->inquiry_id = $activity_status->inquiry_id;
	$new_activity_status->activity_id = $new_activity_id;
	$new_activity_status->uid = $activity_status->uid;
	$new_activity_status->gid = $activity_status->gid;
	$new_activity_status->node_function = $activity_status->node_function;
	$new_activity_status->visible_status = $activity_status->visible_status;
	save_activity_status($new_activity_status);
	
	//set actor for the new activity
	$activity_actor = load_activity_actor($details->inquiry_id, $details->activity_id, NULL, NULL);
	$new_activity_actor["inquiry_id"] = $details->inquiry_id;
	$new_activity_actor["activity_id"] = $new_activity_id;
	if ($loaded_activity->audience == "individual") {
		$new_activity_actor["uid"] = $user->uid;
	}
	else {
		$users_group = get_group_of_type($uid, $loaded_activity->audience, $new_details->inquiry_id, $new_details->stage_id, $new_details->phase_id, $new_details->activity_id);
		$new_activity_actor["gid"] = $users_group;
	}
	insert_activity_actor($new_activity_actor);
	
	//set the stage phase activity
	$psp_id = get_psp_id_for_stage_and_phase($details->stage_id, $details->phase_id);
	$query = "SELECT position FROM pi_stage_phase_activity WHERE psp_id = " . $psp_id . " ORDER BY position DESC";
	$current_pos = db_result(db_query($query));
	$new_pos = $current_pos + 1;
	insert_stage_phase_activity($psp_id, $new_activity_id, $new_pos);
	
	//set pi activity node
	add_new_pi_activity_node($node, $user, $node_function, $visible_status, $new_details);
	
	//set og if necessary for new node
	$details = get_inquiry_details_from_current_path();
	$activity = load_activity($details->activity_id);
	if ($loaded_activity->audience != "individual") {
		$users_group = get_group_of_type($uid, $loaded_activity->audience, $new_details->inquiry_id, $new_details->stage_id, $new_details->phase_id, $new_details->activity_id);
        $context['group'] = $users_group;
    	og_add_group_action($node, $context);
	}
}


function add_activity_when_add_measure_created($node, $user, $node_function, $visible_status) {
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
	$loaded_activity = load_activity($details->activity_id);
	
	//copy over current except for the activity_id
	$activity_array = array();
	$activity_array["name"] = $node->title;
	$activity_array["description"] = $loaded_activity->description;
	$activity_array["activity_type"] = $loaded_activity->activity_type;
	$activity_array["node_type"] = $loaded_activity->node_type;
	$activity_array["parameters"] = $loaded_activity->parameters;
	$activity_array["destination"] = $loaded_activity->destination;
	$activity_array["audience"] = $loaded_activity->audience;
	
	//create the new activity
	save_activity($activity_array);
	$query2 = "SELECT MAX(pi_activity.activity_id) FROM pi_activity";
	$new_activity_id = db_result(db_query($query2));
	
	//****new details object
	$new_details = new stdClass;
	$new_details->inquiry_id = $details->inquiry_id;
	$new_details->stage_id = $details->stage_id;
	$new_details->phase_id = $details->phase_id;
	$new_details->activity_id = $new_activity_id;
	
		
	//set status for the new activity
	$activity_status = load_activity_status($details->inquiry_id, $details->activity_id, $user->uid);
	$new_activity_status = new stdClass;
	$new_activity_status->inquiry_id = $activity_status->inquiry_id;
	$new_activity_status->activity_id = $new_activity_id;
	$new_activity_status->uid = $activity_status->uid;
	$new_activity_status->gid = $activity_status->gid;
	$new_activity_status->node_function = $activity_status->node_function;
	$new_activity_status->visible_status = $activity_status->visible_status;
	save_activity_status($new_activity_status);
	
	//set actor for the new activity
	$activity_actor = load_activity_actor($details->inquiry_id, $details->activity_id, NULL, NULL);
	$new_activity_actor["inquiry_id"] = $details->inquiry_id;
	$new_activity_actor["activity_id"] = $new_activity_id;
	if ($loaded_activity->audience == "individual") {
		$new_activity_actor["uid"] = $user->uid;
	}
	else {
		$users_group = get_group_of_type($uid, $loaded_activity->audience, $new_details->inquiry_id, $new_details->stage_id, $new_details->phase_id, $new_details->activity_id);
		$new_activity_actor["gid"] = $users_group;
	}
	insert_activity_actor($new_activity_actor);
	
	//set the stage phase activity
	$psp_id = get_psp_id_for_stage_and_phase($details->stage_id, $details->phase_id);
	$query = "SELECT position FROM pi_stage_phase_activity WHERE psp_id = " . $psp_id . " ORDER BY position DESC";
	$current_pos = db_result(db_query($query));
	$new_pos = $current_pos + 1;
	insert_stage_phase_activity($psp_id, $new_activity_id, $new_pos);
	
	//set pi activity node
	add_new_pi_activity_node($node, $user, $node_function, $visible_status, $new_details);
	
	//set og if necessary for new node
	$details = get_inquiry_details_from_current_path();
	$activity = load_activity($details->activity_id);
	if ($loaded_activity->audience != "individual") {
		$users_group = get_group_of_type($uid, $loaded_activity->audience, $new_details->inquiry_id, $new_details->stage_id, $new_details->phase_id, $new_details->activity_id);
        $context['group'] = $users_group;
    	og_add_group_action($node, $context);
	}
}



function workflow_for_created_node_adder_activity($node, $user, $node_function, $visible_status) {
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
	$loaded_activity = load_activity($details->activity_id);
	
	//get the values of the key measures for the data node
  //get pi_key_measure_nid
  $pi_key_measures_query = db_query("SELECT pi_key_measures.nid FROM pi_key_measures LEFT JOIN node ON pi_key_measures.nid = node.nid LEFT JOIN node_access ON pi_key_measures.nid = node_access.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid LEFT JOIN pi_activity_node ON pi_key_measures.nid = pi_activity_node.nid WHERE (og_uid.uid = '" . $uid . "' OR node.uid = '" . $uid . "') AND pi_activity_node.inquiry_id = '" . $details->inquiry_id . "' ");
  $pi_key_measures_nid = db_fetch_object($pi_key_measures_query);
  
  //get pi_selected_measure_nid
  $pi_selected_measures_query = db_query("SELECT pi_selected_measures.nid FROM pi_selected_measures LEFT JOIN node_access ON pi_selected_measures.nid = node_access.nid LEFT JOIN node ON pi_selected_measures.nid = node.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid LEFT JOIN pi_activity_node ON pi_selected_measures.nid = pi_activity_node.nid WHERE (og_uid.uid = '" . $uid . "' OR node.uid = '" . $uid . "') AND pi_activity_node.inquiry_id = '" . $details->inquiry_id . "' ");
  $pi_selected_measures_nid = db_fetch_object($pi_selected_measures_query);
  
  //change to only get public and og nids
  $required_results = db_query("SELECT node.nid, node.title FROM node LEFT JOIN pi_key_measures ON node.nid = pi_key_measures.measure_nid LEFT JOIN pi_selected_measures ON pi_key_measures.measure_nid = pi_selected_measures.measure_nid WHERE pi_key_measures.nid = '" . $pi_key_measures_nid->nid ."' AND  pi_selected_measures.nid = '" . $pi_selected_measures_nid->nid . "' ORDER BY pi_selected_measures.weight ASC");
  
  $title_array = array();
  while ($required_result = db_fetch_array($required_results)) {
  	$query = "SELECT pi_collected_data.value FROM pi_collected_data, pi_selected_measures WHERE pi_collected_data.nid = '" . $node->nid . "' AND pi_collected_data.psm_id = pi_selected_measures.psm_id AND pi_selected_measures.measure_nid = '" . $required_result['nid'] . "' ";
  	$value_result = db_fetch_object(db_query($query));
    $title_array[] = $value_result->value;
  }
	
	//-------------
	//get the values of the key measures for the data node
	/*
	$query = "SELECT pi_collected_data.value FROM pi_collected_data, pi_selected_measures, pi_key_measures WHERE pi_collected_data.nid = '" . $node->nid . "' AND pi_collected_data.psm_id = pi_selected_measures.psm_id AND pi_selected_measures.measure_nid = pi_key_measures.measure_nid AND pi_key_measures.inquiry_id = '" . $details->inquiry_id . "' AND pi_key_measures.activity_id = '" .$details->activity_id . "' ";
	$results = db_query($query);
	$title_array= array();
	while($result = db_fetch_object($results)) {
		$title_array[] = $result->value;
	}*/
	$activity_name = implode("-",$title_array);
	
	//use the value from lowest weighted measure as activity title
	/*$query = "SELECT pi_collected_data.value FROM pi_collected_data, pi_selected_measures ";
	$query .= "WHERE pi_collected_data.nid = " . $node->nid . " ";
	$query .= "AND pi_collected_data.psm_id = pi_selected_measures.psm_id ";
	$query .= "ORDER BY pi_selected_measures.weight ASC ";
	$activity_name = db_result(db_query($query));*/
	if (strlen($activity_name) < 2) {
		$activity_name = "Data";
	}
	$activity_array = array();
	$activity_array["name"] = $activity_name;
	$activity_array["description"] = $loaded_activity->description;
	$activity_array["activity_type"] = $loaded_activity->activity_type;
	$activity_array["node_type"] = $loaded_activity->node_type;
	$activity_array["parameters"] = $loaded_activity->parameters;
	$activity_array["destination"] = $loaded_activity->destination;
	$activity_array["audience"] = $loaded_activity->audience;
	
	//create the new activity
	save_activity($activity_array);
	$query2 = "SELECT MAX(pi_activity.activity_id) FROM pi_activity";
	$new_activity_id = db_result(db_query($query2));
	
	//****new details object
	$new_details = new stdClass;
	$new_details->inquiry_id = $details->inquiry_id;
	$new_details->stage_id = $details->stage_id;
	$new_details->phase_id = $details->phase_id;
	$new_details->activity_id = $new_activity_id;
	
	//set status for the new activity
	$activity_status = load_activity_status($details->inquiry_id, $details->activity_id, $user->uid);
	$new_activity_status = new stdClass;
	$new_activity_status->inquiry_id = $activity_status->inquiry_id;
	$new_activity_status->activity_id = $new_activity_id;
	$new_activity_status->uid = $activity_status->uid;
	$new_activity_status->gid = $activity_status->gid;
	$new_activity_status->node_function = $activity_status->node_function;
	$new_activity_status->visible_status = $activity_status->visible_status;
	save_activity_status($new_activity_status);
	
	//set actor for the new activity
	$activity_actor = load_activity_actor($details->inquiry_id, $details->activity_id, NULL, NULL);
	$new_activity_actor["inquiry_id"] = $details->inquiry_id;
	$new_activity_actor["activity_id"] = $new_activity_id;
	if ($loaded_activity->audience == "individual") {
		$new_activity_actor["uid"] = $user->uid;
	}
	else {
		$users_group = get_group_of_type($uid, $loaded_activity->audience, $new_details->inquiry_id, $new_details->stage_id, $new_details->phase_id, $new_details->activity_id);
		$new_activity_actor["gid"] = $users_group;
	}
	insert_activity_actor($new_activity_actor);
	
	/*
	$activity_actor = load_activity_actor($details->inquiry_id, $details->activity_id, NULL, NULL);
	$new_activity_actor["inquiry_id"] = $details->inquiry_id;
	$new_activity_actor["activity_id"] = $new_activity_id;
	$new_activity_actor["uid"] = $activity_actor[0]["uid"];
	$new_activity_actor["gid"] = $activity_actor[0]["gid"];
	insert_activity_actor($new_activity_actor);*/
	
	//set the stage phase activity
	$psp_id = get_psp_id_for_stage_and_phase($details->stage_id, $details->phase_id);
	
	$query = "SELECT position FROM pi_stage_phase_activity WHERE psp_id = " . $psp_id . " ORDER BY position DESC";
	$current_pos = db_result(db_query($query));
	$new_pos = $current_pos + 1;
	insert_stage_phase_activity($psp_id, $new_activity_id, $new_pos);
	
	//set pi activity node
	add_new_pi_activity_node($node, $user, $node_function, $visible_status, $new_details);
}


function workflow_for_created_node($node, $user, $node_function, $visible_status) {
	$details = get_inquiry_details_from_current_path();
	add_new_pi_activity_node($node, $user, $node_function, $visible_status, $details);
}
	
function add_new_pi_activity_node($node, $user, $node_function, $visible_status, $details) {
	$uid = $user->uid;
	//set the PI activity node
	set_pi_activity_node_for_activity($details->inquiry_id, $details->activity_id, $node->nid);
	$activity = load_activity($details->activity_id);

	$activity_status = load_activity_status($details->inquiry_id, $details->activity_id, $user->uid);

	
	//if the status was not set specifically for this user and it is an individual activity
	if ($activity->audience == "individual") {
		if ($activity_status->uid != $uid) {
			$activity_status->uid = $uid;
			unset($activity_status->gid);
			unset($activity_status->pas_id);
		}
	}

	//set the correct group
	else {
		$users_group = get_group_of_type($uid, $activity->audience, $details->inquiry_id, $details->stage_id, $details->phase_id, $details->activity_id);
		$context['group'] = $users_group;
		og_add_group_action($node, $context);

		if ($users_group != $activity_status->gid) {
			$activity_status->gid = $users_group;
			unset($activity_status->pas_id);
			unset($activity_status->uid);
		}
	}

	$activity_status->node_function = $node_function;
	$activity_status->visible_status = $visible_status;
	save_activity_status($activity_status);
}


function set_pi_activity_node_for_activity($inquiry, $activity, $nid) {
	$query = "INSERT INTO pi_activity_node SET ";
	$query .= "inquiry_id = '" . $inquiry . "'";
	$query .= ", activity_id = '" . $activity . "'";
	$query .= ", nid = '" . $nid . "'";
	db_query($query);
}
