<?php

define("NQUIRE_GROUP_TYPE_NORMAL", 0);
define("NQUIRE_GROUP_TYPE_INQUIRY", 1);
define("NQUIRE_GROUP_TYPE_SUBGROUP", 2);

// $Id: nquire_group.module,v 0.1 2010/03/17 MCP $

/**
 * @file  This module provides the implementation of the nQuire Group content type
 */

/**
 * hook_node_info()Define the nquire_group node type
 */
function nquire_group_node_info() {
	return array(
			'nquire_group' => array(
					'name' => t('nQuire Group'), // Required.
					'module' => 'nquire_group', // Required.
					'description' => t('An nQuire Group'), // Required.
					'has_title' => TRUE,
					'title_label' => t('Group name'),
					'has_body' => TRUE,
					'body_label' => t('Group Description'),
			)
	);
}

/**
 * Work out if a user has permission to do something with an Inquiry
 */
function nquire_group_access($op, $node, $account) {
	$is_author = $account->uid == $node->uid;
	switch ($op) {
		case 'create':
			// Allow if user's role has 'create inquiry' permission.
			return user_access('create inquiry design', $account);
		case 'update':
			// Allow if user's role has 'edit own inquiry' permission and user is
			// the author; or if the user's role has 'edit any inquiry' permission.
			return user_access('edit own inquiry design', $account) && is_author ||
							user_access('edit any inquiry design', $account);
		case 'delete':
			// Allow if user's role has 'delete own inquiry' permission and user is
			// the author; or if the user's role has 'delete any inquiry' permission.
			return user_access('delete own inquiry design', $account) && $is_author ||
							user_access('delete any inquiry design', $account);
	}
}

/**
 * INSERT command for a new activity
 */
function nquire_group_insert($node) {
	$group_type = isset($node->group_type) ? $node->group_type : NQUIRE_GROUP_TYPE_NORMAL;
	db_query("INSERT INTO {nquire_group} (nid, vid, group_type) VALUES (%d, %d, %d)", $node->nid, $node->vid, $group_type);
}

/**
 * UPDATE command for an existing inquiry
 */
function nquire_group_update($node) {
	if ($node->revision) {
		nquire_group_insert($node);
	} else {
		$group_type = isset($node->group_type) ? $node->group_type : NQUIRE_GROUP_TYPE_NORMAL;
		db_query("UPDATE {nquire_group} SET group_type='%s' WHERE vid='%d'", $group_type, $node->vid);
	}
}

/**
 * Implementation of hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function nquire_group_nodeapi(&$node, $op, $teaser, $page) {
	if ($node->type === 'nquire_group') {
		switch ($op) {
			case 'delete revision':
				// Notice that we're matching a single revision based on the node's vid.
				db_query('DELETE FROM {nquire_group} WHERE vid = %d', $node->vid);
				break;
		}
	}
	return;
}

/**
 * DELETE command for an inquiry
 * @todo this should delete all the associated data with the inquiry too!
 */
function nquire_group_delete(&$node) {
	// Delete the related information we were saving for this node.
	db_query('DELETE FROM {nquire_group} WHERE nid = %d', $node->nid);
}

/**
 * node loader function for inquiry type called when noad_load() is called
 */
function nquire_group_load($node) {
	$design = db_fetch_object(db_query('SELECT * FROM {nquire_group} WHERE vid = %d', $node->vid));

	return $design;
}

/**
 * Builds the view for the inquiry
 * @todo Add a detailed inquiry view to be used in the whole system
 */
function nquire_group_view($node, $teaser = FALSE, $page = FALSE) {
	// If $teaser is FALSE, the entire node is being displayed.
	if (!$teaser) {
		//Use Drupal's default node view.
		$node = node_prepare($node, $teaser);

		// render the inquiry description using a theme function
		$node->content['layout'] = array(
				'#value' => theme('inquiry_layout', $node),
				'#weight' => 1,
		);
		// Add more involved inquiry layout here
	}

	// If $teaser is true, node is being displayed as a teaser,
	// in this case, just show the description and none of the rest of the inquiry stuff
	if ($teaser) {
		//Use Drupal's default node view.
		$node = node_prepare($node, $teaser);
	}
	return $node;
}

function nquire_group_create_default_inquiry_group($owner, $title) {

	$node = new stdClass();
	$node->type = 'nquire_group';
	$node->uid = $owner;
	$node->title = $title;
	$node->body = t('Body');
	$node->og_description = $title;
	$node->og_selective = OG_CLOSED;
	$node->og_register = OG_REGISTRATION_NEVER;
	$node->og_directory = OG_DIRECTORY_NEVER;
	$node->og_private = TRUE;

	$node->group_type = NQUIRE_GROUP_TYPE_INQUIRY;

	node_save($node);
	og_save_subscription($node->nid, $node->uid, array('is_active' => 1, 'is_admin' => 1));
	return $node->nid;
}

function nquire_group_get_inquiry_group_nid($inquiry_nid) {
	$node = node_load($inquiry_nid);
	return $node->actor_gid;
}

function nquire_group_get_participants_with_role($gid, $role) {
	$users = array();
	$query = "SELECT DISTINCT uid FROM nquire_group_participant_role WHERE nid=%d AND role=%s";
	$result = db_query($query, $gid, $role);
	while ($row = db_fetch_array($result)) {
		$users[] = $row['uid'];
	}
	return $users;
}

function nquire_group_add_user_to_group($gid, $uid, $is_active = FALSE) {
	og_save_subscription($gid, $uid, array('is_active' => $is_active));
}

function nquire_group_delete_user_from_group($gid, $uid) {
	og_delete_subscription($gid, $uid);
	$query = "DELETE FROM {nquire_group_participant_role} WHERE nid=%d AND uid=%d";
	db_query($query, $gid, $uid);
}

function nquire_group_add_user_role($gid, $uid, $role_id) {
	if (nquire_group_get_user_status_in_group($gid, $uid) === 'member') {
		$query = "INSERT IGNORE INTO {nquire_group_participant_role} (nid, uid, role) VALUES (%d, %d, '%s')";
		db_query($query, $gid, $uid, $role_id);
	}
}

function nquire_group_user_has_role($gid, $uid, $role_id) {
	$query = "SELECT EXISTS(SELECT 1 FROM {nquire_group_participant_role} WHERE nid=%d AND uid=%d AND role='%s') AS e";
	$result = db_query($query, $gid, $uid, $role_id);
	$row = db_fetch_array($result);
	return $row && $row['e'];
}

function nquire_group_remove_user_role($gid, $uid, $role_id) {
	$query = "DELETE FROM {nquire_group_participant_role} WHERE nid=%d AND uid=%d AND role='%s'";
	db_query($query, $gid, $uid, $role_id);
}

function nquire_group_get_user_roles($gid, $uid) {
	$query = "SELECT role FROM {nquire_group_participant_role} WHERE nid=%d AND uid=%d";
	$result = db_query($query, $gid, $uid);
	$roles = array();
	while ($row = db_fetch_array($result)) {
		$roles[] = $row['role'];
	}
	return $roles;
}

function nquire_group_get_user_status_in_group($gid, $uid) {
	$query = "SELECT is_active FROM {og_uid} WHERE nid=%d AND uid=%d";
	$row = db_fetch_array(db_query($query, $gid, $uid));
	return $row ? ($row['is_active'] ? 'member' : 'awaiting') : 'none';
}

function nquire_group_set_join_mode($group_nid, $value) {
	$og = node_load($group_nid);
	og_load_group($og);
	$og->og_selective = $value;
	node_save($og);
	
	/*TODO if different expel awaiting people*/
}


