<?php
// $Id: pi_key_answers.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "key questions" node type
 */


/**
 * Implementation of hook_node_info().
 */
function pi_key_answers_node_info() {
	return array(
		'pi_key_answers' => array(
		'name' => t('Inquiry key answers'), // Required.
		'module' => 'pi_key_answers',  // Required.
		'description' => t('What are the answers to the key questions of your inquiry?'), // Required.
    'has_title' => TRUE,
    'title_label' => t('Short title'),
    'has_body' => TRUE,
    'body_label' => t('Key question answer'),
    'locked' => TRUE
		)
	);
}


/**
 * Implementation of hook_perm().
 */
function pi_key_answers_perm() {
	return array('create pi_key_answers content', 'edit pi_key_answers');
}

/**
 * Implementation of hook_access().
 */
function pi_key_answers_access($op, $node) {
  global $user;
  $uid = $user->uid;
  $details = get_inquiry_details_from_current_path();
  if ($op == 'create') {
    return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
  }
  if ($op == 'update') {
    return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
  }
	if ($op == 'delete') {
		if (arg(0) == 'node' && arg(2) == 'delete') {
		//get inquiry for session id and activity
			$nid = arg(1);
			$sid = get_current_session_id();
			$inquiry_id = get_current_inquiry_for_session_and_user_id($sid, $uid);
			$inquiry_id = $inquiry_id->inquiry_id;
			$activity_id = get_activity_id_for_nid($nid);
			if($inquiry_id && $activity_id) {
				return check_node_function_of_activity ($inquiry_id, $activity_id, $uid, 'edit');
			}
			else {
				return FALSE;
			}
		}
		else {
			return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
		}
	}
}

/**
 * Implementation of hook_form().
 */
function pi_key_answers_form(&$node) {

  global $user;
  $uid = $user->uid;
	$node_details = get_inquiry_details_from_current_path();
	if (is_numeric($node_details->activity_id)) {
		$current_activity = load_activity($node_details->activity_id);
  }
  	
  if ($current_activity->name) {
  	drupal_set_title(t($current_activity->name));
  }
  
  $key_questions_nid = find_sort_key_questions_nid_for_uid_and_inquiry($uid, $node_details->inquiry_id);
  //**should look for the key questions not the sort nid*********
  
  // Add the categories of existing nodes and the options list for new nodes
  if(isset($key_questions_nid)) {
    $key_questions_node = node_load($key_questions_nid);
    $categories = $key_questions_node->categories;
  }
  
  if(count($categories) > 0) {
    
  $key_question_options = array();
  
  foreach ($categories as $key => $category) {
    $key_question = node_load($key);
    $key_question_options[$key] = $key_question->title;
  }
  
 // if (count($key_question_options) > 0) {
  
	$form['key_question_id'] = array(
		'#type' => 'select',
		'#title' => t('Key question to answer'),
		'#required' => TRUE,
		'#default_value' => $node->key_question_id,
		'#description' => t('Select a key question to answer'),
		'#options' => $key_question_options,
		'#weight' => -6
	);

	$form['title'] = array(
		'#type' => 'textfield',
		'#title' => t('Short title'),
		'#required' => TRUE,
		'#default_value' => check_plain($node->title),
		'#description' => t('Enter a short label for your answer'),
		'#weight' => -4
	);
    
	$form['body_filter']['body'] = array(
		'#type' => 'textarea',
		'#title' => t('Answer'),
		'#required' => TRUE,
		'#default_value' => check_plain($node->body),
		'#description' => t('Enter an answer to your selected key question'),
		'#resizable' => FALSE,
		'#rows' => 4,
		'#cols' => 40,
		'#weight' => -2
	);
  
  if($current_activity->description) {
  	$prefix = "<p>" . $current_activity->description . "</p>";
  }
  else {
		$prefix = "<p>Use your findings to answer a key question.</p>";
	}

	$form['#prefix'] = $prefix;
	}
	return $form;
}

/**
 * Implementation of hook_insert().
 */
function pi_key_answers_insert($node) {
    db_query("INSERT INTO {pi_key_answers} (nid, vid, key_question_id) VALUES (%d, %d, %d)", $node->nid, $node->vid, $node->key_question_id, $node->weight);
}

/**
 * Implementation of hook_update().
 */
function pi_key_answers_update($node) {
	if ($node->revision) {
		pi_key_answer_insert($node);
	}

	else {
		db_query("UPDATE {pi_key_answers} SET key_question_id = '%d' WHERE vid = '%d'", $node->key_question_id, $node->vid);
	}
}

/**
 * Implementation of hook_delete().
 */
function pi_key_answers_delete(&$node) {
// Delete the related information we were saving for this node.
	db_query('DELETE FROM {pi_key_answers} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function pi_key_answers_load($node) {
	return db_fetch_object(db_query('SELECT * FROM {pi_key_answers} WHERE vid = %d',
    $node->vid));
}

/**
 * Implementation of hook_view().
 */
function pi_key_answers_view($node, $teaser = FALSE, $page = FALSE) {
	if (!$teaser) {
	// Use Drupal's default node view.
	$node = node_prepare($node, $teaser);

	$node->content['pi_key_answers'] = array(
		'#value' => theme('pi_key_answers', $node),
		'#weight' => 2
	);
	}

	if ($teaser) {
    // Use Drupal's default node view.
		$node = node_prepare($node, $teaser);
	}
	return $node;
}

/**
 * MISSING
 * 
 * @return multitype:multitype:multitype:string   
 */
function pi_key_answers_theme() {
	return array(
		'pi_key_answers_node_form' => array(
    'arguments' => array('form'),
    ),
		'pi_key_answers' => array(
		'arguments' => array('node'),
		),
	);
}


function theme_pi_key_answers_node_form($form) {
		$details = get_inquiry_details_from_current_path();
    $activity = load_activity($details->activity_id);
    if ($activity->description) {
    	$output  .= '<p>' . t($activity->description) . '</p>';
    }
    else {
    	$output  .= '<p>' . t('Add a key answer.') . '</p>';
    }
    
    $key_questions_nid = find_sort_key_questions_nid_for_uid_and_inquiry($uid, $node_details->inquiry_id);
  //**should look for the key questions not the sort nid*********
  
  // Add the categories of existing nodes and the options list for new nodes
  if(isset($key_questions_nid)) {
    $key_questions_node = node_load($key_questions_nid);
    $categories = $key_questions_node->categories;
  }
  
  if(count($categories) > 0) {
    $output .= drupal_render($form);
  }
  else {
  	$output .= "<p>No key questions are available to answer.</p>";
  }
	return $output;
}

/**
 * MISSING
 * 
 * @param unknown_type $node
 * @return string
 */
function theme_pi_key_answers($node) {
	$details = get_inquiry_details_from_current_path();
  	if (is_numeric($details->activity_id)) {
  		$current_activity = load_activity($details->activity_id);
  	}
  	
  	if ($current_activity->name) {
  		drupal_set_title(t($current_activity->name));
  	}
  	
	$key_question_node = node_load($node->key_question_id);

	$output = "";
	$output .= "<p><strong>Question title:</strong> " . check_plain($key_question_node->title) . "</p>";
	$output .= "<p><strong>Key question:</strong> " . check_plain($key_question_node->body) . "</p>";

	return $output;
}

