<?php
// $Id: pi_result_presentations.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "result presentations" node type
 */


/**
 * Implementation of hook_node_info().
 */
function pi_result_presentations_node_info() {
    return array(
    'pi_result_presentations' => array(
    'name' => t('Inquiry result presentations'), // Required.
    'module' => 'pi_result_presentations',  // Required.
    'description' => t('A presentation for exploring part of a collected dataset?'), // Required.
    'has_title' => TRUE,
    'title_label' => t('Title'),
    'has_body' => FALSE,
    'body_label' => t('Presentation'),
    'locked' => TRUE
    )
    );
}


/**
 * Implementation of hook_perm().
 */
function pi_result_presentations_perm() {
    return array('create pi_result_presentations content', 'edit pi_result_presentations');
}

/**
 * Implementation of hook_access().
 */
function pi_result_presentations_access($op, $node) {
    global $user;
    $details = get_inquiry_details_from_current_path();

    if ($op == 'create') {
        return TRUE;
    //return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
    //return (user_access('create pi_result_presentations'));
    }

    if ($op == 'update' || $op == 'delete') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    //return (user_access('edit own pi_result_presentations'));
    }
}

/**
 * Implementation of hook_form().
 */
function pi_result_presentations_form(&$node) {

    global $user;
    $node_details = get_inquiry_details_from_current_path();

    $current_activity = load_activity($node_details->activity_id);
    drupal_set_title(t($current_activity->name));

    $key_question_options = array();
    $key_question_node_nids = get_node_ids_for_activity_type ($node_details->inquiry_id, 'Add key question', $user->uid);

    while ($key_question_node_nid = db_fetch_object($key_question_node_nids)) {
        $key_question_node = node_load($key_question_node_nid->nid);
        $key_question_options[$key_question_node_nid->nid] = $key_question_node->title . '-' . $key_question_node_nid->nid;
    };


    $measure_options = array();

    $measures_param = find_selected_measures_nid_for_uid_and_inquiry ($user->uid, $node_details->inquiry_id);

    if ($measures_param) {
        $measures_node = node_load($measures_param);
        $measure_array = $measures_node->measure_rows;
    };

    if ($measure_array) {
        foreach ($measure_array as $measure_row) {
            $measure = node_load($measure_row->measure_nid);
            $measure_options[$measure_row->measure_nid] = $measure->title;
        };
    };

    $measures_selected = array();
    if ($node->presentation_measures) {
        foreach (explode(",",$node->presentation_measures) as $sel) {
            $measures_selected[] = $sel;
        };
    };

    if (isset($key_question_options) AND ($key_question_options != array())) {

        $form['key_question_id'] = array(
            '#type' => 'select',
            '#title' => t('Key question to investigate'),
            '#required' => TRUE,
            '#default_value' => $node->key_question_id,
            '#description' => t('Select a key question to investigate'),
            '#options' => $key_question_options,
            '#weight' => 0
        );

    };

    $form['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Short title'),
        '#required' => TRUE,
        '#default_value' => check_plain($node->title),
        '#description' => t('Enter a short label for your results presentation'),
        '#weight' => 4
    );

    $form['presentation_measures'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Available data'),
        '#required' => TRUE,
        '#options' => $measure_options,
        '#default_value' => $measures_selected,
        '#weight' => 6
    );

    $form['weight'] = array(
        '#type' => 'hidden',
        '#title' => t('Weight'),
        '#required' => FALSE,
        '#value' => '1',
        '#weight' => 8
    );

    $prefix = "";

    $hypothesis_node_nids = get_node_ids_for_activity_type ($node_details->inquiry_id, 'pi_hypothesis', $user->uid);

    while ($hypothesis_node_nid = db_fetch_object($hypothesis_node_nids)) {
        $hypothesis_node = node_load($hypothesis_node_nid->nid);
        $prefix .= "<p><strong>Your hypothesis is</strong>: " . $hypothesis_node->hypothesis . "</p>";
    };

    $prefix .= "<p>Enter a short title and select a set of your measures in order to generate a data table that you can use to explore your results.</p>";

    $form['#prefix'] = $prefix;

    return $form;

}

/**
 * Implementation of hook_insert().
 */
function pi_result_presentations_insert($node) {
    db_query("INSERT INTO {pi_result_presentations} (nid, vid, key_question_id, presentation_measures, weight) VALUES ('%d', '%d', '%d', '%s', '%d')",
        $node->nid, $node->vid, $node->key_question_id, implode(',', $node->presentation_measures), $node->weight);
}

/**
 * Implementation of hook_update().
 */
function pi_result_presentations_update($node) {
    if ($node->revision) {
        pi_key_question_insert($node);
    }
    else {
        db_query("UPDATE {pi_result_presentations} SET key_question_id = '%d', presentation_measures = '%s', weight = '%d' WHERE vid = '%d'", $node->key_question_id, implode(',', $node->presentation_measures), $node->weight, $node->vid);
    };
}

/**
 * Implementation of hook_delete().
 */
function pi_result_presentations_delete(&$node) {
// Delete the related information we were saving for this node.
    db_query('DELETE FROM {pi_result_presentations} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function pi_result_presentations_load($node) {
    return db_fetch_object(db_query('SELECT * FROM {pi_result_presentations} WHERE vid = %d',
    $node->vid));
}

/**
 * Implementation of hook_view().
 */
function pi_result_presentations_view($node, $teaser = FALSE, $page = FALSE) {
    if (!$teaser) {
    // Use Drupal's default node view.
        $node = node_prepare($node, $teaser);

        $node->content['pi_result_presentations'] = array(
            '#value' => theme('pi_result_presentations', $node),
            '#weight' => 2
        );

    }

    if ($teaser) {
    // Use Drupal's default node view.
        $node = node_prepare($node, $teaser);
    }

    return $node;
}

/**
 * MISSING
 * 
 * @return multitype:multitype:multitype:string   
 */
function pi_result_presentations_theme() {
    return array(
    'pi_result_presentations' => array(
    'arguments' => array('node'),
    ),
    );
}


/**
 * MISSING
 * 
 * @param unknown_type $node
 * @return unknown
 */
function theme_pi_result_presentations($node) {

    global $user;
    $node_details = get_inquiry_details_from_current_path();

    if (isset($node->key_question_id) AND ($node->key_question_id > 0)) {
        $output .= "<p><strong>Key question id:</strong> " . $node->key_question_id . "</p>";
    };

    $headings = get_selected_measures_headings_for_inquiry_and_user ($node_details->inquiry_id, $node->presentation_measures, $user->uid);
    $values = get_selected_measures_data_for_inquiry_and_user ($node_details->inquiry_id, $node->presentation_measures, $user->uid);

    $output .= theme('table', $headings, $values);

    return $output;
}

