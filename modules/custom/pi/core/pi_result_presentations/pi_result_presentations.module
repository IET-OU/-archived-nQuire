<?php
// $Id: pi_result_presentations.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "result presentations" node type
 */


/**
 * Implementation of hook_node_info().
 */
function pi_result_presentations_node_info() {
    return array(
    'pi_result_presentations' => array(
		'name' => t('Inquiry result presentations'), // Required.
		'module' => 'pi_result_presentations',  // Required.
		'description' => t('A presentation for exploring part of a collected dataset?'), // Required.
		'has_title' => TRUE,
		'title_label' => t('Short title'),
		'has_body' => TRUE,
		'body_label' => t('Prediction'),
    	'locked' => TRUE
    	)
    );
}


/**
 * Implementation of hook_perm().
 */
function pi_result_presentations_perm() {
    return array('create pi_result_presentations content', 'edit pi_result_presentations');
}

/**
 * Implementation of hook_access().
 */
function pi_result_presentations_access($op, $node) {
    global $user;
    $details = get_inquiry_details_from_current_path();

    if ($op == 'create') {
        return TRUE;
    //return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
    //return (user_access('create pi_result_presentations'));
    }

    if ($op == 'update' || $op == 'delete') {
        return TRUE;
        // return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    	//return (user_access('edit own pi_result_presentations'));
    }
}

/**
 * Implementation of hook_form().
 */
function pi_result_presentations_form(&$node) {


    global $user;

    $node_details = get_inquiry_details_from_current_path();
    $current_activity = load_activity($node_details->activity_id);

    $measures_param = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);

    //drupal_set_title(t($current_activity->name));
    drupal_set_title(t($current_activity->name));

    $key_question_options = array();
    $key_question_node_nids = get_node_ids_for_activity_type ($node_details->inquiry_id, 'Add key question', $user->uid);

    while ($key_question_node_nid = db_fetch_object($key_question_node_nids)) {
        $key_question_node = node_load($key_question_node_nid->nid);
        $key_question_options[$key_question_node_nid->nid] = $key_question_node->title . '-' . $key_question_node_nid->nid;
    };


    $measure_options = array();

    $measures_param = find_selected_measures_nid_for_uid_and_inquiry ($user->uid, $node_details->inquiry_id);

    if ($measures_param) {
        $measures_node = node_load($measures_param);
        $measure_array = $measures_node->measure_rows;
    };

    if ($measure_array) {
        foreach ($measure_array as $measure_row) {
            $measure = node_load($measure_row->measure_nid);
            $measure_options[$measure_row->measure_nid] = $measure->title;
        };
    };

    $measures_selected = array();
    if ($node->presentation_measures) {
        foreach (explode(",",$node->presentation_measures) as $sel) {
            $measures_selected[] = $sel;
        };
    };

    if (isset($key_question_options) AND ($key_question_options != array())) {

        $form['key_question_id'] = array(
            '#type' => 'select',
            '#title' => t('Key question to investigate'),
            '#required' => TRUE,
            '#default_value' => $node->key_question_id,
            '#description' => t('Select a key question to investigate'),
            '#options' => $key_question_options,
            '#weight' => 0
        );

    };

    $form['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Short title'),
        '#required' => TRUE,
        '#default_value' => check_plain($node->title),
        '#description' => t('Enter a short label for your results presentation'),
        '#weight' => 0
    );

    $form['body_filter']['body'] = array(
        '#type' => 'textarea',
        '#title' => t('Prediction'),
        '#required' => FALSE,
        '#default_value' => check_plain($node->body),
        '#description' => t('Enter what you would predict this data set to show'),
        '#weight' => 6
    );


    // onepageprofile_categories and tree used for draggable menu items
    $form['onepageprofile_categories'] = array(
        '#tree'   => TRUE,
        '#weight' => 3
    );

    // Add the categories of existing nodes and the options list for new nodes
    if(isset($node->nid)) {
        $categories = $node->categories;//pi_draggable_measures_get_choice($node);
    }
    else {
        $categories = pi_result_presentations_get_options();
    }

    // set $tree to point to the above $form['onepageprofile_categories'] object
    $tree = &$form['onepageprofile_categories'];
    foreach ($categories as $key => $category) {

        $measure = node_load($key);

        // format the measure units
        if (isset($measure->units_short) AND ($measure->units_short !='')) {
            $units = " (" . $measure->units_short . ")";
        }
        elseif (isset($measure->units) AND ($measure->units !='')) {
            $units = " (" . $measure->units . ")";
        }
        else {
            $units = "";
        };

        // add $tree entries for current category (i.e. $key)
        $tree[$key]['title'] = array(
            '#value' => t($category['#title'] . $units),
        );

        $tree[$key]['weight'] = array(
            '#type'          => 'weight',
            '#delta'         => max(10, count($categories)),
            '#default_value' => $category['#weight'],
        );

        $tree[$key]['status'] = array(
            '#type'          => 'select',
            '#default_value' => $category['#status'],
            '#options' => array('0' => 'unselected', '1' => 'selected'),
        );
        
    }

    $prefix = "";
	$hypothesis_prefix = "";

	$hypothesis_param = find_hypothesis_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);

	if ($hypothesis_param) {
		$hypothesis_node = node_load($hypothesis_param);
		$hypothesis_activity_id = get_activity_id_for_nid($hypothesis_param);
		$hypothesis_activity = load_activity($hypothesis_activity_id);
		if ($hypothesis_activity->description) {
  		$hypothesis_prefix .= "<strong>" . t($hypothesis_activity->description) . ": </strong>";  
  	}
  	else {
    	$hypothesis_prefix .= "<strong>" . t('Your hypothesis') . ": </strong>";
  	}
		$prefix .= "<p>" . $hypothesis_prefix . $hypothesis_node->hypothesis . "</p>";
	}

    $prefix .= "<p>Enter a short title, select a set of your measures to generate a data table you can use to answer your question, and enter what you would predict to find.</p>";

    $form['#prefix'] = $prefix;

    return $form;

}



/**
 * Implementation of hook_insert().
 */
function pi_result_presentations_insert($node) {
    while ($measure = current($node->onepageprofile_categories)) {

        db_query("INSERT INTO pi_result_presentations 
        (nid, vid, key_question_id, available_measure, status, weight) 
        VALUES ('" . $node->nid . "', '" . $node->vid . "', 
        '" . $measure['key_question_id'] . "', 
        '" . key($node->onepageprofile_categories) . "', 
        '" . $measure['status'] . "', 
        '" . $measure['weight'] . "')");

        next($node->onepageprofile_categories);
    }
    reset($node->onepageprofile_categories);
}

/**
 * Implementation of hook_update().
 */
function pi_result_presentations_update($node) {
// if this is a new node or we're adding a new revision,
    if ($node->revision) {
        pi_result_presentations_insert($node);
    }
    else {
        db_query("DELETE FROM pi_result_presentations WHERE vid = '" . $node->vid . "' ");
        pi_result_presentations_insert($node);
    }
}

/**
 * Implementation of hook_delete().
 */
function pi_result_presentations_delete(&$node) {
    db_query("DELETE FROM pi_result_presentations WHERE nid = '" . $node->nid . "' ");
}

/**
 * Implementation of hook_load().
 */
function pi_result_presentations_load($node) {
    $result = new stdClass;
    $result->categories = pi_result_presentations_get_choice($node);
    return $result;
}


/**
 * Implementation of hook_view().
 */
function pi_result_presentations_view($node, $teaser = FALSE, $page = FALSE) {
    if (!$teaser) {
    // Use Drupal's default node view.
        $node = node_prepare($node, $teaser);

        $node->content['pi_result_presentations'] = array(
            '#value' => theme('pi_result_presentations', $node),
            '#weight' => 2
        );

    }

    if ($teaser) {
    // Use Drupal's default node view.
        $node = node_prepare($node, $teaser);
    }

    return $node;
}


/**
 * Implementation of hook_theme().
 */
function pi_result_presentations_theme() {
    return array(
    'pi_result_presentations_node_form' => array(
    'arguments' => array('form'),
    ),
    'pi_result_presentations' => array(
    'arguments' => array('node'),
    ),
    );
}

/**
 * implementation of theme_hook().   
 */
function theme_pi_result_presentations($node) {

    global $user;
    $details = get_inquiry_details_from_current_path();

    $output = "";
        
    if (isset($node->key_question_id) AND ($node->key_question_id > 0)) {
        $output .= "<p><strong>Key question id:</strong> " . $node->key_question_id . "</p>";
    };
    			
    $selected_measures = "";
    $delim = "";
    
    $measures = db_query("SELECT available_measure FROM pi_result_presentations WHERE nid = '" . $node->nid . 
    								"' AND vid = '" . $node->vid . 
    								"' AND status = '1' ORDER BY weight ASC");
    					
    while ($measure = db_fetch_object($measures)) {
    	$selected_measures .= $delim . $measure->available_measure;
    	if ($delim == "") {
    		$delim = ", ";
    	};
    };
        
    $header = get_selected_measures_headings_for_inquiry_and_user ($details->inquiry_id, $selected_measures, $user->uid);
    $rows = get_selected_measures_data_for_inquiry_and_user ($details->inquiry_id, $selected_measures, $user->uid);
        
    $output .= theme('table', $header, $rows);
    return $output;
    
}

/**
 * Theme pi_results_presentations form
 */
function theme_pi_result_presentations_node_form($form) {

    drupal_add_tabledrag('onepageprofile-categories', 'order', 'sibling', 'onepageprofile-element');

    // Header
    $header = array(
        t('Measure'),
        t('Status'),
        t('Weight'),
    );

    // Rows for the tabledrag
    $rows = array();

    $tree = &$form['onepageprofile_categories'];
    foreach (element_children($tree) as $key) {
        $tree[$key]['weight']['#attributes']['class'] = 'onepageprofile-element';

        $row = array();
        $row[] = drupal_render($tree[$key]['title']);
        $row[] = drupal_render($tree[$key]['status']);
        $row[] = drupal_render($tree[$key]['weight']);

        $rows[] = array('data' => $row, 'class' => 'draggable');
    }

    // Build the output
    $output  = '<p>' . t('Select and order the measures for your presentation.') . '</p>';
    $output .= theme('table', $header, $rows, array('id' => 'onepageprofile-categories'));
    $output .= drupal_render($form);

    return $output;
}


/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_result_presentations_get_choice($node) {

    global $user;
    $categories = array();

    $result = db_query("SELECT * FROM pi_result_presentations WHERE nid = '" . $node->nid . "' AND vid = '" . $node->vid . "' ORDER BY status DESC, weight ASC");
	
    while ($row = db_fetch_object($result)) {
        $loaded_node = node_load($row->available_measure, NULL, TRUE);
        $categories[$row->available_measure] = array(
            '#weight' => $row->weight,
            '#title'  => t($loaded_node->title),
            '#status'  => $row->status
        );
    }

    // uasort($categories, "my_weight_compare");

    return $categories;
}

/**
 * my_weight_compre already defined in pi_draggable_measures.module
function my_weight_compare($x, $y) {
    $xw = (int) $x['#weight'];
    $yw = (int) $y['#weight'];
    return $xw > $yw;
}
 */

/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_result_presentations_get_options() {

    global $user;
    $details = get_inquiry_details_from_current_path();
    
    $categories = array();

    $measures = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);
	$measures_obj = node_load($measures);
	
    foreach($measures_obj->categories as $key => $measure) {
    	$measure_node = node_load($key);
    	$categories[$key] = array (
            '#weight' => 1,
            '#title'  => t($measure_node->title),
            '#status'  => 'none'
    	);
    };
    
    return $categories;
}
