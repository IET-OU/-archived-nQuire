<?php
// $Id: pi_report_introduction.module ou_mbg

/**
 * @file
 * Provides a "report_introduction" node type.
 */

/**
 * Implementation of pi_report_introduction_node_info().
 */
function pi_report_introduction_node_info() {
  // We return an array since a module can define multiple node types.
  // We're only defining one node type, type 'pi_report_introduction'.
  return array(
    'pi_report_introduction' => array(
      'name' => t('Report introduction'), // Required.
      'module' => 'pi_report_introduction',  // Required.
      'description' => t('Write your introduction'), // Required.
      'has_title' => FALSE,
      'title_label' => t('Report introduction'),
      'has_body' => TRUE,
      'body_label' => t('Introduction'),
      'min_word_count' => 2,
      'locked' => TRUE
    )
  );
}

//following hook_menu was commented out in previous version apart from the function command
//($may_cache) not used in Drupal 6 so throws up an error. 
//All the below section therefore commented out MBG 09_08_11

/**
 * Implementation of pi_report_introduction_menu().
 */
//function pi_report_introduction_menu($may_cache) {
//  $items = array();
//
//  // Do not cache this menu item during the development of this module.
//  if (!$may_cache) {
//    $items[] = array(
//      'path' => 'node/add/pi_report_introduction',
//      'title' => t('Report introduction'),
//      'access' => user_access('create hypothesis'),
//    );
//  }
//
//  return $items;
//}

/**
 * Implementation of pi_report_introduction_perm().
 */
function pi_report_introduction_perm() {
  return array('create pi_report_introduction', 'edit own pi_report_introduction');
}

/**
 * Implementation of pi_report_introduction_access().
 */
function pi_report_introduction_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return (user_access('create pi_report_introduction'));
  }

  if ($op == 'update' || $op == 'delete') {
    return (user_access('edit own pi_report_introduction') && ($user->uid == $node->uid));
  }
}

/**
 * Implementation of pi_report_introduction_form().
 */
function pi_report_introduction_form(&$node) {
  // Get metadata for this node type
  // (we use it for labeling title and body fields).
  // We defined this in pi_report_introduction_node_info().
  $type = node_get_types('type', $node);

  $inquiry_id = arg(3)|1;
  
  $form['title'] = array(
    '#type' => 'hidden',
    '#title' => check_plain($type->title_label),
    '#required' => FALSE,
    '#default_value' => check_plain($type->title_label),
    '#weight' => -5
  );
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#required' => TRUE,
    '#default_value' => $node->body,
    '#resizable' => FALSE,
    '#rows' => 7,
    '#weight' => 5
  );
  $form['inquiry_id'] = array(
    '#type' => 'hidden',
    '#title' => t('inquiry_id'),
    '#required' => FALSE,
    '#default_value' => $node->inquiry_id|$inquiry_id,
    '#weight' => -5
  );
  
  $prefix = "<p>An introduction should introduce the topic of your inquiry and explain how you are planning to carry out your investigation.</p>";
  $prefix .= "<p>Try to keep your introduction short and to the point. State what you investigating, how you plan to carry out the investigation, and you expect to find.</p>";
  
  $form['#prefix'] = $prefix;

  return $form;
}

/**
 * Implementation of pi_report_introduction_validate().
 */
function pi_report_introduction_validate($node) {
  // Enforce a minimum word length of 3.
  if (isset($node->report_introduction) && str_word_count($node->report_introduction) < 3) {
    $type = node_get_types('type', $node);
    form_set_error('report_introduction', t('Your @type is too short. You need at least three words.', array('@type' => $type->name)));
  }
}

/**
 * Implementation of pi_report_introduction_insert().
 */
function pi_report_introduction_insert($node) {
  db_query("INSERT INTO {pi_report_introduction} (nid, vid, inquiry_id) VALUES (%d, %d, '%d')",
    $node->nid, $node->vid, $node->inquiry_id|1);
}

/**
 * Implementation of pi_report_introduction_update().
 */
function pi_report_introduction_update($node) {
  if ($node->revision) {
    pi_available_report_introduction_insert($node);
  }
  else {
    db_query("UPDATE {pi_report_introduction} SET inquiry_id = '%d' WHERE vid = %d",
      $node->inquiry_id|1, $node->vid);
  }
}

/**
 * Implementation of pi_report_introduction_delete().
 */
function pi_report_introduction_delete(&$node) {
  db_query('DELETE FROM {pi_report_introduction} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of pi_report_introduction_load().
 */
function pi_report_introduction_load($node) {
  return db_fetch_object(db_query('SELECT inquiry_id FROM {pi_report_introduction} WHERE vid = %d',
    $node->vid));
}

/**
 * Implementation of hook_view().
 */
function pi_report_introduction_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }

  if ($teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }

  return $node;
}


