<?php

// $Id: pi_activity.info,  2010/05/21  MCP $


module_load_include('inc', 'pi_activity', 'pi_activity.extra');
module_load_include('inc', 'pi_activity', 'pi_activity.links');
module_load_include('inc', 'pi_activity', 'pi_activity.content');

/**
 *
 * This functions returns the information for the activity node
 * Function used by the drupal system
 */
function pi_activity_node_info() {
	return array(
			'pi_activity' => array(
					'name' => t('Inquiry Activity'), // Required.
					'module' => 'pi_activity', // Required.
					'description' => t('Activities are plans for work that students do within nQuire'), // Required.
					'has_title' => TRUE,
					'title_label' => t('Activity name'),
					'has_body' => TRUE,
					'body_label' => t('Description of the activity'),
					'locked' => TRUE
			)
	);
}

/**
 *
 * Drupal API hook_perm() implemetaiton to define available permissions for activity node type
 */
function pi_activity_perm() {
	return array('create activity', 'edit own activity', 'edit any activity', 'delete own activity', 'delete any activity');
}

/**
 * Access callback for pi_activities under the url activity/%
 * @param uint $activity node of the activity being accessed
 * @param uint $op the function to perform on the activity (view/add/edit)
 * @return TRUE or FALSE to indicate whether access is allowed for that function
 */
function pi_activity_access($activity, $op) {
	return FALSE;
}

/**
 * hook_menu() for pi_activity defining all the activity/% menu callbacks, etc
 * @return array of menu items as per drupal 6 api
 */
function pi_activity_menu() {
	$items = array();
	$items['activity/%node'] = array(
			'title' => 'View',
			'file' => 'pi_activity.activity.inc',
			'page callback' => 'pi_activity_content_view',
			'page arguments' => array(1, 'view'),
			'access callback' => 'pi_activity_tab_view_access_callback',
			'access arguments' => array(1),
			'type' => MENU_CALLBACK
	);

	$items['activity/%node/shared/%'] = array(
			'title' => 'View',
			'file' => 'pi_activity.activity.inc',
			'page callback' => 'pi_activity_shared_content_view',
			'page arguments' => array(1, 3),
			'access callback' => 'pi_activity_shared_content_view_access',
			'access arguments' => array(1, 3),
			'type' => MENU_CALLBACK
	);

	$items['activity/%node'] = array(
			'title' => 'Edit',
			'file' => 'pi_activity.activity.inc',
			'page callback' => 'pi_activity_content_view',
			'page arguments' => array(1),
			'access arguments' => array(1),
			'access callback' => 'pi_activity_access_callback',
			'type' => MENU_CALLBACK,
			'weight' => 1
	);

	$items['activity/%node/delete'] = array(
			'title' => 'Delete',
			'file' => 'pi_activity.activity.inc',
			'page callback' => 'pi_activity_content_delete',
			'page arguments' => array(1),
			'access arguments' => array(1),
			'access callback' => 'pi_activity_tab_edit_access_callback',
			'type' => MENU_CALLBACK,
			'weight' => 1
	);

	return $items;
}

function pi_activity_tab_view_access_callback($node) {
	switch ($node->activity_type) {
		case 'pi_data_spreadsheet':
		case 'pi_data':
		case 'pi_key_questions':
		case 'pi_key_answers':
		case 'pi_available_measures':
			return !pi_activity_tab_edit_access_callback($node) && pi_activity_tabs_access_to_content($node, 'view');

		default:
			return pi_activity_tabs_access_to_content($node, 'view');
	}
}

/* TOREMOVE */

function pi_activity_has_custom_edit_page($node) {
	switch ($node->activity_type) {
		case 'pi_sort_data':
		case 'pi_sort_key_answers':
		case 'pi_sort_result_presentations':
			return TRUE;
		default:
			return FALSE;
	}
}

function pi_activity_is_editable($node) {
	switch ($node->activity_type) {
		case 'pi_read_information':
		case 'pi_explore_tool':
			return FALSE;
		default:
			return TRUE;
	}
}

function pi_activity_tab_edit_access_callback($node) {
	return pi_activity_is_editable($node) && pi_activity_tabs_access_to_content($node, 'edit');
}

function pi_activity_access_callback($node) {
	return pi_activity_tab_edit_access_callback($node) || pi_activity_tab_view_access_callback($node);
}

function pi_activity_tabs_access_to_content($node, $function) {
	if ($node->type === 'pi_activity') {
		global $user;

		$inquiry_info = pi_info()->getInquiryInfoForActivity($node->nid);
		$access_data = pi_info()->getAccessManager($inquiry_info->getInquiryNid(), $user->uid);

		$access = $access_data->getAccessToItem($node);

		return ($node->script_activity || pi_info()->getContentManager()->getContent($node->nid, $user->uid, FALSE)) && ($access === 'edit' || ($access === 'view' && $function === 'view'));
	}

	return FALSE;
}

/**
 * This page is the standard activity authoring page that is currently linked to from admin/nquire
 * It calls pi_activity_form which will be rewritten in pi_activity_pi_activity_form_alter where it will
 * be redirected to it's calling location where necessary
 */
function pi_activity_add() {
	$output = '';

	$output = t("<p>Use this page to add an activity to an inquiry - select the activity, then the phase and then the phases that it will be incuded in." .
					" For each stage you wil have to choose how it will be made available: as either <i>unavailable</i>, " .
					"<i>startable</i>, <i>editable</i> or <i>viewable</i>.");
	$new_activity = new stdClass();
	$new_activity->type = 'pi_activity';
	$output .= drupal_get_form('pi_activity_form', $new_activity);

	return $output;
}

/**
 * General form form for activity editing using drupal forms API.
 * @param $form_state
 */
function pi_activity_form(&$node, $form_state) {
	$form = array();
	return $form;
}

/**
 *
 * Drupal API hook_form_alter(), to take away group membership if form is in an activity and
 * move menu options
 * @param &$form
 * @param &$form_state
 */
function pi_activity_form_alter(&$form, &$form_state, $form_id) {
	if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id) {
		if (arg(0) === 'activity') {
			$activity_node = node_load(arg(1));
		} else {
			$activity_node = node_load($form_state['values']['current_activity_nid']);
		}

		if (!$form_state['values']['original_action']) {
			$original_action = $form['#action'];
			$form['original_action'] = array(
					'#type' => 'hidden',
					'#default_value' => $original_action,
			);
		} else {
			$original_action = $form_state['values']['original_action'];
		}

		if ($activity_node) {
			$path = "phase/{$activity_node->phase_nid}";
			$form['#redirect'] = $form_state['redirect'] = $path;
		}

		$form['#action'] = $original_action;
		
		nquire_commons_form_replace_delete_button_with_link($form, $activity_node);
	}
}

/**
 * hook_load from Drupal API
 * Returns the activity_object from pi_activity table - used in the activity menu
 * CHANGED FOR ACTIVITY_NODE VERSION
 * @param objecy (node) $node
 * @return object from db_fetch_object() for pi_activity table
 */
function pi_activity_load($node) {
	$query = "SELECT * FROM {pi_activity} WHERE `nid` = %d";
	$result = db_query($query, $node->nid);
	$activity = db_fetch_object($result);

	return $activity;
}

/**
 *
 * hook_insert() implementation for pi_activity node
 * @param $node
 */
function pi_activity_insert($node) {
// It is necessary to update the following tables:
//   * pi_activity
//   * pi_activity_stage_state
//   * pi_activity_status
//   * pi_activity_node
// First update the pi_activity table
	$pi_activity_row = _pi_activity_form_data_to_pi_activity_row($node);
	$write_result = drupal_write_record('pi_activity', $pi_activity_row);

	if ($write_result == FALSE) {
		drupal_set_message(t('Error saving new pi_activity data'), 'error');
	}
}

function pi_activity_theme() {
	return array(
			'pi_activity_display_shared_content_node' => array(
					'arguments' => array('activity_node' => NULL, 'actor_id' => NULL, 'node' => NULL, 'teaser' => FALSE),
					'file' => 'pi_activity.activity.inc',
			),
			'pi_activity_display_contribution_content_node' => array(
					'arguments' => array('activity_collaboration' => '', 'content_node' => NULL, 'content_actor' => NULL, 'viewer_collaboration' => ''),
					'file' => 'pi_activity.activity.inc',
			),
			'pi_activity_links' => array(
					'arguments' => array('links' => NULL),
					'file' => 'pi_activity.links.inc',
			),
	);
}

/**
 *
 * Drupal API hook_update() function for pi_activity
 * @param $node
 */
function pi_activity_update($node) {
	$activity_row_data = _pi_activity_form_data_to_pi_activity_row($node);
	$update_result = drupal_write_record('pi_activity', $activity_row_data, array('nid'));

	if ($update_result == FALSE)
		drupal_set_message('Error: Activity data not saved due to database problem; try saving again.', 'error');
}

/**
 *
 * Take the data from $node provided by drupal API to and turn it into an object that can be saved using
 * drupal_write_record()
 * @param $node
 */
function _pi_activity_form_data_to_pi_activity_row($node) {
	$data_to_save = new StdClass();

	$property_to_column = array(
			'nid' => 'nid',
			'vid' => 'vid',
			'activity_type' => 'activity_type',
			'node_type' => 'node_type',
			'parameters' => 'parameters',
			'script_activity' => 'script_activity',
			'parent_activity' => 'parent_activity',
			'phase_nid' => 'phase_nid',
			'show_children_in_phase' => 'show_children_in_phase',
	);

	foreach ($property_to_column as $column => $property) {
		$data_to_save->$column = $node->$property;
	}

	return $data_to_save;
}

function pi_activity_delete(&$node) {

	node_delete($node->referenced_content);
	$content_result = db_query("SELECT nid FROM {pi_activity_node} WHERE activity_id=%d", $node->nid);
	while ($content_row = db_fetch_array($content_result)) {
		node_delete($content_row['nid']);
	}

	db_query("DELETE FROM {pi_activity} WHERE nid = %d AND vid = %d", $node->nid, $node->vid);
	db_query("DELETE FROM {pi_activity_node} WHERE activity_id = %d", $node->nid);
	db_query("DELETE FROM {pi_activity_share} WHERE activity_id = %d", $node->nid);

	$children_result = db_query("SELECT {node}.nid FROM {node} LEFT JOIN {pi_activity} ON node.vid=pi_activity.vid WHERE pi_activity.parent_activity=%d", $node->nid);
	while ($child_row = db_fetch_array($children_result)) {
		node_delete($child_row['nid']);
	}

	$custom_delete_function = "{$node->activity_type}_delete_activity";
	if (function_exists($custom_delete_function)) {
		$custom_delete_function($node);
	}
}

function pi_activity_shared_content_list($activity) {
	include_once 'pi_activity.activity.inc';
	return pi_activity_shared_content_list_view($activity);
}

/**
 * Implementation of hook_nodeapi to add specific nQuire data when nodes are changed
 *  This function sets/updates activity data when activity content nodes are created, updated or deleted
 *  though the activity system
 * @param $node
 * @param $op
 */
function pi_activity_nodeapi(&$node, $op) {
	if ($node->type != 'image' && $node->type != 'pi_activity') {
		if (in_array($op, array('insert', 'update', 'delete'))) {
// If this is a node, check whether it's part of an activity
// first check the database, then look at the URL
			$activity_nid = pi_activity_get_activity_nid_for_content_nid($node->nid);
			if ($activity_nid == NULL) {
//Node not associated to an activity in the database yet, so check url also
// Split the string into parts to get the inquiry id if it exists...
				$path_parts = pi_util_get_drupal_path_parts();
				if (strcasecmp($path_parts[0], 'activity') === 0) {
					if (is_numeric($path_parts[1]))
						$activity_nid = $path_parts[1];
				}
			}
// Presuming the referred activity id checks out then update it as needed
			$activity = node_load($activity_nid);
			if ($activity->type === 'pi_activity') {
// Set PI activity node
				$node_types_to_create_activity_for = array(
//'pi_available_measures', // depends on whether the measure is part of the script
						'pi_key_questions',
						'pi_key_answers',
						'pi_result_presentations',
						'pi_data',
				);


				switch ($op) {
					case 'insert':
//new content saved
						switch ($node->type) {
							case 'pi_available_measures':
								break;
							case 'pi_key_questions':
								$node->title = pi_util_trim_text($node->key_question);
								break;
							case 'pi_key_answers':
								$node->title = pi_util_trim_text($node->key_answer);
								break;
							default:
								break;
						}

						global $user;
						$content_manager = pi_info()->getContentManager();

						if (in_array($node->type, $node_types_to_create_activity_for) ||
										($node->type === 'pi_available_measures' && !$node->script_measure)) {
							$content_manager->createNewActivityForContent($node, $activity, $user->uid);
						} else {
							$content_manager->linkContentWithActivity($node, $activity->nid, $user->uid);
						}
						break;
					case 'update':
						$save = FALSE;
						switch ($node->type) {
							case 'pi_available_measures':
								$activity->title = pi_util_trim_text($node->title);
								$save = TRUE;
								break;
							case 'pi_key_answers':
								$activity->title = pi_util_trim_text($node->key_answer);
								$save = TRUE;
								break;
							case 'pi_key_questions':
								$activity->title = pi_util_trim_text($node->key_question);
								$save = TRUE;
								break;
							case 'pi_result_presentations':
								$activity->title = pi_util_trim_text($node->title);
								$save = TRUE;
								break;
							case 'pi_data':
								$activity->title = pi_util_trim_text($node->title);
								$save = TRUE;
								break;
						}

						if ($save) {
							node_save($activity);
						}

						break;
					case 'delete':
//delete existing activity if it's got a parent activity
						if (!$activity->script_activity) {
							node_delete($activity_nid);
						}

						db_query('DELETE FROM pi_activity_node WHERE nid=%d', $node->nid);
						break;
				}
			}
		}
	}
}

// ---------------------------------------------------------------------------

/**
 * Return the activity_id of an "Add $whatever"n activity for a given "Sort $whatever" function, if not return NULL
 * @param unknown_type $inquiry_nid The inquiry id that the activity belongs to
 * @param unknown_type $activity_ind The "Sort $whatever" activity id for the add activity.
 * @param unknown_type $uid The user id to find the add activity id for.
 */
function pi_activity_get_add_activity_for_sort_activity($activity_id) {
	$sort_activity = node_load($activity_id);

	if ($sort_activity != FALSE) {
		$type = node_get_types('type', $sort_activity->activity_type);

		$query = "SELECT {pi_activity}.`nid` FROM {pi_activity} WHERE parent_activity=%d AND activity_type='%s' AND referenced_node IS NULL AND script_activity=1";
		$result = db_query($query, $activity_id, $type->add_node_type);
		$row = db_fetch_array($result);
		if ($row) {
			return $row['nid'];
		}
	}

	return NULL;
}

function pi_activity_shared_content_view_access($activity_node, $actor) {
	$access_value = FALSE;

	$inquiry_info = pi_info()->getInquiryInfoForActivity($activity_node->nid);
	if ($inquiry_info) {
		$query = "SELECT share FROM pi_activity_share WHERE activity_id=%d AND actor=%d";
		$row = db_fetch_array(db_query($query, $activity_node->nid, $actor));

		if ($row) {
			$access_value = $row['share'];
		} else if ($inquiry_info->getActivityCollaboration($activity_node->nid) === 'individual') {
			$access_value = 'individual_group';
		}
	}

	switch ($access_value) {
		case 'group_all':
		case 'individual_all':
			return TRUE;
		case 'individual_group':
			global $user;
			return in_array($actor, nquire_group_get_member_uids($inquiry_info->getSubgroup($user->uid)));
		default:
			return FALSE;
	}
}

function pi_activity_access_get_explanation_text($access, $reason, $inquiry_nid) {
	switch ($reason) {
		case 'no_inquiry_access':
			$text = $reason;
			break;
		case 'inquiry_roles':
			switch ($access) {
				case 'edit':
					$text = t('Given your roles in this inquiry, you can edit this activity.');
					break;
				case 'view':
					$text = t('Given your roles in this inquiry, you can view this activity, but not edit it.');
					break;
				default:
					$text = t('Given your roles in this inquiry, you cannot access this activity.');
					break;
			}
			break;
		case 'group_roles':
			switch ($access) {
				case 'edit':
					$text = t('Given your roles in your group, you can edit this activity.');
					break;
				case 'view':
					$text = t('Given your roles in your group, you can view this activity, but not edit it.');
					break;
				default:
					$text = t('Given your roles in your group, you cannot access this activity.');
					break;
			}
			break;
		case 'no_group':
			$url = url('inquiry/' . $inquiry_nid . '/participants');
			$text = t('This is a group activity, but you do not belong to any group. Click <a href="!url">here</a> to create or join a group.', array('!url' => $url));
			break;
		case 'stage':
			switch ($access) {
				case 'edit':
					$text = t('At this stage, you can edit this activity.');
					break;
				case 'view':
					$text = t('At this stage, you can view this activity, but not edit it.');
					break;
				default:
					$text = t('At this stage, you cannot access this activity.');
					break;
			}
			break;
		case 'none':
			switch ($access) {
				case 'edit':
					$text = t('You can edit this activity.');
					break;
				case 'view':
					$text = t('You can view this activity.');
					break;
				default:
					$text = t('You cannot access this activity.');
					break;
			}
			break;
	}
	return $text;
}

function pi_activity_display_data($activity_node, $phase_key, $inquiry_info, $inquiry_access, $user, $mode) {
	$access = $inquiry_access->getAccessToItem($activity_node);
	$reason = $inquiry_access->getAccessReason($activity_node);
	$inquiry_nid = $inquiry_info->getInquiryNid();
	$exaplanation = pi_activity_access_get_explanation_text($access, $reason, $inquiry_nid);

	$data = array(
			'node' => $activity_node,
			'title' => check_plain($activity_node->title),
			'description' => nl2br(check_plain($activity_node->body)),
			'links' => pi_activity_create_edit_links($activity_node, $mode),
			'access' => $access,
			'reason' => $reason,
			'access_explanation' => $exaplanation,
			'can_view' => $mode === 'edit' ? pi_activity_tab_edit_access_callback($activity_node) : pi_activity_tab_view_access_callback($activity_node),
	);

	if ($data['can_view']) {
		$content_manager = pi_info()->getContentManager();
		$content_nid = $content_manager->getContent($activity_node->nid, $user->uid, TRUE);
		$content_node = node_load($content_nid);


		if ($mode === 'view') {
			$data['content'] = $content_node ? node_view($content_node, FALSE, TRUE, TRUE) : FALSE;
		} else if ($mode === 'edit') {
			$alternative_edit_page_function = "{$activity_node->activity_type}_custom_edit_page";
			if (function_exists($alternative_edit_page_function)) {
				$data['content'] = $alternative_edit_page_function($content_node);
			} else {
				if (!$content_node) {
					$content_node = new stdClass;
					$content_node->uid = $user->uid;
					$content_node->type = $activity_node->activity_type;
				}
				$data['content'] = node_page_edit($content_node);
			}
		}

		$content_wrapper_function = "{$activity_node->activity_type}_wrap_content_node_view";
		if (!function_exists($content_wrapper_function) || $content_wrapper_function($activity_node)) {
			$data['output'] = theme('pi_inquiry_phase_activity_view', $data, $phase_key);
		} else {
			$data['output'] = $data['content'];
		}
	}
	
	return $data;
}

