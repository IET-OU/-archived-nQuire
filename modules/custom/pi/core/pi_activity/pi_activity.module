<?php

// $Id: pi_activity.info,  2010/05/21  MCP $


module_load_include('inc', 'pi_activity', 'pi_activity.workflow');
module_load_include('inc', 'pi_activity', 'pi_activity.extra');
//module_load_include('inc', 'pi_activity', 'pi_activity.status');
module_load_include('inc', 'pi_activity', 'pi_activity.content');

/**
 *
 * This functions returns the information for the activity node
 * Function used by the drupal system
 */
function pi_activity_node_info() {
	return array(
			'pi_activity' => array(
					'name' => t('Inquiry Activity'), // Required.
					'module' => 'pi_activity', // Required.
					'description' => t('Activities are plans for work that students do within nQuire'), // Required.
					'has_title' => TRUE,
					'title_label' => t('Activity name'),
					'has_body' => TRUE,
					'body_label' => t('Description of the activity'),
					'locked' => TRUE
			)
	);
}

/**
 *
 * Drupal API hook_perm() implemetaiton to define available permissions for activity node type
 */
function pi_activity_perm() {
	return array('create activity', 'edit own activity', 'edit any activity', 'delete own activity', 'delete any activity');
}

/**
 * Access callback for pi_activities under the url activity/%
 * @param uint $activity node of the activity being accessed
 * @param uint $op the function to perform on the activity (view/add/edit)
 * @return TRUE or FALSE to indicate whether access is allowed for that function
 */
function pi_activity_access($activity, $op) {
	return TRUE;
	//pi_debug_message('pi_activity_item_access:' . $op);
	// pi_debug_message($activity);
	// exit;
	$return_value = false;
	global $user;
	if (isset($activity->nid)) {
		$node_function_allowed = pi_activity_check_node_function($activity->nid, $user->uid, $op);
		if (($node_function_allowed === false) && ($op == 'view')) {
			$return_value = pi_activity_check_node_function($activity->nid, $user->uid, 'edit');
		}
		if (($node_function_allowed === false) && ($op == 'add')) {
			$possible_add_nid = pi_activity_get_add_activity_for_sort_activity($activity->nid);
			if ($possible_add_nid !== NULL) {
				$return_value = true;
			}
		}
	}

	return $return_value;
}

/**
 * hook_menu() for pi_activity defining all the activity/% menu callbacks, etc
 * @return array of menu items as per drupal 6 api
 */
function pi_activity_menu() {
	$items = array();
	$items['activity/%node'] = array(
			'title' => 'View',
			'file' => 'pi_activity.activity.inc',
			'page callback' => 'pi_activity_content_view',
			'page arguments' => array(1, 'view'),
			'access callback' => 'pi_activity_tab_view_access_callback',
			'access arguments' => array(1),
			'type' => MENU_CALLBACK
	);

	$items['activity/%node/view'] = array(
			'title' => 'View',
			'type' => MENU_DEFAULT_LOCAL_TASK,
			'weight' => 0,
			'access callback' => 'pi_activity_tab_view_access_callback',
			'access arguments' => array(1),
	);

	$items['activity/%node/edit'] = array(
			'title' => 'Edit',
			'file' => 'pi_activity.activity.inc',
			'page callback' => 'pi_activity_content_view',
			'page arguments' => array(1, 2),
			'access arguments' => array(1),
			'access callback' => 'pi_activity_tab_edit_access_callback',
			'type' => MENU_LOCAL_TASK,
			'weight' => 1
	);
	/*
	  $items['activity/%node/admin'] = array(
	  'title' => 'Admin',
	  'file' => 'pi_activity.admin.inc',
	  'page callback' => 'pi_activity_content',
	  'page arguments' => array(1),
	  'access arguments' => array('access pi_authoring content'),
	  'type' => MENU_LOCAL_TASK,
	  'weight' => 3
	  );

	  $items['activity/%node/admin/content'] = array(
	  'title' => 'View Activity Content',
	  'type' => MENU_DEFAULT_LOCAL_TASK,
	  'weight' => 0
	  );

	  $items['activity/%node/admin/edit'] = array(
	  'title' => 'Edit Activity',
	  'file' => 'pi_activity.admin.inc',
	  'page callback' => 'pi_activity_edit',
	  'page arguments' => array(1),
	  'access_callback' => TRUE,
	  'access arguments' => array('access pi_authoring content'),
	  'type' => MENU_LOCAL_TASK,
	  'weight' => 1
	  );

	  $items['activity/%node/admin/view/%node'] = array(
	  'title' => 'Edit Activity',
	  'file' => 'pi_activity.admin.inc',
	  'page callback' => 'pi_activity_admin_view_node',
	  'page arguments' => array(1, 4),
	  'access_callback' => TRUE,
	  'access arguments' => array('access pi_authoring content'),
	  'type' => MENU_CALLBACK,
	  'weight' => 1
	  ); */

	// NOTE: If you change the url below also change pi_activity_form_pi_activity_form_alter()
	$items['admin/nquire/activity'] = array(
			'title' => 'Add an Activity to an Inquiry',
			'description' => 'This allows you to directly add an activity to an inquiry, selecting the phase and stages it belongs to.',
			'page callback' => 'pi_activity_add',
			'type' => MENU_NORMAL_ITEM,
			'access arguments' => array('administer site configuration'),
			'weight' => 4,
	);

	return $items;
}

function pi_activity_tab_view_access_callback($node) {
	switch ($node->activity_type) {
		case 'pi_data':
			//case 'pi_key_questions':
			//case 'pi_key_answers':
			return FALSE;
		default:
			return pi_activity_tabs_access_to_content($node, 'view');
	}
}

function pi_activity_tab_edit_access_callback($node) {
	switch ($node->activity_type) {
		case 'pi_read_information':
		case 'pi_sort_data':
		case 'pi_sort_key_questions':
		case 'pi_sort_key_answers':
		case 'pi_data_spreadsheet':
		case 'pi_explore_tool':
			return FALSE;
		default:
			return pi_activity_tabs_access_to_content($node, 'edit');
	}
}

function pi_activity_tabs_access_to_content($node, $function) {
	if ($node->type === 'pi_activity') {
		$access_data = pi_inquiry_groupings_get_access_data();
		$activity_data = $access_data->get_activity($node->nid);
		if ($activity_data) {
			if ($activity_data['script_activity'] || pi_activity_get_content_nid_for_activity($node->nid, FALSE)) {
				return $activity_data['access'] === 'edit' ||
								($activity_data['access'] === 'view' && $function === 'view');
				return TRUE;
			}
		}
	}

	return FALSE;
}

/**
 * This page is the standard activity authoring page that is currently linked to from admin/nquire
 * It calls pi_activity_form which will be rewritten in pi_activity_pi_activity_form_alter where it will
 * be redirected to it's calling location where necessary
 */
function pi_activity_add() {
	$output = '';

	$output = t("<p>Use this page to add an activity to an inquiry - select the activity, then the phase and then the phases that it will be incuded in." .
					" For each stage you wil have to choose how it will be made available: as either <i>unavailable</i>, " .
					"<i>startable</i>, <i>editable</i> or <i>viewable</i>.");
	$new_activity = new stdClass();
	$new_activity->type = 'pi_activity';
	$output .= drupal_get_form('pi_activity_form', $new_activity);

	return $output;
}

/**
 * General form form for activity editing using drupal forms API.
 * @param $form_state
 */
function pi_activity_form(&$node, $form_state) {
	/* construct form to edit the details of an activity
	 * inc. pi_activity, pi_activity_status, pi_activity_actor & pi_stage_phase_activity tables
	 */

	$form = array();
	$type = node_get_types('type', $node);

	/* First get inquiry, phase and stage locations */
	$inquiry_data = array();
	$inquiry_nids = pi_inquiry_load_nids();
	$inquiry_data = pi_util_get_names_from_nids($inquiry_nids);

	$inquiry_options = array('none' => t('Select an inquiry for this activity'));
	foreach ($inquiry_data as $inquiry_nid => $inquiry_name) {
		$inquiry_options[$inquiry_nid] = $inquiry_name;
	}

	pi_util_get_names_from_nids($inquiry_nids);
	if (count($inquiry_data) == 0) {
		drupal_set_message('There are no inquiries defined, please create an inquiry before defining phases.', 'error');
	}

	//$form['#submit'][] = 'pi_activity_form_submit';
	//This section allows a dynamic list of stages to appear on the form to allow
	// pi_stage_phase links to be created at the same time as a stage.
	// This uses the ahah_helper module
	ahah_helper_register($form, $form_state);

	if (isset($node->phase_nid) && !isset($form_state['storage']['activity_phases_stages']['phase_nid'])) {
		$phase_nid = $node->phase_nid;
	} else {
		//If there's a value in storage use that
		if (isset($form_state['storage']['activity_phases_stages']['phase_nid'])) {
			$phase_nid = $form_state['storage']['activity_phases_stages']['phase_nid'];
		} else {
			//Otherwise, use 'none'
			$phase_nid = 'none';
		}
	}

	if ($phase_nid != 'none')
		$phase = node_load($phase_nid);
	else
		$phase = false;

	if ($phase != FALSE) {
		if ($phase->inquiry_nid != NULL) {
			if (array_key_exists($phase->inquiry_nid, $inquiry_options)) {
				$node->inquiry_nid = $phase->inquiry_nid;
			}
		}
	}




	// If there's no value in storage and the node has one set, then use that
	if (isset($node->inquiry_nid) && !isset($form_state['storage']['inquiry_nid'])) {
		$inquiry_nid_default_value = $node->inquiry_nid;
	} else {
		//If there's a value in storage use that
		if (isset($form_state['storage']['inquiry_nid'])) {
			$inquiry_nid_default_value = $form_state['storage']['inquiry_nid'];
		} else {
			//Otherwise, use 'none'
			$inquiry_nid_default_value = 'none';
		}
	}

	$form['inquiry_nid'] = array(
			'#type' => 'select',
			'#title' => t('Inquiry for stage'),
			'#required' => TRUE,
			'#weight' => -20,
			'#options' => $inquiry_options,
			'#allowed_inquiry_nids' => $inquiry_nids,
			'#default_value' => $inquiry_nid_default_value,
			'#element_validate' => array('pi_util_inquiry_nid_validate'),
			'#ahah' => array(
					'path' => ahah_helper_path(array('activity_phases_stages')),
					'wrapper' => 'activity-phases-stages-wrapper',
			),
			//this fixes some layout issues with the ahah throbber
			//'#attributes' => array('style'=>'overflow:auto;border: thin solid black;'),
			'#prefix' => "<div style='min-height:40px;'>",
			'#suffix' => '</div>'
	);

	//This uses the generic submit callback provided by the ahah_helper module here
	// Is sets $form_state['rebuild'] = TRUE.
	// 'no-js' class is set so that the submit button will be shown if JS is disabled.
	$form['inquiry_nid']['update_usage'] = array(
			'#type' => 'submit',
			'#value' => t('Update phase list'),
			'#weight' => -2,
			'#submit' => array('ahah_helper_generic_submit'),
			'#attributes' => array('class' => 'no-js'),
	);

	$form['activity_phases_stages'] = array(
			'#tree' => true,
			'#weight' => -9,
			'#prefix' => "<div id='activity-phases-stages-wrapper'>",
			'#suffix' => '</div>'
	);

	$form['activity_phases_stages']['phase_nid'] = _pi_activity_form_generate_phase_select($inquiry_nid_default_value, $phase_nid);


	$stages_default_value = array();
	if (is_array($form_state['storage']['activity_phases_stages']['stages'])) {
		$stages_default_value = $form['storage']['activity_phases_stages']['stages'];
	} else {
		$stages_default_value = $node->activity_phases_stages['stages'];
	}
	if ($inquiry_nid_default_value == 'none') {
		$phase_nid_to_use = 'none';
	} else {
		$phase_nid_to_use = $phase_nid;
	}
	$form['activity_phases_stages']['stages'] = _pi_activity_form_generate_stage_select($phase_nid_to_use, $stages_default_value);


	/* Now the activity inquiry/phase/stages are decided get the rest of the details, title, type, description, etc */
	$form['title'] = array(
			'#type' => 'textfield',
			'#title' => check_plain($type->title_label),
			'#weight' => -8,
			'#description' => t('This is the title of the activity that will appear as the activity link in the phase view.'),
			'#required' => TRUE,
			'#default_value' => $node->title,
	);

	//activity and node type query
	$node_types = node_get_types('names');
	if (is_array($node_types)) {
		$node_type_options = array('none' => t('Select activity type...'));


		$content_types = pi_available_content_types_array();
		foreach ($node_types as $node_type => $name) {
			if (in_array($node_type, $content_types)) {
				$node_type_options[$node_type] = $name;
				$allowed_activity_types = array_keys($node_types);
			}
		}
	} else {
		$node_type_options = array('none' => t('No activity types available, please check nQuire is correctly installed'));
		$allowed_activity_types = array();
	}

	$form['activity_type'] = array(
			'#type' => 'select',
			'#title' => t('Activity Type'),
			'#required' => true,
			'#description' => t('Choose the type of activity you want to place into the inquiry from this list.'),
			'#weight' => -7,
			'#options' => $node_type_options,
			'#default_value' => $node->activity_type,
			'#allowed_activity_types' => $allowed_activity_types,
	);

	$form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
	$form['body_field']['#weight'] = -6;
	$form['body_field']['#description'] = t('For some activity types the description will be shown at the top of the page (for example in the Hypothesis activity). Enter it here.');
	$form['body_field']['body']['#rows'] = 6;
	$form['body_field']['teaser_include']['#access'] = FALSE;


	$form['parameters'] = array(
			'#type' => 'textfield',
			'#title' => t('Parameters'),
			'#weight' => 7,
			'#default_value' => $node->parameters,
			'#description' => t('Some activities need special parameters, but unless you know otherwise leave this blank.')
	);

	$destination_option = array('phase' => 'phase', 'self' => 'self',);

	$form['destination_after'] = array(
			'#type' => 'select',
			'#title' => t('Destination After Completing the Activity (self or phase)'),
			'#required' => true,
			'#weight' => 8,
			'#options' => $destination_option,
			'#default_value' => 'phase',
			'#description' => t('When someone completes an activity and saves it, they can go back to the phase view, or stay on the activity page (self), so choose which one here.')
	);

	$form['groups'] = array(
			'#type' => 'fieldset',
			'#title' => t('Set up who works on and who can see the results of this activity'),
			'#weight' => 9,
			'#description' => t('First choose the audience: this determines how widely the results are shared.  Then select the group containing who you want to do the activity.')
	);

	//pi_activity_status table
	$query2 = "SELECT * FROM {pi_activity_status} WHERE activity_id = %d";
	$result2 = db_fetch_object(db_query($query2, $node->nid));

	$defined_groups = pi_flatten_grouped_item_list(pi_get_defined_group_nids());
	$group_options = array('none' => 'Select actor group...') + pi_util_get_names_from_nids(array_keys($defined_groups));
	$form['groups']['selects'] = array(
			'#tree' => true,
			'#theme' => 'pi_util_form_elements_float',
	);

	$activity_audience_types = array(
			'none' => t('Select audience setting...'),
			'individual' => t("Don't share (Individual activity)"),
			'group' => t('Share with group'),
			'class' => t('Share with class'),
			'multiclass' => t('Share with multiclass')
	);


	if (isset($form_state['storage']['selects']['audience'])) {
		$default_audience = $form_state['storage']['selects']['audience'];
	} else {
		$default_audience = $node->audience;
	}
	$form['groups']['selects']['audience'] = array(
			'#type' => 'select',
			'#title' => t('Activity Audience'),
			'#weight' => 1,
			'#options' => $activity_audience_types,
			'#default_value' => $default_audience,
			'#prefix' => "<div style='min-height:40px;'>",
			'#suffix' => '</div>',
			'#ahah' => array(
					'path' => ahah_helper_path(array('groups', 'info')),
					'wrapper' => 'groups-info-wrapper',
			),
			'#prefix' => "<div style='min-height:40px;'>",
			'#suffix' => '</div>'
	);

	if (isset($form_state['storage']['selects']['gid'])) {
		$default_actor = $form_state['storage']['selects']['gid'];
	} else {
		$default_actor = $node->actor;
	}

	$form['groups']['selects']['gid'] = array(
			'#type' => 'select',
			'#title' => t('Activity Group'),
			'#weight' => 2,
			'#options' => $group_options,
			'#default_value' => $default_actor,
			'#ahah' => array(
					'path' => ahah_helper_path(array('groups', 'info')),
					'wrapper' => 'groups-info-wrapper',
			),
			'#prefix' => "<div style='min-height:40px;'>",
			'#suffix' => '</div>'
	);

	$explanation_value = _pi_activity_explain_actor_and_audience($default_actor, $default_audience);
	$form['groups']['info'] = array(
			'#type' => 'item',
			'#weight' => 3,
			'#value' => $explanation_value,
			'#prefix' => "<div id='groups-info-wrapper' style='clear:left;'>",
			'#suffix' => '</div>'
	);


	$node_function_options = array('add' => 'add', 'edit' => 'edit', 'view' => 'view',);
	$form['node_function'] = array(
			'#type' => 'select',
			'#title' => t('Node Function'),
			'#weight' => 11,
			'#options' => $node_function_options,
			'#default_value' => $node->node_function,
	);

	$visible_status_options = array(
			'start' => 'start',
			'in_progress' => 'in_progress',
			'view' => 'view',
			'unavailable' => 'unavailable'
	);

	$form['visible_status'] = array(
			'#type' => 'select',
			'#title' => t('Visible Status'),
			'#options' => $visible_status_options,
			'#weight' => 12,
			'#default_value' => $result2->visible_status,
	);

	//nid options
	$query = "SELECT nid, title, type FROM {node}";
	$result = db_query($query);
	$referenced_node_options = array();
	//first is none -> is 0 as no nid is 0 they always start at 1
	$referenced_node_options['none'] = 'none';
	$max_string_length = 40;
	while ($referenced_node_option = db_fetch_object($result)) {
		if (strlen($referenced_node_option->title) > $max_string_length) {
			$referenced_node_name = substr($referenced_node_option->title, 0, $max_string_length) . '...';
		} else {
			$referenced_node_name = $referenced_node_option->title;
		}
		$referenced_node_options[$referenced_node_option->nid] = $referenced_node_name . ": " . $referenced_node_option->nid . " (" . $referenced_node_option->type . ")";
	}

	$query = "SELECT nid FROM {pi_activity_node} WHERE activity_id = %d";
	$referenced_node = db_fetch_object(db_query($query, $node->nid));
	if ($referenced_node == NULL) {
		$referenced_node_id = 'none';
	} else {
		$referenced_node_id = $referenced_node->nid;
	}

	$form['existing_nid'] = array(
			'#type' => 'select',
			'#title' => t('Does The Activity Refer To An Existing Node? I.e. if you have selected view in view_type then to which node do you want to view?'),
			'#weight' => 13,
			'#options' => $referenced_node_options,
			'#default_value' => $referenced_node_id
	);

	return $form;
}

function pi_activity_form_validate($form, &$form_state) {
	
}

/**
 *
 * Drupal API hook_form_alter(), to take away group membership if form is in an activity and
 * move menu options
 * @param &$form
 * @param &$form_state
 */
function pi_activity_form_alter(&$form, &$form_state, $form_id) {
	// This is for altering the actual activity form
	if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id)
		pi_activity_form_node_form_alter($form, $form_state);

	// This is for altering the activity CONTENT forms...
	// Split the string into parts to get the inquiry id if it exists...

	$path_part1 = pi_util_get_path_element(0);
	if (strcasecmp($path_part1, 'activity') === 0) {
		if ($form_id != 'pi_activity_node_from') {
			// Move the menu to the bottom of activity content forms
			$form['menu']['#weight'] = 20;
			// Hide the Group options from activity content forms
			$form['og_nodeapi']['#access'] = FALSE;

			$activity_id = pi_util_get_path_element(1);
			$target_activity = node_load($activity_id);
			if (pi_check_is_node_of_type($target_activity, 'pi_activity')) {
				$redirect_destination = 'phase';//$target_activity->destination_after;
				if ($redirect_destination == 'phase')
					$form['#redirect'] = 'phase/' . $target_activity->phase_nid;
				elseif ($redirect_destination == 'self')
					$form['#redirect'] = "activity/$activity_id";
				$form['redirect-activity-submit'] = array('#type' => 'hidden', '#value' => $form['#redirect']);
			}
		}
	}
}

/**
 *
 * Drupal API hook_form_FORM-ID_alter() changes the pi_activity editing form layout
 * @param &$form
 * @param &$form_state
 */
function pi_activity_form_pi_activity_node_form_alter(&$form, &$form_state) {
	if (isset($form_state['post'])) {
		// This fixes a bug in ahah helper where the wrapper for a form element to be updated is also
		//  inserted causing a duplicate  wrapper to be inserted inside the original
		ahah_helper_register($form, $form_state);
		if ($form_state['submitted']) {
			$form['groups']['info']['#prefix'] = '';
			$form['groups']['info']['#suffix'] = '';
			$form['activity_phases_stages']['#prefix'] = '';
			$form['activity_phases_stages']['#suffix'] = '';
		}
	}
	// Hide group audience settings
	$form['og_nodeapi']['#access'] = FALSE;

	$form['changed']['#default_value'] = $_SERVER['REQUEST_TIME'];
}

/**
 * Generate the ['activity_phases']['stages'] checkbox list for a given inquiry nid.
 * this is used in this module and also called by pi_authoring using hook_form_FORM-ID_alter()
 * as it can't run the ahah call do do this
 * @param uint $inquiry_nid nid of the inquiry to show generate boxes for or 'none' for blank
 * @return array describing the checkboxes form element
 */
function _pi_activity_form_generate_phase_select($inquiry_nid, $default_value = 'none') {
	// Based on the selection above generate the select boxes for phases
	$phase_select_options = array('none' => t('Select the phase for this activity...'));
	if ($inquiry_nid != 'none') {
		$inquiry_phase_nids = pi_phase_load_nids_for_inquiry($inquiry_nid);
		$phase_names = pi_util_get_names_from_nids($inquiry_phase_nids);
		foreach ($phase_names as $phase_nid => $name) {
			$phase_select_options[$phase_nid] = $name;
		}
	} else {
		//if there is no inquiry selected then there are no phases to select
		$inquiry_phase_nids = array();
	}

	$form_element = array(
			'#type' => 'select',
			'#title' => t('Select phase for activity'),
			'#weight' => 2,
			'#required' => true,
			'#options' => $phase_select_options,
			'#allowed_phase_nids' => $inquiry_phase_nids,
			'#default_value' => $default_value,
			'#element_validate' => array('pi_util_phase_nid_validate'),
			'#ahah' => array(
					'path' => ahah_helper_path(array('activity_phases_stages')),
					'wrapper' => 'activity-phases-stages-wrapper',
			),
			//this fixes some layout issues with the ahah throbber
			//'#attributes' => array('style'=>'overflow:auto;border: thin solid black;'),
			'#prefix' => "<div style='min-height:40px;'>",
			'#suffix' => '</div>'
	);
	return $form_element;
}

/**
 * Generate the ['activity_phases']['stages'] checkboxes list for a given phase nid.
 * this is used in this module and also called by pi_authoring using hook_form_FORM-ID_alter()
 * as it can't run the ahah call do do this
 * @param uint $phase_nid nid of the phase to show boxes for or 'none' for blank
 * @return array describing the checkboxes form element
 */
function _pi_activity_form_generate_stage_select($phase_nid = 'none', $default_values = array()) {
	$elements_to_return = array(
			'#type' => 'fieldset',
			'#title' => t('Select the stages this activity appears in'),
			'#required' => true,
			'#weight' => 3,
	);

	$stage_boxes = array();
	$stage_options = array();
	$default_stage_options = array();

	if (($phase_nid != 'none') && ( $phase_nid != NULL )) {
		$phase_stage_nids = pi_stage_load_nids_for_phase($phase_nid);
		$stage_names = pi_util_get_names_from_nids($phase_stage_nids);
		if (count($stage_names) == 0) {
			$description = t('There are no stages defined for this phase yet.');
		} else {
			//pi_debug_message($default_values);
			foreach ($stage_names as $stage_nid => $name) {
				$stage_options[$stage_nid] = $name;
				if ($default_values[$stage_nid] == 'visible') {
					$default_stage_options[$stage_nid] = $stage_nid;
				}
			}
			$description = t('The activity will only be visible to people in the selected stages.');
		}
	} else {
		$description = t("Select an inquiry to see it's stages.");
	}


	// Based on the selection above generate the select boxes for phases
	$elements_to_return['stage_select'] = array(
			'#type' => 'checkboxes',
			'#required' => true,
			'#options' => $stage_options,
			'#default_value' => $default_stage_options,
			'#theme' => 'pi_util_form_elements_float'
	);

	$elements_to_return['info'] = array(
			'#type' => 'item',
			'#value' => $description,
			'#prefix' => "<div style='clear:left;'>",
			'#suffix' => "</div>"
	);

	return $elements_to_return;
}

/**
 *
 * Generate an explanation of exactly who works on and who will see the result of an activity
 * given the actor group id and the audiance group type
 * @param uint $actor_gid gid of a valid group within nQuire (an og_group with class/group/multiclass definition)
 * @param string $audience_group_type one of individual, group, class, or multiclass
 */
function _pi_activity_explain_actor_and_audience($actor_gid, $audience_group_type) {
	$group_values = array(
			'individual' => 0,
			'group' => 1,
			'class' => 2,
			'multiclass' => 3
	);
	$group = node_load($actor_gid);

	if (($group != FALSE) && array_key_exists($audience_group_type, $group_values)) {
		$activity_setting = _pi_activity_get_activity_actor_audience_result_type($actor_gid, $audience_group_type);

		$actor_group_type = pi_get_type_of_group($actor_gid);
		$group_members = pi_get_members_of_group($actor_gid);
		$group_members_list = pi_group_get_name_list($actor_gid);

		$setting_preview = array();
		// Now the type of activity actor/audience has been established, print the appropriate
		// explanation messages.
		switch ($activity_setting) {
			case 'done_as_individuals_in_group_not_shared':
				//If audience is individual then everyone in the target group will create
				// their own activity content and it wont be shared.
				$setting_explanation = t("The members of the selected @group_type '%group_name' will do this activity individually and the results will not be shared.", array(
						'@group_type' => $actor_group_type,
						'%group_name' => $group->title
								)
				);
				$setting_preview[] = t("Members of the @group_type are: %names", array(
						'@group_type' => $actor_group_type,
						'%names' => $group_members_list
								)
				);
				break;

			case 'done_as_single_group_not_shared':
				$setting_explanation = t("This activity will be done as a %actor_group_type by %actor_group_type '%group_name'.", array(
						'%actor_group_type' => $actor_group_type,
						'%group_name' => $group->title
								)
				);
				$setting_preview[] = t("One shared result for %group_name (%names).", array(
						'%group_name' => $group->title,
						'%names' => $group_members_list
								)
				);
				break;
			case 'done_by_all_groups_in_larger_group_not_shared':
				// If audience is group then activity will be done as a group and shared within the specified audience group type
				// All the groups of nquire group type 'group' within the selected group will do one item of content
				$setting_explanation = t("The activity will be done by each @audience_group_type within the @group_type '%group_name'.", array(
						'@audience_group_type' => $audience_group_type,
						'@group_type' => $actor_group_type,
						'%group_name' => $group->title,
								)
				);
				// Need to get all audience group within the hierarchy of the selected actor group.
				$associated_groups = pi_groups_get_associated_groups($actor_gid, $audience_group_type);
				$group_names = pi_util_get_names_from_nids($associated_groups);
				foreach ($group_names as $group_id => $group_name) {
					$setting_preview[] = t("One shared result for @audience_group_type '%group_name' (%names).", array(
							'@audience_group_type' => $audience_group_type,
							'%group_name' => $group_name,
							'%names' => pi_group_get_name_list($group_id)
									)
					);
				}
				break;
			case 'done_by_group_shared_with_larger_group':
				$audience_id = pi_groups_get_associated_groups($actor_gid, $audience_group_type);
				// There should only be one larger group, so if more than one is returned, there's a problem
				// if 0 is returned then there is also a problem, but it's less bad as it means the parent hasn't
				// been assigned, rather than it having 2 parents (that's a DB error!).
				if (count($audience_id) == 1) {
					$audience_group_info = pi_util_get_names_from_nids($audience_id);
					$audience_group_name = $audience_group_info[$audience_id[0]];
					$setting_explanation = t("This activity will done by @actor_group_type '%group_name' and the result will be viewable by the @audience_group_type '%audience_group_name'.", array(
							'@audience_group_type' => $audience_group_type,
							'@actor_group_type' => $actor_group_type,
							'%group_name' => $group->title,
							'%audience_group_name' => $audience_group_name
									)
					);
					$setting_preview[] = t("One shared result for %group_name (%names) viewable by %audience_group_name (%audience_group_names).", array(
							'%group_name' => $group->title,
							'%names' => $group_members_list,
							'%audience_group_name' => $audience_group_name,
							'%audience_group_names' => pi_group_get_name_list($audience_id)
									)
					);
				} elseif (count($audience_id) == 0) {
					$setting_explanation = t("This activity will done by @actor_group_type '%group_name' and the result would be viewable by the associated @audience_group_type but one has not been assigned.", array(
							'@actor_group_type' => $actor_group_type,
							'%group_name' => $group->title,
							'@audience_group_type' => $audience_group_type,
									)
					);
					$setting_preview[] = t("One shared result for %group_name (%names) viewable by the associated @audience_group_type (not yet assigned).", array(
							'%group_name' => $group->title,
							'%names' => $group_members_list,
							'@audience_group_type' => $audience_group_type,
									)
					);
				} else {
					$setting_explanation = t("This activity will done by @actor_group_type '%group_name' and the result would be viewable by the associated @audience_group_type however there's more than one class associated with '%group_name' - please check the group hierarchy is set up correctly.", array(
							'@actor_group_type' => $actor_group_type,
							'%group_name' => $group->title,
							'@audience_group_type' => $audience_group_type,
									)
					);
					$setting_preview[] = t("One shared result for %group_name (%names) viewable by the associated @audience_group_type (not yet assigned).", array(
							'%group_name' => $group->title,
							'%names' => $group_members_list,
							'@audience_group_type' => $audience_group_type,
									)
					);
				}
				break;
			default:
				//This bit should never be reached because the above options cover all eventualities!!
				$setting_explanation = '';
				drupal_set_message('Unexpected error in pi_activity_explain_actor_and_audience!', 'error');
				break;
		}
		$output = theme('pi_activity_form_actor_audience_explanation', $setting_explanation, $setting_preview);
	} else {
		$output = t('Select a group and audience group type to see who does and how sees the activity content.');
	}
	return $output;
}

/**
 * hook_load from Drupal API
 * Returns the activity_object from pi_activity table - used in the activity menu
 * CHANGED FOR ACTIVITY_NODE VERSION
 * @param objecy (node) $node
 * @return object from db_fetch_object() for pi_activity table
 */
function pi_activity_load($node) {
	$query = "SELECT * FROM {pi_activity} WHERE `nid` = %d";
	$result = db_query($query, $node->nid);
	$activity = db_fetch_object($result);

	/*if ($activity != NULL) {
		//map activity_id to nid for backward compatability
		$phase = node_load($activity->phase_nid);
		$activity->inquiry_id = $phase->inquiry_nid;
		$activity->activity_id = &$activity->nid;
	}*/

	return $activity;
}

/**
 *
 * hook_insert() implementation for pi_activity node
 * @param $node
 */
function pi_activity_insert($node) {
	// It is necessary to update the following tables:
	//   * pi_activity
	//   * pi_activity_stage_state
	//   * pi_activity_status
	//   * pi_activity_node
	// First update the pi_activity table
	$pi_activity_row = _pi_activity_form_data_to_pi_activity_row($node);
	$write_result = drupal_write_record('pi_activity', $pi_activity_row);

	if ($write_result == FALSE) {
		drupal_set_message(t('Error saving new pi_activity data'), 'error');
	}
}

/**
 *
 * Drupal API hook_update() function for pi_activity
 * @param $node
 */
function pi_activity_update($node) {
	$activity_row_data = _pi_activity_form_data_to_pi_activity_row($node);
	$update_result = drupal_write_record('pi_activity', $activity_row_data, array('nid'));

	if ($update_result == FALSE)
		drupal_set_message('Error: Activity data not saved due to database problem; try saving again.', 'error');
}

/**
 *
 * Take the data from $node provided by drupal API to and turn it into an object that can be saved using
 * drupal_write_record()
 * @param $node
 */
function _pi_activity_form_data_to_pi_activity_row($node) {
	$data_to_save = new StdClass();

	$property_to_column = array(
			'nid' => 'nid',
			'vid' => 'vid',
			'activity_type' => 'activity_type',
			'node_type' => 'node_type',
			'parameters' => 'parameters',
			'script_activity' => 'script_activity',
			'parent_activity' => 'parent_activity',
			'phase_nid' => 'phase_nid',
			'show_children_in_phase' => 'show_children_in_phase',
	);

	foreach ($property_to_column as $column => $property) {
		$data_to_save->$column = $node->$property;
	}

	return $data_to_save;
}

function pi_activity_delete(&$node) {
	//delete from pi_activity
	db_query("DELETE FROM {pi_activity} WHERE nid = %d AND vid = %d", $node->nid, $node->vid);

	//delete from pi_activity_node
	db_query("DELETE FROM {pi_activity_node} WHERE activity_id = %d", $node->nid);
}




/**
 * hook_theme() for pi_activity content
 */
function pi_activity_theme() {
	return array(
			'pi_activity_admin_view_node' => array(
					'arguments' => array('activity', 'node_view_page'),
					'file' => 'pi_activity.admin.inc'
			),
			'pi_activity_form_actor_audience_explanation' => array(
					'arguments' => array('explanation', 'preview'),
					'file' => 'pi_activity.form.themes.inc'
			)
	);
}

/*
 * activity teaser
 */

function pi_activity_teaser($node, $activity, $link_node_function) {
	/* FIX (eloy) always show activity body */
//  $output = "";
	$output = '<p><b>' . check_plain($activity->body) . '</b></p>';

	if ($link_node_function == 'view') {
		//Add activity ID to node, needed for the PI chart module
		$node->activity_id = $activity->nid;
		$output .= node_view($node, TRUE, TRUE);
	}
	//else
	//$output .= $activity->body;
	return $output;
}

/**
 * Implementation of hook_nodeapi to add specific nQuire data when nodes are changed
 *  This function sets/updates activity data when activity content nodes are created, updated or deleted
 *  though the activity system
 * @param $node
 * @param $op
 */
function pi_activity_nodeapi(&$node, $op) {
	/* FIX (eloy) */
	//if ($node->type != 'image')
	if ($node->type != 'image' && $node->type != 'pi_activity') {
		if (in_array($op, array('insert', 'update', 'delete'))) {
			// If this is a node, check whether it's part of an activity
			// first check the database, then look at the URL
			$activity_nid = pi_activity_get_activity_nid_for_content_nid($node->nid);
			if ($activity_nid == NULL) {
				//Node not associated to an activity in the database yet, so check url also
				// Split the string into parts to get the inquiry id if it exists...
				$path_parts = pi_util_get_drupal_path_parts();
				if (strcasecmp($path_parts[0], 'activity') === 0) {
					if (is_numeric($path_parts[1]))
						$activity_nid = $path_parts[1];
				}
			}
			// Presuming the referred activity id checks out then update it as needed
			$activity = node_load($activity_nid);
			if (pi_check_is_node_of_type($activity, 'pi_activity')) {
				// Set PI activity node
				$node_types_to_create_activity_for = array(
						//'pi_available_measures',
						'pi_key_questions',
						'pi_key_answers',
						'pi_result_presentations',
						'pi_data',
				);


				switch ($op) {
					case 'insert':
						//new content saved
						switch ($node->type) {
							case 'pi_available_measures':
								break;
							case 'pi_key_questions':
								$node->title = pi_util_trim_text($node->key_question);
								break;
							case 'pi_key_answers':
								$node->title = pi_util_trim_text($node->key_answer);
								break;
							default:
								break;
						}

						if (in_array($node->type, $node_types_to_create_activity_for)) {
							pi_activity_add_new_activity_for_activity_content_node($node, 'edit', 'edit', $node->title, $activity);
						} else {
							pi_activity_link_content_with_activity($node, $activity->nid);
						}
						_pi_activity_set_activity_content_audience($node, $activity_nid);
						_pi_activity_set_activity_content_actor($node, $activity_nid);
						break;
					case 'update':
						switch ($node->type) {
							case 'pi_available_measures':
								pi_util_set_node_title($activity, $node->title);
								break;
							case 'pi_key_answers':
								$node->title = pi_util_trim_text($node->key_answer);
								$activity->title = pi_util_trim_text($node->key_answer);
								break;
							case 'pi_key_questions':

								/* FIX (eloy) */
								//$node->title = pi_util_trim_text($node->key_question);
								//$activity->title = pi_util_trim_text($node->key_question);
								pi_util_set_node_title($activity, $node->key_question);

								break;
							case 'pi_result_presentations':
								$activity->title = pi_util_trim_text($node->title);
								break;
							case 'pi_data':
								$activity->title = pi_util_trim_text($node->title);
								break;
						}
						// Add group audience data for the activity content by getting the user's associated group
						// of the given audience type
						_pi_activity_set_activity_content_audience($node, $activity_nid);
						_pi_activity_set_activity_content_actor($node, $activity_nid);
						break;
					case 'delete':
						//delete existing activity if it's got a parent activity
						if (pi_check_node_exists_and_is_of_type($activity->parent_activity, 'pi_activity')) {
							node_delete($activity_nid);
						}
						break;
				}
			}
		}
	}
}

// ---------------------------------------------------------------------------

/**
 * Returns an array of activities in order based on a sort of the posistion column
 * @param uint $inquiry_nid
 * @param uint $stage_nid
 * @param uint $phase_nid
 * @param uint $uid
 */
function pi_activity_get_activities_of_stage_phase_user($inquiry_nid, $stage_nid, $phase_nid, $uid) {
	// Get the first activity of the phase, if one exists...
	// otherwise don't bother and make next point to next phase
	$phase_activities = get_activities_of_stage_phase_and_user($inquiry_nid, $stage_nid, $phase_nid, $uid);
	$activities_in_order = array();
	if (count($phase_activities) > 0) {
		//order activities by position to find first
		$positions = array();
		foreach ($phase_activities as $key => $activity) {
			$positions[$activity->weight] = $key;
		}
		asort($positions);

		//now put the positions in an array with standard indexing
		foreach ($positions as $phase_activities_key) {
			$activities_in_order[] = $phase_activities[$phase_activities_key];
		}
	}
	return $activities_in_order;
}

/**
 * Return the activity_id of an "Add $whatever"n activity for a given "Sort $whatever" function, if not return NULL
 * @param unknown_type $inquiry_nid The inquiry id that the activity belongs to
 * @param unknown_type $activity_ind The "Sort $whatever" activity id for the add activity.
 * @param unknown_type $uid The user id to find the add activity id for.
 */
function pi_activity_get_add_activity_for_sort_activity($activity_id) {
	$sort_activity = node_load($activity_id);

	if ($sort_activity != FALSE) {
		$type = node_get_types('type', $sort_activity->activity_type);

		$query = "SELECT {pi_activity}.`nid` FROM {pi_activity} WHERE parent_activity=%d AND activity_type='%s' AND referenced_node IS NULL AND script_activity=1";
		$result = db_query($query, $activity_id, $type->add_node_type);
		$row = db_fetch_array($result);
		if ($row) {
			return $row['nid'];
		}
	}

	return NULL;
	//return $return_value;
}

/**
 * Returns an array of nids of a node type available
 * to a user for a given inquiry
 * @param uint $uid The user to which the nodes are availeable
 * @param uint $inquiry_id the inquiry id that the nodes belong to
 * @param string $type the node type to search for e.g. 'pi_data'
 *
 */
function pi_activity_get_available_nids_of_type($uid, $inquiry_id, $node_type) {
	$return_nids = array();

	$query = "SELECT DISTINCT {node}.`nid` as nid FROM {node} AS node " .
					"LEFT JOIN {node_access} node_access ON node.`nid` = node_access.`nid` " .
					"LEFT JOIN {og_uid} og_uid ON node_access.`gid` = og_uid.`nid` " .
					"LEFT JOIN {pi_activity_node} pi_activity_node ON pi_activity_node.`nid` = node.`nid`  " .
					"LEFT JOIN {pi_activity} pi_activity ON pi_activity_node.`activity_id` = pi_activity.`nid`  " .
					"LEFT JOIN {pi_phase} pi_phase ON pi_activity.`phase_nid` = pi_phase.`nid` " .
					"WHERE TYPE = '%s'  AND pi_phase.`inquiry_nid` = %d " .
					"AND STATUS = '1' AND ((node.`uid` = %d) OR (og_uid.`uid` = %d) )";
	$result = db_query($query, $node_type, $inquiry_id, $uid, $uid);
	while ($row = db_fetch_object($result)) {
		$return_nids[] = $row->nid;
	}
	return $return_nids;
}

/**
 * This function takes an array of nids, loads the node and then maps the
 * node attributes to fields as per the key and value of $field_maping
 * if the node cann't be loaded it is dropped from the array therefore
 * if this is of concern to you, you should check array_keys($results)
 * with $nids
 * @param $nids array(uint) nids to get data from
 * @param $field_mapping mapping of node attribute to field e.g. array('weight' => '#weight')
 * @return array [nid][{field_mapping_value}] node->{field_mapping_key}
 */
function pi_activity_map_fields_from_nids($nids, $field_mapping) {
	$result = array();
	foreach ($nids as $nid) {
		$node_fields = NULL;
		$node = node_load($nid);
		if ($node != FALSE) {
			$node_fields = array();
			foreach ($field_mapping as $field => $mapping) {
				$node_fields[$mapping] = $node->$field;
			}
		}
		$result[$nid] = $node_fields;
	}
	return $result;
}

/**
 *
 * Enter description here ...
 * @param unknown_type $actor
 * @param unknown_type $audience
 */
function _pi_activity_get_activity_actor_audience_result_type($actor_gid, $audience_group_type) {
	$activity_setting = '';
	$group_values = array(
			'individual' => 0,
			'group' => 1,
			'class' => 2,
			'multiclass' => 3
	);
	$group = node_load($actor_gid);
	$actor_group_type = pi_get_type_of_group($actor_gid);

	$audience_value = $group_values[$audience_group_type];
	$actor_value = $group_values[$actor_group_type];

	$activity_setting = NULL;

	//This section sets up the type of explanation that is generated below in the switch
	// statement.  It's easier to understand the input/outcomes here then sort out the
	// explanations below.
	//$audience_value == 0 (individual)
	if ($audience_group_type == 'individual') {
		// When individual audience is set, then it's an individual activity for everyone in
		// the seleted actor group.
		$activity_setting = 'done_as_individuals_in_group_not_shared';
	} elseif ($audience_value == $actor_value) {
		// If the actor group type is the same as the audience type then the activity is
		// shared between all members of the actor group and only one activity content is generated
		$activity_setting = 'done_as_single_group_not_shared';
	} elseif ($audience_value < $actor_value) {
		// When the audience is smaller than the actor group type, then all the
		// groups of the audience type are given individual activities.
		// for example all the groups within a class or multiclass.
		$activity_setting = 'done_by_all_groups_in_larger_group_not_shared';
	} elseif ($audience_value > $actor_value) {
		// When the audience group type is larger than the actor group, then the
		// actor group shares the generated content witht the members of the larger group
		// and one item of generated for the actor group.
		// for example a group shares one content item with a class,
		// or a class shares one content item with a multiclass
		$activity_setting = 'done_by_group_shared_with_larger_group';
	}

	return $activity_setting;
}

/**
 * This function uses hook_form_alter() to set the redirect when adding/editing
 *  activity conent via nQuire  (detected via checking the url)
 *  n.b. since hook_form_node_form_alter doesn't work in D6 this is called from
 *  hook_form_alter() above, but here just for conveneince of seperating out things
 * This deas with this curcumstance:
 *  (2) Adding/Editing Activity Content  via /activity/%activity/edit
 *    -> redirect to /activity/%activity/phase on completion is specified in activity node details
 */
function pi_activity_form_node_form_alter(&$form, &$form_state) {
	//Strip the request url of the preceeding drupal stuff base_url and ?q=/
	// so that it's possible to work out whether the page request was from /inquiry/%inquiry/phase/add
	// or from /node/%node/edit
	$path_parts = pi_util_get_drupal_path_parts();
	//if AHAH helper is used, then redirect is cleared, so reset it here....
	if (pi_util_match_url(array('ahah_helper')))
		$form['#redirect'] = $form_state['storage']['redirect-activity-submit'];

	// Look for /activity/{number}/edit
	if (pi_util_match_url(array('activity', NULL, NULL))) {
		if (is_numeric($path_parts[1])) {
			$potential_activity_id = $path_parts[1];

			// the last part of the url is a special case since it could be either
			// /activity/%activity/edit OR
			// /activity/%activity/edit?some=query&string=too OR
			// /activity/%activity/edit&some=query&string=too
			$valid_strings = array('edit', 'edit?', 'edit&');
			if (in_array(strtolower($path_parts[2]), $valid_strings)) {
				//Set the destination from activity details
				$activity = node_load($potential_activity_id);
				if (pi_check_is_node_of_type($activity, 'pi_activity')) {
					$destination = $activity->destination_after;
					if ($destination == 'phase') {
						$form['#redirect'] = "phase/" . $activity->phase_nid;
					} elseif ($destination == 'self') {
						$form['#redirect'] = "activity/$potential_activity_id";
					}
					$form['redirect-activity-submit'] = array('#type' => 'hidden', '#value' => $form['#redirect']);
				} else {
					// It wasn't a valid inquiry node, so fall back to standard phase editing page
					drupal_set_message(t("An activity nid (@nid) was specified for this activity, but the id didn't refer to a valid activity node.", array("@nid" => $potential_activity_id)), 'warning');
				}
			}
		}
	}
	// Look for /activity/{number}/edit
	if (pi_util_match_url(array('inquiry', NULL, 'activity', 'add')) || pi_util_match_url(array('inquiry', NULL, 'activity', 'edit'))) {
		$activity = node_load($potential_activity_id);
		if (pi_check_is_node_of_type($activity, 'pi_activity')) {
			
		}
		$form['#redirect'] = "activity/";
	}
}

/**
 *
 * Implementatrion of hook_og_access_grants_alter
 * @param array $grants
 * @param $node
 */
function pi_activity_og_access_grants_alter_XXX(&$grants, $node) {
	$activity_nid = NULL;
	//First see if activity is set in the url...
	// or is it an existing node attached to an activity?
	if (pi_util_match_url(array('activity', NULL, NULL)))
		$activity_nid = pi_util_get_path_element(1);
	else
		$activity_nid = pi_activity_get_activity_nid_for_content_nid($node->nid);

	if ($activity_nid != NULL) {
		if (pi_check_node_exists_and_is_of_type($activity_nid, 'pi_activity')) {
			pi_debug_message("Starting to change access for node");
			// If this is activity content, then set the group permissions appropriately
			// remove permissions for any nquire groups that aren't actor/audience and then
			// set view/edit/delete permissions depending on actor or audience
			$activity = node_load($activity_nid);
			$actor_groups = pi_groups_get_users_actor_groups($node->uid, $activity->actor, $activity->audience);
			pi_debug_message("Actor groups " . implode(", ", $actor_groups));
			$audience_groups = pi_groups_get_users_audience_groups($node->uid, $activity->actor, $activity->audience);
			pi_debug_message("Audience groups " . implode(", ", $audience_groups));

			$count = 0;
			$grants_found = array();
			for ($count = 0; $count < count($grants); $count++) {
				if (pi_get_type_of_group($grants[$count]["gid"]) != null) {
					if (in_array($grants[$count]["gid"], $actor_groups)) {
						if (!in_array($grants[$count]["gid"], $grants_found))
							$grants_found[] = $grants[$count]["gid"];
						pi_debug_message("Setting all grant for " . $grants[$count]["gid"]);
						$grants[$count]["grant_view"] = 1;
						$grants[$count]["grant_update"] = 1;
						$grants[$count]["grant_delete"] = 1;
					}
					else if (in_array($grants[$count]["gid"], $audience_groups)) {
						if (!in_array($grants[$count]["gid"], $grants_found)) {
							$grants_found[] = $grants[$count]["gid"];
						}
						$grants[$count]["grant_view"] = 1;
						$grants[$count]["grant_update"] = 0;
						$grants[$count]["grant_delete"] = 0;
					} else {
						//Remove un needed nQuire group permissions
						$grants[$count] = NULL;
					}
				}
			}

			$new_grants = array();
			foreach ($grants as $grant)
				if ($grant != NULL)
					$new_grants[] = $grant;

			$grants = $new_grants;

			foreach ($actor_groups as $group_gid) {
				if (!in_array($group_gid, $grants_found)) {
					$grant = array();
					$grant["realm"] = "og_subscriber";
					$grant["gid"] = $group_gid;
					$grant["grant_view"] = 1;
					$grant["grant_update"] = 1;
					$grant["grant_delete"] = 1;
					$grant["priority"] = 0;
					$grants[] = $grant;
					$grants_found[] = $group_gid;
				}
			}
			foreach ($audience_groups as $group_gid) {
				if (!in_array($group_gid, $grants_found)) {
					$grant = array();
					$grant["realm"] = "og_subscriber";
					$grant["gid"] = $group_gid;
					$grant["grant_view"] = 1;
					$grant["grant_update"] = 0;
					$grant["grant_delete"] = 0;
					$grant["priority"] = 0;
					$grants[] = $grant;
				}
			}
		}
	}
}
