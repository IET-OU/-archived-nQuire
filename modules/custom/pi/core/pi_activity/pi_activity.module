<?php
// $Id: pi_activity.info,  2010/05/21  MCP $

/**
 * hook_menu() for pi_activity defining all the activity/% menu callbacks, etc
 * @return array of menu items as per drupal 6 api
 */
function pi_activity_menu() {
	$items = array();
	$items['activity/%pi_activity'] = array(
		'title' => 'View',
		'file' => 'pi_activity.activity.inc',
		'page callback' => 'pi_activity_view',
	    'page arguments' => array(1, 'view'),
		'access callback' => 'pi_activity_access',
		'access arguments' => array(1, 'view'),
	    'type' => MENU_CALLBACK,
		'weight' => 0,
	);
	
	$items['activity/%pi_activity/add'] = array(
		'title' => 'Add',
		'file' => 'pi_activity.activity.inc', 
		'page callback' => 'pi_activity_view',
		'page arguments' => array(1, 2),
		'access callback' => 'pi_activity_access',
		'access arguments' => array(1, 2),
		'type' => MENU_CALLBACK,		
	);
	
	$items['activity/%pi_activity/view'] = array(
		'title' => 'View',
		'file' => 'pi_activity.activity.inc', 
		'page callback' => 'pi_activity_view',
		'page arguments' => array(1, 2),
		'access callback' => 'pi_activity_access',
		'access arguments' => array(1, 2),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1,
	);
	
	
	$items['activity/%pi_activity/edit'] = array(
		'title' => 'Edit',
		'file' => 'pi_activity.activity.inc', 
		'page callback' => 'pi_activity_view',
		'page arguments' => array(1, 2),
		'access callback' => 'pi_activity_access',
		'access arguments' => array(1, 2),
		'type' => MENU_LOCAL_TASK,
		'weight' => 2,
	);
	
	$items['activity/%pi_activity/admin'] = array(
		'title' => 'Admin',
		'file' => 'pi_activity.admin.inc', 
		'page callback' => 'pi_activity_content',
		'page arguments' => array(1),
		'access_callback' => 'user_access',
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 3
	);
	
	$items['activity/%pi_activity/admin/content'] = array(
		'title' => 'View Activity Content',
		'file' => 'pi_activity.admin.inc', 
		'page callback' => 'pi_activity_content',
		'page arguments' => array(1),
		'access_callback' => 'user_access',
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0
	);
	
	$items['activity/%pi_activity/admin/edit'] = array(
		'title' => 'Edit Activity',
		'file' => 'pi_activity.admin.inc', 
		'page callback' => 'pi_activity_edit',
		'page arguments' => array(1),
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1
	);

	$items['activity/%pi_activity/admin/view/%node'] = array(
		'title' => 'Edit Activity',
		'file' => 'pi_activity.admin.inc', 
		'page callback' => 'pi_activity_admin_view_node',
		'page arguments' => array(1, 4),
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_CALLBACK,
		'weight' => 1
	);
	
	return $items;
}

/**
 * Access callback for pi_activities under the url activity/%
 * @param uint $activity_id the id of the activity being accessed
 * @param uint $op the function to perform on the activity (view/add/edit)
 * @return TRUE or FALSE to indicate whether access is allowed for that function
 */
function pi_activity_access($activity, $op) {
	global $user;
	$details = get_inquiry_details_from_current_path();
	if(!isset($activity->activity_id))
	{
		$return_value = false;
	}
	else
	{
		$return_value = check_node_function_of_activity($details->inquiry_id, $activity->activity_id, $user->uid, $op);
		if(($return_value===false) && ($op='view'))
		{
			$return_value = $return_value || pi_activity_access($activity, 'edit');
		}
	}
	return $return_value;
}

/**
 * hook_theme() for pi_activity content
 */
function pi_activity_theme()
{
		return array(
		'pi_activity_admin_view_node' => array(
			'arguments' => array('activity', 'node_view_page'),
			'file' => 'pi_activity.admin.inc')
		);
}



/**
 * Returns a list of nids of activity nodes generated for the given pi_activity
 * @param uint $inquiry_id the id of a pi_inquiry to get all related nodes for the activity (n.b. this is probably not needed)
 * @param uint $activity_id the id of a pi_activity to get all related nodes for
 * @return array(uint) an array of all the activity content nids for the given activity_is
 */
function pi_activity_get_activity_content_nids($activity_id, $inquiry_id)
{
	$activity_content_nids = array();
	$query = "SELECT nid FROM {pi_activity_node} WHERE activity_id = %d AND inquiry_id = %d";
	$result = db_query($query, $activity_id, $inquiry_id);
	while($row = db_fetch_array($result))
	{
		$activity_content_nids[] = $row['nid'];
	}
	return $activity_content_nids;
}

/**
 * Return and object with a nid property which is the phase activity resides is in in a
 * particular inquiry for a given user.
 * @param uint $inquiry_id The inquiry id of the activity
 * @param uint $activity_id The activity id
 * @param uint $uid The uid of the user that activity belongs to
 */
function get_phase_of_inquiry_and_activity($inquiry_id, $activity_id, $uid) {
	$query = "SELECT pi_phase.nid as nid FROM pi_phase " .
		"LEFT JOIN pi_phase_actor ON pi_phase_actor.phase_id = pi_phase.nid " .
		"LEFT JOIN og_uid ON og_uid.nid = pi_phase_actor.gid " .
		"LEFT JOIN pi_stage_phase ON pi_stage_phase.phase_id = pi_phase.nid ".
		"LEFT JOIN pi_stage_phase_activity ON pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id " .
		"WHERE pi_phase.inquiry_nid = '" . $inquiry_id . "' " . 
			"AND (pi_phase_actor.uid = '" . $uid . "' OR og_uid.uid = '" . $uid . "') " .
			"AND  pi_stage_phase_activity.activity_id = '" . $activity_id . "' ";
	$result = db_fetch_object(db_query($query));
	return $result;
}


/**
 * get_nid_for_inquiry_activity_and_user
 **/
function get_nid_for_inquiry_activity_and_user($inquiry_id, $activity_id, $uid) {
	//find if uid is author of the node
	$query1 = "SELECT `a`.`nid` FROM {pi_activity_node} AS `a` " . 
			 "LEFT JOIN {node} AS `n` ON `n`.`nid` = `a`.`nid` " . 
			 "WHERE `a`.`inquiry_id` = %d " . 
			 "AND `a`.`activity_id` = %d " . 
			 "AND `n`.`uid` = %d " . 
			 "ORDER BY `a`.`pan_id` DESC";
	
/*	$query1 = "SELECT pi_activity_node.nid FROM pi_activity_node, node";
	$query1 .= " WHERE  pi_activity_node.inquiry_id = " . $inquiry_id;
	$query1 .= " AND pi_activity_node.activity_id = " . $activity_id;
	$query1 .= " AND node.nid = pi_activity_node.nid";
	$query1 .= " AND node.uid = '" . $uid . "' ";
	$query1 .= " ORDER BY pan_id DESC";*/

	
	$result = db_fetch_object(db_query($query1, $inquiry_id, $activity_id, $uid));
	if (isset($result))
	{
		if(isset($result->nid))
		{
			return $result->nid;
		}
	}

	//find if uid is member of a group for the node
	$query2 = "SELECT pi_activity_node.nid FROM pi_activity_node, node_access, og_uid";
	$query2 .= " WHERE  pi_activity_node.inquiry_id = '" . $inquiry_id . "' ";
	$query2 .= " AND pi_activity_node.activity_id = '" . $activity_id . "' ";
	$query2 .= " AND node_access.nid = pi_activity_node.nid";
	$query2 .= " AND ((node_access.gid = gid";
	$query2 .= " AND node_access.gid = og_uid.nid";
	$query2 .= " AND og_uid.uid = '" . $uid . "') ";
	$query2 .= " OR node_access.realm = 'all') ";

	$result = db_fetch_object(db_query($query2));
	return $result->nid;
}


/**
 * Returns the phase id.
 * Assumes 1-1 mapping of phases to activities
 * If more than one returns the one with the highest unique key in pi_stage_phase
 */
function get_phase_id_for_activity_id($activity_id) {
	$result = db_fetch_object(db_query("SELECT pi_stage_phase.phase_id FROM pi_stage_phase, pi_stage_phase_activity WHERE pi_stage_phase_activity.activity_id = '" . $activity_id . "' AND pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id ORDER BY pi_stage_phase.psp_id DESC LIMIT 1"));
	return $result->phase_id; 
}

/**
 * Returns the inquiry id.
 * Assumes 1-1 mapping of activities to phases
 */
function get_inquiry_id_for_activity_id($activity_id) {
	$phase_id = get_phase_id_for_activity_id($activity_id);
	$inquiry_id = get_inquiry_id_for_phase_id ($phase_id);
	return $inquiry_id;
}

/**
 * Returns an array of activity_ids of the specified activity_type
 * that are visible to that user according to pi_activity_actor.
 * This uses pi_activity_actor and pi_activity tables.
 */
function get_activity_ids_for_activity_type($inquiry_id, $activity_type, $uid) {
	$query = "SELECT pi_activity.activity_id ";
	$query .= "FROM pi_activity ";
	$query .= "LEFT JOIN pi_activity_actor ON pi_activity_actor.activity_id = pi_activity.activity_id ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	$query .= "WHERE pi_activity_actor.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND pi_activity.activity_type =  '" . $activity_type. "' ";
	$query .= "AND (pi_activity_actor.uid =  '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";

	$result = db_result(db_query($query));
	return $result;

}

/**
 * Returns an array of node_ids of the specified activity_type
 * that are visible to that user according to pi_activity_actor.
 * This uses pi_activity_actor and pi_activity tables.
 */
function get_node_ids_for_activity_type ($inquiry_id, $activity_type, $uid) {
	$query = "SELECT pi_activity_node.nid ";
	$query .= "FROM pi_activity_node ";
	$query .= "LEFT JOIN pi_activity ON pi_activity_node.activity_id = pi_activity.activity_id ";
	$query .= "LEFT JOIN pi_activity_actor ON ((pi_activity_node.inquiry_id = pi_activity_actor.inquiry_id) AND (pi_activity_actor.activity_id = pi_activity.activity_id)) ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	$query .= "WHERE pi_activity_node.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND pi_activity.activity_type =  '" . $activity_type. "' ";
	$query .= "AND (pi_activity_actor.uid =  '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";

	// print $query;
	$result = db_query($query);
	return $result;

}

function get_activity_id_for_nid($nid) {
	$query = "SELECT activity_id FROM pi_activity_node WHERE nid = '" . $nid . "' ";
	$result = db_fetch_object(db_query($query));
	return $result->activity_id;
}

/**
 * Uses arguments from the path and the pi_activity_table to return the activity type.
 */
function get_activity_type_of_node_path($path) {
	$inquiry_details = get_inquiry_details_of_node_path ($path);

	$query = "SELECT activity_type FROM pi_activity WHERE activity_id = '" . $inquiry_details->inquiry_id . "'";
	$result = db_result(db_query($query));

	return $result ;
}

/**
 * Returns FALSE if this is not the activity_type for the activity type
 * associated with the node path, otherwise returns TRUE.
 */
function check_activity_type_of_node_path ($path, $activity_type) {
	$temp = get_activity_type_of_node_path ($path);

	if ($temp == NULL) {
		$result = NULL;
	}
	elseif ($temp == $activity_type) {
		$result = TRUE;
	}
	else {
		$result = FALSE;
	};

	return $result;

}

/**
 * Adds the specified data to the pi_activity_node table.
 * This tracks that a node has been created for that particular activity.
 */
function add_pi_activity_node($inquiry_id, $activity_id, $nid) {
	$query = "INSERT INTO pi_activity_node ";
	$query .= "SET inquiry_id = '" . $inquiry_id . "'";
	$query .= ", activity_id = '" . $activity_id . "'";
	$query .= ", nid_id = '" . $nid_id . "'";

	db_query($query);

}

// ------------------------------------------------------------------------------------

/**
 * Functions in this block are for visible_status and node_function.
 * Primarily they refer to values of pi_activity_status.
 */

/**
 * Returns visible_status from pi_activity_status (can be start, in_progress, view or unavailable).
 */
function get_visible_status_of_activity($inquiry_id, $activity_id, $uid) {
	$activity_status = load_activity_status($inquiry_id, $activity_id, $uid);
	$result = $activity_status->visible_status;
	return $result ;
}

/**
 * $status can be either start, in_progress, view or unavailable.
 * Returns FALSE if that user does not have that permission for the
 * specified activity, otherwise it returns TRUE.
 */
function check_visible_status_of_activity ($inquiry_id, $activity_id, $uid, $status) {


	$visible_status = get_visible_status_of_activity($inquiry_id, $activity_id, $uid);

	if ($visible_status == $status) {
		$result = TRUE;
	}
	else {
		$result = FALSE;
	};

	return $result;

}

/**
 * $status can be either start, in_progress, view or unavailable.
 * Updates the existing visible_status to value $status.
 * This will set dependent on the audience in pi_activity.
 */
function set_visible_status_of_activity($inquiry_id, $activity_id, $uid, $status) {
	$activity_status = load_activity_status($inquiry_id, $activity_id, $uid);

	$activity_status->visible_status = $status;

	save_activity_status($activity_status);
	/*
	 $query = "SELECT pi_activity_status.pas_id ";
	 $query .= "FROM pi_activity_status ";
	 $query .= "LEFT JOIN pi_activity_actor ";
	 $query .= "ON pi_activity_actor.inquiry_id = pi_activity_status.inquiry_id ";
	 $query .= "AND pi_activity_actor.activity_id = pi_activity_status.activity_id ";
	 $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	 $query .= "WHERE pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
	 $query .= "AND pi_activity_status.activity_id = '" . $activity_id . "' ";
	 $query .= "AND (pi_activity_actor.uid = '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";

	 $pas_id = db_result(db_query($query));

	 $query = "UPDATE pi_activity_status ";
	 $query .= "SET visible_status = '" . $status . "' ";
	 $query .= "WHERE pas_id = '" . $pas_id . "'";

	 db_query($query);*/

}

/**
 * Updates the visible status for all of the activities visible to that user of the specified type.
 * This will be set dependent on the audience in pi_activity.
 */
function set_visible_status_of_activity_type($inquiry_id, $activity_type, $uid, $status) {
	$query = "SELECT pi_activity_status.pas_id ";
	$query .= "FROM pi_activity_status ";
	$query .= "LEFT JOIN pi_activity ON pi_activity_status.activity_id = pi_activity.activity_id ";
	$query .= "LEFT JOIN pi_activity_actor ";
	$query .= "ON pi_activity_actor.inquiry_id = pi_activity_status.inquiry_id ";
	$query .= "AND pi_activity_actor.activity_id = pi_activity_status.activity_id ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	$query .= "WHERE pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND pi_activity_status.activity_id = '" . $activity_id . "' ";
	$query .= "AND pi_activity.activity_type = '" . $activity_type . "' ";
	$query .= "AND (pi_activity_actor.uid = '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";

	$items = db_query($query);

	while ($item = db_fetch_object($items)) {

		$query = "UPDATE pi_activity_status ";
		$query .= "SET visible_status = '" . $status . "' ";
		$query .= "WHERE pas_id = '" . $item->pas_id . "'";

		db_query($query);

	};

}

/**
 * Returns node_function from pi_activity_status (can be add, edit or view).
 * @param $inquiry_id
 * @param $activity_id
 * @param $uid
 * @return unknown_type
 */
function get_node_function_of_activity($inquiry_id, $activity_id, $uid) {
	$activity_status = load_activity_status ($inquiry_id, $activity_id, $uid);

	$result = $activity_status->node_function;

	return $result ;
	/*
	 $query = "SELECT pi_activity_status.node_function ";
	 $query .= "FROM pi_activity_status ";
	 $query .= "LEFT JOIN pi_activity_actor ";
	 $query .= "ON pi_activity_actor.inquiry_id = pi_activity_status.inquiry_id ";
	 $query .= "AND pi_activity_actor.activity_id = pi_activity_status.activity_id ";
	 $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	 $query .= "WHERE pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
	 $query .= "AND pi_activity_status.activity_id = '" . $activity_id . "' ";
	 $query .= "AND (pi_activity_actor.uid =  '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";

	 $result = db_fetch_object(db_query($query));

	 return $result->node_function;*/

}

/**
 * Returns FALSE if that node function for that activity and user is not the specified 
 * function, otherwise it returns TRUE.
 * @param $inquiry_id
 * @param uint $activity_id ID of pi_acitvity to check node function with 
 * @param uint $uid ID of user to check node function with 
 * @param string $function can Either 'add', 'edit' or 'view'.
 * @return unknown_type
 */
function check_node_function_of_activity($inquiry_id, $activity_id, $uid, $function) {
	$node_function = get_node_function_of_activity ($inquiry_id, $activity_id, $uid);
	if ($node_function == $function) {
		$result = TRUE;
	}
	else {
		$result = FALSE;
	};

	return $result;
}

/**
 * $function can be either add, edit or view.
 * Updates the exisitng node_function to the value of $function.
 * This will be set dependent on the audience in pi_activity.
 * @param $inquiry_id
 * @param $activity_id
 * @param $uid
 * @param $function
 * @return unknown_type
 */
function set_node_function_of_activity($inquiry_id, $activity_id, $uid, $function) {
	$activity_status = load_activity_status ($inquiry_id, $activity_id, $uid);
	$activity_status->node_function = $function;
	save_activity_status($activity_status);
	/*
	 $query = "SELECT pi_activity_status.pas_id ";
	 $query .= "FROM pi_activity_status ";
	 $query .= "LEFT JOIN pi_activity_actor ";
	 $query .= "ON pi_activity_actor.inquiry_id = pi_activity_status.inquiry_id ";
	 $query .= "AND pi_activity_actor.activity_id = pi_activity_status.activity_id ";
	 $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	 $query .= "WHERE pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
	 $query .= "AND pi_activity_status.activity_id = '" . $activity_id . "' ";
	 $query .= "AND (pi_activity_actor.uid = '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";

	 $pas_id = db_result(db_query($query));

	 $query = "UPDATE pi_activity_status ";
	 $query .= "SET node_function = '" . $function . "' ";
	 $query .= "WHERE pas_id = '" . $pas_id . "'";

	 db_query($query);*/

}

/**
 * Updates the node function for all of the activities visible to that user of the specified type.
 * This will be set dependent on the audience in pi_activity.
 * @param $inquiry_id
 * @param $activity_type
 * @param $uid
 * @param $function
 * @return unknown_type
 */
function set_node_function_of_activity_type($inquiry_id, $activity_type, $uid, $function) {

	$query = "SELECT pi_activity_status.pas_id ";
	$query .= "FROM pi_activity_status ";
	$query .= "LEFT JOIN pi_activity ON pi_activity_status.activity_id = pi_activity.activity_id ";
	$query .= "LEFT JOIN pi_activity_actor ";
	$query .= "ON pi_activity_actor.inquiry_id = pi_activity_status.inquiry_id ";
	$query .= "AND pi_activity_actor.activity_id = pi_activity_status.activity_id ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	$query .= "WHERE pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND pi_activity_status.activity_id = '" . $activity_id . "' ";
	$query .= "AND pi_activity.activity_type = '" . $activity_type . "' ";
	$query .= "AND (pi_activity_actor.uid = '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";

	$items = db_query($query);

	while ($item = db_fetch_object($items)) {

		$query = "UPDATE pi_activity_status ";
		$query .= "SET node_function = '" . $function . "' ";
		$query .= "WHERE pas_id = '" . $item->pas_id . "'";

		db_query($query);

	};

}

// ---------------------------------------------------------------------------

/**
 * Functions in this block are for adding, deleting and inspecting activities
 */

/**
 * Returns the activity_object from pi_activity table.
 * @param uint $activity_id the activity ID
 * @return object from db_fetch_object() for pi_activity table
 */
function load_activity($activity_id)
{
	$query = "SELECT * FROM {pi_activity} WHERE activity_id = %d";
	$activity = db_fetch_object(db_query($query, $activity_id));
	return $activity;
}

/**
 * Returns the activity_object from pi_activity table - used in the activity menu
 * @param uint $activity_id the activity ID
 * @return object from db_fetch_object() for pi_activity table
 */
function pi_activity_load($activity_id)
{
	$activity = load_activity($activity_id);
	return $activity;
}


/**
 * This will insert or update depending on whether the activity_id is set in the array and
 * exists in the pi_activity table. $activity_array is a keyed array comprising:
 * $activity_array->activity_id
 * $activity_array->name
 * $activity_array->description
 * $activity_array->activity_type
 * $activity_array->node_type
 * $activity_array->parameters
 * $activity_array->destination
 * $activity_array->audience
 */
function save_activity($activity_array) {
	$set = "name = '" . $activity_array["name"] . "' ";
	$set .= ", description = '" . $activity_array["description"] . "' ";
	$set .= ", activity_type = '" . $activity_array["activity_type"] . "' ";
	$set .= ", node_type = '" . $activity_array["node_type"] . "' ";
	$set .= ", parameters = '" . $activity_array["parameters"] . "' ";
	$set .= ", destination = '" . $activity_array["destination"] . "' ";
	$set .= ", audience = '" . $activity_array["audience"] . "' ";

	$query = "";
	if ($activity_array["activity_id"] != NULL){
		//update
		$query = "UPDATE pi_activity SET ";
		$query .= $set;
		$query .= "WHERE pi_activity.activity_id = '" . $activity_array["activity_id"] . "'";
	}
	else{
		//insert
		$query .= "INSERT INTO pi_activity SET ";
		$query .= $set;
	}
	db_query($query);
}

/**
 * Deletes an activity. Will delete from pi_activity, pi_activity_actor,
 * pi_activity_status, pi_phase_activity, pi_activity_node
 * where activity_id field = $activity_id.
 * @param unknown_type $activity_id
 * @return unknown_type
 */
function delete_activity($activity_id) {
	//delete from pi_activity
	$query1 = "DELETE FROM pi_activity WHERE activity_id = '" . $activity_id . "'";
	db_query($query1);

	//delete from pi_activity_actor
	$query2 = "DELETE FROM pi_activity_actor WHERE activity_id = '" . $activity_id . "'";
	db_query($query2);

	//delete from pi_activity_status
	$query3 = "DELETE FROM pi_activity_status WHERE activity_id = '" . $activity_id . "'";
	db_query($query3);

	//delete from pi_phase_activity
	$query4 = "DELETE FROM pi_stage_phase_activity WHERE activity_id = '" . $activity_id . "'";
	db_query($query4);

	//delete from pi_activity_node
	$query5 = "DELETE FROM pi_activity_node WHERE activity_id = '" . $activity_id . "'";
	db_query($query5);
}

/**
 * Returns array from pi_activity_actor table.
 * @param unknown_type $inquiry_id
 * @param unknown_type $activity_id
 * @param unknown_type $uid
 * @param unknown_type $gid
 * @return Ambigous <multitype:, unknown>
 */
function load_activity_actor($inquiry_id, $activity_id = NULL, $uid = NULL, $gid = NULL) {
	$query = "SELECT * FROM pi_activity_actor WHERE inquiry_id = '" . $inquiry_id . "'";
	if ($activity_id) {
		$query .= " AND activity_id = '" . $activity_id . "'";
	};
	if ($uid) {
		$query .= " AND uid = '" . $uid . "'";
	};
	if ($gid) {
		$query .= " AND gid = '" . $gid . "'";
	};

	$items = db_query($query);

	$activities = array();

	while ($item = db_fetch_object($items))
	{
		$activity = array();
		$activity["paa_id"] = $item->paa_id;
		$activity["inquiry_id"] = $item->inquiry_id;
		$activity["activity_id"] = $item->activity_id;
		$activity["uid"] = $item->uid;
		$activity["gid"] = $item->gid;
		$activities[] = $activity;
	};
	return $activities;
}

/**
 * This will insert.
 * $activity_actor_array is a keyed array comprising:
 * $activity_actor_array ->inquiry_id
 * $activity_actor_array ->activity_id
 * $activity_actor_array ->uid
 * $activity_actor_array ->gid
 */
function insert_activity_actor($activity_actor_array) {
	$query = "INSERT INTO pi_activity_actor SET ";
	$query .= "inquiry_id = '" . $activity_actor_array["inquiry_id"] . "' ";
	$query .= ", activity_id = '" . $activity_actor_array["activity_id"] . "' ";
	if (isset($activity_actor_array["uid"])) {
		$query .= ", uid = '" . $activity_actor_array["uid"] . "' ";
	};
	if (isset($activity_actor_array["gid"])) {
		$query .= ", gid = '" . $activity_actor_array["gid"] . "' ";
	};

	db_query($query);
}

/**
 * This will update.
 * $activity_actor_array is a keyed array comprising:
 * $activity_actor_array ->inquiry_id
 * $activity_actor_array ->activity_id
 * $activity_actor_array ->uid
 * $activity_actor_array ->gid
 */
function update_activity_actor ($activity_actor_array) {
	$query = "UPDATE pi_activity_actor SET ";
	$query .= "inquiry_id = '" . $activity_actor_array["inquiry_id"] . "' ";
	$query .= ", activity_id = '" . $activity_actor_array["activity_id"] . "' ";
	$query .= ", uid = '" . $activity_actor_array["uid"] . "' ";
	$query .= ", gid = '" . $activity_actor_array["gid"] . "' ";
	$query .= "WHERE paa_id = '" . $activity_actor_array["paa_id"] . "'"; 
	db_query($query);
}

/**
 * Returns array from pi_activity_status table objects.
 * @param unknown_type $inquiry_id
 * @param unknown_type $activity_id
 * @param unknown_type $uid
 * @return unknown|number
 */
function load_activity_status($inquiry_id, $activity_id = NULL, $uid = NULL) {
	$query = "SELECT pi_activity_status.pas_id FROM pi_activity_status ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_status.gid ";
	$query .= "WHERE inquiry_id = '" . $inquiry_id . "' ";
	if ($activity_id)
	{
		$query .= "AND activity_id = '" . $activity_id . "' ";
	}
	if ($uid)
	{
		$query .= "AND (pi_activity_status.uid = '" . $uid . "' OR og_uid.uid = " . $uid . ") ";
	}
	$query .= "ORDER BY pi_activity_status.pas_id DESC";

	$items = db_fetch_object(db_query($query));

	if ($items->pas_id)
	{
		$newquery = "SELECT * FROM pi_activity_status WHERE pas_id = " . $items->pas_id . ";";
		$newitems = db_fetch_object(db_query($newquery));
		return $newitems;
	}
	else
	{
		return 0;
	}
}

/**
 * $activity_status_array is a keyed array comprising:
 * $activity_status_array ->inquiry_id
 * $activity_status_array ->activity_id
 * $activity_status_array ->uid
 * $activity_status_array ->gid
 * $activity_status_array ->node_function
 * $activity_status_array ->visible_status
 */
function save_activity_status($activity_status) {
	$set = "inquiry_id = '" . $activity_status->inquiry_id . "' ";
	$set .= ", activity_id = '" . $activity_status->activity_id . "' ";

	if ($activity_status->uid)
	{
		$set .= ", uid = '" . $activity_status->uid . "' ";
	}
	if ($activity_status->gid)
	{
		$set .= ", gid = '" . $activity_status->gid . "' ";
	}
	$set .= ", node_function = '" . $activity_status->node_function . "' ";
	$set .= ", visible_status = '" . $activity_status->visible_status . "' ";

	$query = "";
	if ($activity_status->pas_id != NULL){
		//update
		$query = "UPDATE pi_activity_status SET ";
		$query .= $set;
		$query .= "WHERE pi_activity_status.pas_id = '" . $activity_status->pas_id . "'";
	}
	else
	{
		//insert
		$query .= "INSERT INTO pi_activity_status SET ";
		$query .= $set;
	}

	db_query($query);
}

/**
 * Deletes all activities of that type that are visible to the specified user.
 * Will delete from pi_activity, pi_activity_actor, pi_activity_status,
 * pi_phase_activity, pi_activity_node where activity_id field = $activity_id.
 * This will be dependent on the audience in pi_activity.
 * @param $activity_type
 * @param $user
 * @return unknown_type
 */
function delete_activity_type_for_user($activity_type, $user) {
	//get all activity id's for $activity_type
	$activity_ids = "SELECT * FROM pi_activity WHERE activity_type = '" . $activity_type . "'";
	$results = db_result(db_query($query));

	foreach($results as $r){
		$query1 = "DELETE FROM pi_activity WHERE activity_id = '" . $r->activity_id . "'";
		db_query($query1);

		//delete from pi_activity_actor
		$query2 = "DELETE FROM pi_activity_actor WHERE activity_id = '" . $r->activity_id . "'";
		db_query($query2);

		//delete from pi_activity_status
		$query3 = "DELETE FROM pi_activity_status WHERE activity_id = '" . $r->activity_id . "'";
		db_query($query3);

		//delete from pi_phase_activity
		$query4 = "DELETE FROM pi_phase_activity WHERE activity_id = '" . $r->activity_id . "'";
		db_query($query4);

		//delete from pi_activity_node
		$query5 = "DELETE FROM pi_activity_node WHERE activity_id = '" . $r->activity_id . "'";
		db_query($query5);
	}
}

/**
 * Create the url to a particular activity 
 * @param uint $inquiry_id
 * @param uint $stage_id
 * @param uint $phase_id
 * @param uint $activity_id
 * @param uint $uid
 * @return array ['url'] and ['title'] countaining link url (via drupal url()) and title (via chaeck_plain()) 
 */
function pi_activity_get_link($inquiry_id, $stage_id, $phase_id, $activity_id, $uid)
{
	$url = array('url'=>'', 'title'=>'');

	$image_path = drupal_get_path( 'module', 'pi' ) . '/images/';
	$status_image = array(
		'start' => 'creatable.png',
		'edit' => 'editable.png',
		'view' => 'viewable.png',
		'unavailable' => 'unavailable.png'
	);
	
	$loaded_activity = load_activity($activity_id);
	$visible_status = get_visible_status_of_activity($inquiry_id, $activity_id, $uid);
	$node_function = get_node_function_of_activity($inquiry_id, $activity_id, $uid);

	switch ($loaded_activity->destination)
	{
		case "self":
			$destination = "destination=activity/$activity_id/view";
			break;
		case "phase":
			$destination = "destination=phase/" . $phase_id;
			break;
		default:
			$destination = "destination=inquiry/" . $inquiry_id;
			break;
	}

	// set editable nodes to be viewed by default
	if ($node_function == 'edit')
	{
		$node_function = 'view';
	}
	$url['url'] = url("activity/$activity_id/$node_function", array('query' => $destination));

	
	$teacher_gid = check_teacher_activity_for_inquiry_activity_user($inquiry_id, $activity_id, $uid);
	$activity_name_text = check_plain($loaded_activity->name) . teacher_only_flag($teacher_gid);

	//if ($visible_status == "unavailable")
	//{
		$label_icon = "<img width='12' src='" . $image_path . $status_image[$visible_status] . "'/>";
		$url['title'] = $activity_name_text . '&nbsp;' . $label_icon;
	/*}
	else {
		$label_icon = "<img width='12' src='" . $image_path . $status_image[$visible_status] . "'/>";

		$activity_name_link = "$activity_name_text&nbsp;$label_icon";
		$url['title'] = $activity_name_link;
	}*/
	return $url;
}


/**
 * Create a link to a particular activity with associated icon
 * @param uint $inquiry_id
 * @param uint $stage_id
 * @param uint $phase_id
 * @param uint $activity_id
 * @param uint $uid
 */
function build_activity_link($inquiry_id, $stage_id, $phase_id, $activity_id, $uid) {
	$link = pi_activity_get_link($inquiry_id, $stage_id, $phase_id, $activity_id, $uid);
	$output = array(
		'data' => "<a href='" . $link['url'] .  "'>" . $link['title'] . "</a>", 
		'class' => 'menu'
	);
	return $output;
}

/**
 * Returns an array of activities in order based on a sort of the posistion column
 * @param uint $inquiry_nid
 * @param uint $stage_nid
 * @param uint $phase_nid
 * @param uint $uid
 */
function pi_activity_get_activities_of_stage_phase_user($inquiry_nid, $stage_nid, $phase_nid, $uid)
{
	// Get the first activity of the phase, if one exists...
	// otherwise don't bother and make next point to next phase
	$phase_activities = get_activities_of_stage_phase_and_user($inquiry_nid, $stage_nid, $phase_nid, $uid);
	$activities_in_order = array();
	if(count($phase_activities)>0)
	{
		//order activities by position to find first
		$positions = array();
		foreach($phase_activities as $key => $activity)
		{
			$positions[$activity->position] = $key;
		}
		asort($positions);

		//now put the positions in an array with standard indexing
		foreach($positions as $phase_activities_key)
		{
			$activities_in_order[] = $phase_activities[$phase_activities_key];
		}
	}
	return $activities_in_order;
}


?>