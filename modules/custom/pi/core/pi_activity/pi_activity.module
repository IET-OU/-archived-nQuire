<?php

// $Id: pi_activity.info,  2010/05/21  MCP $


module_load_include('inc', 'pi_activity', 'pi_activity.workflow');
module_load_include('inc', 'pi_activity', 'pi_activity.extra');
//module_load_include('inc', 'pi_activity', 'pi_activity.status');
module_load_include('inc', 'pi_activity', 'pi_activity.content');

/**
 *
 * This functions returns the information for the activity node
 * Function used by the drupal system
 */
function pi_activity_node_info() {
	return array(
			'pi_activity' => array(
					'name' => t('Inquiry Activity'), // Required.
					'module' => 'pi_activity', // Required.
					'description' => t('Activities are plans for work that students do within nQuire'), // Required.
					'has_title' => TRUE,
					'title_label' => t('Activity name'),
					'has_body' => TRUE,
					'body_label' => t('Description of the activity'),
					'locked' => TRUE
			)
	);
}

/**
 *
 * Drupal API hook_perm() implemetaiton to define available permissions for activity node type
 */
function pi_activity_perm() {
	return array('create activity', 'edit own activity', 'edit any activity', 'delete own activity', 'delete any activity');
}

/**
 * Access callback for pi_activities under the url activity/%
 * @param uint $activity node of the activity being accessed
 * @param uint $op the function to perform on the activity (view/add/edit)
 * @return TRUE or FALSE to indicate whether access is allowed for that function
 */
function pi_activity_access($activity, $op) {
	return TRUE;
	//pi_debug_message('pi_activity_item_access:' . $op);
	// pi_debug_message($activity);
	// exit;
	$return_value = false;
	global $user;
	if (isset($activity->nid)) {
		$node_function_allowed = pi_activity_check_node_function($activity->nid, $user->uid, $op);
		if (($node_function_allowed === false) && ($op == 'view')) {
			$return_value = pi_activity_check_node_function($activity->nid, $user->uid, 'edit');
		}
		if (($node_function_allowed === false) && ($op == 'add')) {
			$possible_add_nid = pi_activity_get_add_activity_for_sort_activity($activity->nid);
			if ($possible_add_nid !== NULL) {
				$return_value = true;
			}
		}
	}

	return $return_value;
}

/**
 * hook_menu() for pi_activity defining all the activity/% menu callbacks, etc
 * @return array of menu items as per drupal 6 api
 */
function pi_activity_menu() {
	$items = array();
	$items['activity/%node'] = array(
			'title' => 'View',
			'file' => 'pi_activity.activity.inc',
			'page callback' => 'pi_activity_content_view',
			'page arguments' => array(1, 'view'),
			'access callback' => 'pi_activity_tab_view_access_callback',
			'access arguments' => array(1),
			'type' => MENU_CALLBACK
	);

	$items['activity/%node/shared/%'] = array(
			'title' => 'View',
			'file' => 'pi_activity.activity.inc',
			'page callback' => 'pi_activity_shared_content_view',
			'page arguments' => array(1, 3),
			'access callback' => 'pi_activity_shared_content_view_access',
			'access arguments' => array(1, 3),
			'type' => MENU_CALLBACK
	);

	$items['activity/%node/view'] = array(
			'title' => 'View',
			'type' => MENU_DEFAULT_LOCAL_TASK,
			'weight' => 0,
			'access callback' => 'pi_activity_tab_view_access_callback',
			'access arguments' => array(1),
	);

	$items['activity/%node/edit'] = array(
			'title' => 'Edit',
			'file' => 'pi_activity.activity.inc',
			'page callback' => 'pi_activity_content_view',
			'page arguments' => array(1, 2),
			'access arguments' => array(1),
			'access callback' => 'pi_activity_tab_edit_access_callback',
			'type' => MENU_LOCAL_TASK,
			'weight' => 1
	);

	$items['activity/%node/delete'] = array(
			'title' => 'Delete',
			'file' => 'pi_activity.activity.inc',
			'page callback' => 'pi_activity_content_delete',
			'page arguments' => array(1),
			'access arguments' => array(1),
			'access callback' => 'pi_activity_tab_edit_access_callback',
			'type' => MENU_CALLBACK,
			'weight' => 1
	);

	return $items;
}

function pi_activity_tab_view_access_callback($node) {
	if ($node->activity_type === 'pi_data_spreadsheet' || $node->activity_type === 'pi_data') {
		return !pi_activity_tab_edit_access_callback($node) && pi_activity_tabs_access_to_content($node, 'view');
	} else {
		return pi_activity_tabs_access_to_content($node, 'view');
	}
}

function pi_activity_tab_edit_access_callback($node) {
	if ($node->activity_type === 'pi_sort_data' || $node->activity_type === 'pi_sort_key_answers' || $node->activity_type === 'pi_read_information') {
		return FALSE;
	} else {
		return pi_activity_tabs_access_to_content($node, 'edit');
	}
}

function pi_activity_tabs_access_to_content($node, $function) {
	if ($node->type === 'pi_activity') {
		$access_data = pi_inquiry_groupings_get_access_data();
		$activity_data = $access_data->get_activity($node->nid);
		if ($activity_data) {
			if ($activity_data['script_activity'] || pi_activity_get_content_nid_for_activity($node->nid, FALSE)) {
				return $activity_data['access'] === 'edit' ||
								($activity_data['access'] === 'view' && $function === 'view');
			}
		}
	}

	return FALSE;
}

/**
 * This page is the standard activity authoring page that is currently linked to from admin/nquire
 * It calls pi_activity_form which will be rewritten in pi_activity_pi_activity_form_alter where it will
 * be redirected to it's calling location where necessary
 */
function pi_activity_add() {
	$output = '';

	$output = t("<p>Use this page to add an activity to an inquiry - select the activity, then the phase and then the phases that it will be incuded in." .
					" For each stage you wil have to choose how it will be made available: as either <i>unavailable</i>, " .
					"<i>startable</i>, <i>editable</i> or <i>viewable</i>.");
	$new_activity = new stdClass();
	$new_activity->type = 'pi_activity';
	$output .= drupal_get_form('pi_activity_form', $new_activity);

	return $output;
}

/**
 * General form form for activity editing using drupal forms API.
 * @param $form_state
 */
function pi_activity_form(&$node, $form_state) {
	$form = array();
	return $form;
}

/**
 *
 * Drupal API hook_form_alter(), to take away group membership if form is in an activity and
 * move menu options
 * @param &$form
 * @param &$form_state
 */
function pi_activity_form_alter(&$form, &$form_state, $form_id) {
	// This is for altering the actual activity form
	if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id)
		pi_activity_form_node_form_alter($form, $form_state);

	// This is for altering the activity CONTENT forms...
	// Split the string into parts to get the inquiry id if it exists...

	$path_part1 = pi_util_get_path_element(0);
	if (strcasecmp($path_part1, 'activity') === 0) {
		if ($form_id != 'pi_activity_node_from') {
			// Move the menu to the bottom of activity content forms
			$form['menu']['#weight'] = 20;
			// Hide the Group options from activity content forms
			$form['og_nodeapi']['#access'] = FALSE;

			$activity_id = pi_util_get_path_element(1);
			$target_activity = node_load($activity_id);
			if (pi_check_is_node_of_type($target_activity, 'pi_activity')) {
				$redirect_destination = 'phase'; //$target_activity->destination_after;
				if ($redirect_destination == 'phase')
					$form['#redirect'] = 'phase/' . $target_activity->phase_nid;
				elseif ($redirect_destination == 'self')
					$form['#redirect'] = "activity/$activity_id";
				$form['redirect-activity-submit'] = array('#type' => 'hidden', '#value' => $form['#redirect']);
			}
		}
	}
}

/**
 * hook_load from Drupal API
 * Returns the activity_object from pi_activity table - used in the activity menu
 * CHANGED FOR ACTIVITY_NODE VERSION
 * @param objecy (node) $node
 * @return object from db_fetch_object() for pi_activity table
 */
function pi_activity_load($node) {
	$query = "SELECT * FROM {pi_activity} WHERE `nid` = %d";
	$result = db_query($query, $node->nid);
	$activity = db_fetch_object($result);

	return $activity;
}

/**
 *
 * hook_insert() implementation for pi_activity node
 * @param $node
 */
function pi_activity_insert($node) {
	// It is necessary to update the following tables:
	//   * pi_activity
	//   * pi_activity_stage_state
	//   * pi_activity_status
	//   * pi_activity_node
	// First update the pi_activity table
	$pi_activity_row = _pi_activity_form_data_to_pi_activity_row($node);
	$write_result = drupal_write_record('pi_activity', $pi_activity_row);

	if ($write_result == FALSE) {
		drupal_set_message(t('Error saving new pi_activity data'), 'error');
	}
}

function pi_activity_theme() {
	return array(
			'pi_activity_display_shared_content_node' => array(
					'arguments' => array('activity_node' => NULL, 'actor_id' => NULL, 'node' => NULL, 'teaser' => FALSE),
					'file' => 'pi_activity.activity.inc',
			),
			'pi_activity_display_contribution_content_node' => array(
					'arguments' => array('activity_collaboration' => '', 'content_node' => NULL, 'content_actor' => NULL, 'viewer_collaboration' => ''),
					'file' => 'pi_activity.activity.inc',
			),
	);
}

/**
 *
 * Drupal API hook_update() function for pi_activity
 * @param $node
 */
function pi_activity_update($node) {
	$activity_row_data = _pi_activity_form_data_to_pi_activity_row($node);
	$update_result = drupal_write_record('pi_activity', $activity_row_data, array('nid'));

	if ($update_result == FALSE)
		drupal_set_message('Error: Activity data not saved due to database problem; try saving again.', 'error');
}

/**
 *
 * Take the data from $node provided by drupal API to and turn it into an object that can be saved using
 * drupal_write_record()
 * @param $node
 */
function _pi_activity_form_data_to_pi_activity_row($node) {
	$data_to_save = new StdClass();

	$property_to_column = array(
			'nid' => 'nid',
			'vid' => 'vid',
			'activity_type' => 'activity_type',
			'node_type' => 'node_type',
			'parameters' => 'parameters',
			'script_activity' => 'script_activity',
			'parent_activity' => 'parent_activity',
			'phase_nid' => 'phase_nid',
			'show_children_in_phase' => 'show_children_in_phase',
	);

	foreach ($property_to_column as $column => $property) {
		$data_to_save->$column = $node->$property;
	}

	return $data_to_save;
}

function pi_activity_delete(&$node) {

	node_delete($node->referenced_content);
	$content_result = db_query("SELECT nid FROM {pi_activity_node} WHERE activity_id=%d", $node->nid);
	while ($content_row = db_fetch_array($content_result)) {
		node_delete($content_row['nid']);
	}

	db_query("DELETE FROM {pi_activity} WHERE nid = %d AND vid = %d", $node->nid, $node->vid);
	db_query("DELETE FROM {pi_activity_node} WHERE activity_id = %d", $node->nid);
	db_query("DELETE FROM {pi_activity_share} WHERE activity_id = %d", $node->nid);

	$children_result = db_query("SELECT {node}.nid FROM {node} LEFT JOIN {pi_activity} ON node.vid=pi_activity.vid WHERE pi_activity.parent_activity=%d", $node->nid);
	while ($child_row = db_fetch_array($children_result)) {
		node_delete($child_row['nid']);
	}

	$custom_delete_function = "{$node->activity_type}_delete_activity";
	if (function_exists($custom_delete_function)) {
		$custom_delete_function($node);
	}
}

/*
 * activity teaser
 */

function pi_activity_teaser($activity) {
	include_once 'pi_activity.activity.inc';
	return pi_activity_content_view($activity, 'view', TRUE);
}

function pi_activity_shared_content_list($activity) {
	include_once 'pi_activity.activity.inc';
	return pi_activity_shared_content_list_view($activity);
}

/**
 * Implementation of hook_nodeapi to add specific nQuire data when nodes are changed
 *  This function sets/updates activity data when activity content nodes are created, updated or deleted
 *  though the activity system
 * @param $node
 * @param $op
 */
function pi_activity_nodeapi(&$node, $op) {
	if ($node->type != 'image' && $node->type != 'pi_activity') {
		if (in_array($op, array('insert', 'update', 'delete'))) {
			// If this is a node, check whether it's part of an activity
			// first check the database, then look at the URL
			$activity_nid = pi_activity_get_activity_nid_for_content_nid($node->nid);
			if ($activity_nid == NULL) {
				//Node not associated to an activity in the database yet, so check url also
				// Split the string into parts to get the inquiry id if it exists...
				$path_parts = pi_util_get_drupal_path_parts();
				if (strcasecmp($path_parts[0], 'activity') === 0) {
					if (is_numeric($path_parts[1]))
						$activity_nid = $path_parts[1];
				}
			}
			// Presuming the referred activity id checks out then update it as needed
			$activity = node_load($activity_nid);
			if (pi_check_is_node_of_type($activity, 'pi_activity')) {
				// Set PI activity node
				$node_types_to_create_activity_for = array(
						//'pi_available_measures', // depends on whether the measure is part of the script
						'pi_key_questions',
						'pi_key_answers',
						'pi_result_presentations',
						'pi_data',
				);


				switch ($op) {
					case 'insert':
						//new content saved
						switch ($node->type) {
							case 'pi_available_measures':
								break;
							case 'pi_key_questions':
								$node->title = pi_util_trim_text($node->key_question);
								break;
							case 'pi_key_answers':
								$node->title = pi_util_trim_text($node->key_answer);
								break;
							default:
								break;
						}

						if (in_array($node->type, $node_types_to_create_activity_for) ||
										($node->type === 'pi_available_measures' && !$node->script_measure)) {
							pi_activity_add_new_activity_for_activity_content_node($node, $activity);
						} else {
							pi_activity_link_content_with_activity($node, $activity->nid);
						}
						break;
					case 'update':
						switch ($node->type) {
							case 'pi_available_measures':
								pi_util_set_node_title($activity, $node->title);
								break;
							case 'pi_key_answers':
								$node->title = pi_util_trim_text($node->key_answer);
								$activity->title = pi_util_trim_text($node->key_answer);
								break;
							case 'pi_key_questions':

								pi_util_set_node_title($activity, $node->key_question);

								break;
							case 'pi_result_presentations':
								$activity->title = pi_util_trim_text($node->title);
								break;
							case 'pi_data':
								$activity->title = pi_util_trim_text($node->title);
								break;
						}
						break;
					case 'delete':
						//delete existing activity if it's got a parent activity
						if (pi_check_node_exists_and_is_of_type($activity->parent_activity, 'pi_activity')) {
							node_delete($activity_nid);
						}

						db_query('DELETE FROM pi_activity_node WHERE nid=%d', $node->nid);
						break;
				}
			}
		}
	}
}

// ---------------------------------------------------------------------------

/**
 * Return the activity_id of an "Add $whatever"n activity for a given "Sort $whatever" function, if not return NULL
 * @param unknown_type $inquiry_nid The inquiry id that the activity belongs to
 * @param unknown_type $activity_ind The "Sort $whatever" activity id for the add activity.
 * @param unknown_type $uid The user id to find the add activity id for.
 */
function pi_activity_get_add_activity_for_sort_activity($activity_id) {
	$sort_activity = node_load($activity_id);

	if ($sort_activity != FALSE) {
		$type = node_get_types('type', $sort_activity->activity_type);

		$query = "SELECT {pi_activity}.`nid` FROM {pi_activity} WHERE parent_activity=%d AND activity_type='%s' AND referenced_node IS NULL AND script_activity=1";
		$result = db_query($query, $activity_id, $type->add_node_type);
		$row = db_fetch_array($result);
		if ($row) {
			return $row['nid'];
		}
	}

	return NULL;
	//return $return_value;
}

/**
 * Returns an array of nids of a node type available
 * to a user for a given inquiry
 * @param uint $uid The user to which the nodes are availeable
 * @param uint $inquiry_id the inquiry id that the nodes belong to
 * @param string $type the node type to search for e.g. 'pi_data'
 *
 */
function pi_activity_get_available_nids_of_type($uid, $inquiry_id, $node_type) {
	$return_nids = array();

	$query = "SELECT DISTINCT {node}.`nid` as nid FROM {node} AS node " .
					"LEFT JOIN {node_access} node_access ON node.`nid` = node_access.`nid` " .
					"LEFT JOIN {og_uid} og_uid ON node_access.`gid` = og_uid.`nid` " .
					"LEFT JOIN {pi_activity_node} pi_activity_node ON pi_activity_node.`nid` = node.`nid`  " .
					"LEFT JOIN {pi_activity} pi_activity ON pi_activity_node.`activity_id` = pi_activity.`nid`  " .
					"LEFT JOIN {pi_phase} pi_phase ON pi_activity.`phase_nid` = pi_phase.`nid` " .
					"WHERE TYPE = '%s'  AND pi_phase.`inquiry_nid` = %d " .
					"AND STATUS = '1' AND ((node.`uid` = %d) OR (og_uid.`uid` = %d) )";
	$result = db_query($query, $node_type, $inquiry_id, $uid, $uid);
	while ($row = db_fetch_object($result)) {
		$return_nids[] = $row->nid;
	}
	return $return_nids;
}

/**
 * This function takes an array of nids, loads the node and then maps the
 * node attributes to fields as per the key and value of $field_maping
 * if the node cann't be loaded it is dropped from the array therefore
 * if this is of concern to you, you should check array_keys($results)
 * with $nids
 * @param $nids array(uint) nids to get data from
 * @param $field_mapping mapping of node attribute to field e.g. array('weight' => '#weight')
 * @return array [nid][{field_mapping_value}] node->{field_mapping_key}
 */
function pi_activity_map_fields_from_nids($nids, $field_mapping) {
	$result = array();
	foreach ($nids as $nid) {
		$node_fields = NULL;
		$node = node_load($nid);
		if ($node != FALSE) {
			$node_fields = array();
			foreach ($field_mapping as $field => $mapping) {
				$node_fields[$mapping] = $node->$field;
			}
		}
		$result[$nid] = $node_fields;
	}
	return $result;
}

/**
 * This function uses hook_form_alter() to set the redirect when adding/editing
 *  activity conent via nQuire  (detected via checking the url)
 *  n.b. since hook_form_node_form_alter doesn't work in D6 this is called from
 *  hook_form_alter() above, but here just for conveneince of seperating out things
 * This deas with this curcumstance:
 *  (2) Adding/Editing Activity Content  via /activity/%activity/edit
 *    -> redirect to /activity/%activity/phase on completion is specified in activity node details
 */
function pi_activity_form_node_form_alter(&$form, &$form_state) {
	//Strip the request url of the preceeding drupal stuff base_url and ?q=/
	// so that it's possible to work out whether the page request was from /inquiry/%inquiry/phase/add
	// or from /node/%node/edit
	$path_parts = pi_util_get_drupal_path_parts();
	//if AHAH helper is used, then redirect is cleared, so reset it here....
	if (pi_util_match_url(array('ahah_helper')))
		$form['#redirect'] = $form_state['storage']['redirect-activity-submit'];

	// Look for /activity/{number}/edit
	if (pi_util_match_url(array('activity', NULL, NULL))) {
		if (is_numeric($path_parts[1])) {
			$potential_activity_id = $path_parts[1];

			// the last part of the url is a special case since it could be either
			// /activity/%activity/edit OR
			// /activity/%activity/edit?some=query&string=too OR
			// /activity/%activity/edit&some=query&string=too
			$valid_strings = array('edit', 'edit?', 'edit&');
			if (in_array(strtolower($path_parts[2]), $valid_strings)) {
				//Set the destination from activity details
				$activity = node_load($potential_activity_id);
				if (pi_check_is_node_of_type($activity, 'pi_activity')) {
					$destination = $activity->destination_after;
					if ($destination == 'phase') {
						$form['#redirect'] = "phase/" . $activity->phase_nid;
					} elseif ($destination == 'self') {
						$form['#redirect'] = "activity/$potential_activity_id";
					}
					$form['redirect-activity-submit'] = array('#type' => 'hidden', '#value' => $form['#redirect']);
				} else {
					// It wasn't a valid inquiry node, so fall back to standard phase editing page
					drupal_set_message(t("An activity nid (@nid) was specified for this activity, but the id didn't refer to a valid activity node.", array("@nid" => $potential_activity_id)), 'warning');
				}
			}
		}
	}
	// Look for /activity/{number}/edit
	if (pi_util_match_url(array('inquiry', NULL, 'activity', 'add')) || pi_util_match_url(array('inquiry', NULL, 'activity', 'edit'))) {
		$activity = node_load($potential_activity_id);
		if (pi_check_is_node_of_type($activity, 'pi_activity')) {
			
		}
		$form['#redirect'] = "activity/";
	}
}

function pi_activity_shared_content_view_access($activity_node, $actor) {
	$access_value = FALSE;

	$access_data = pi_inquiry_groupings_get_access_data();
	$activity_data = $access_data->get_activity($activity_node->nid);
	if ($activity_data) {
		$query = "SELECT share FROM pi_activity_share WHERE activity_id=%d AND actor=%d";
		$row = db_fetch_array(db_query($query, $activity_node->nid, $actor));

		if ($row) {
			$access_value = $row['share'];
		} else if ($activity_data['collaboration'] === 'individual') {
			$access_value = 'individual_group';
		}
	}

	switch ($access_value) {
		case 'group_all':
		case 'individual_all':
			return TRUE;
		case 'individual_group':
			return in_array($actor, nquire_group_get_member_uids($access_data->get_subgroup()));
		default:
			return FALSE;
	}
}