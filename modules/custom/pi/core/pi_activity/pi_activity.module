<?php
// $Id: pi_activity.info,  2010/05/21  MCP $


module_load_include('inc', 'pi_activity', 'pi_activity.workflow' );
module_load_include('inc', 'pi_activity', 'pi_activity.extra' );

/**
 *
 * This functions returns the information for the activity node
 * Function used by the drupal system
 */
function pi_activity_node_info()
{
  return array(
  	'pi_activity' => array(
      'name' => t('Inquiry Activity'), // Required.
      'module' => 'pi_activity',  // Required.
      'description' => t('Activities are plans for work that students do within nQuire'), // Required.
      'has_title' => TRUE,
      'title_label' => t('Activity name'),
      'has_body' => TRUE,
      'body_label' => t('Description of the activity'),
      'locked' => TRUE
  )
  );
}

/**
 *
 * Drupal API hook_perm() implemetaiton to define available permissions for activity node type
 */
function pi_activity_perm()
{
  return array('create activity', 'edit own activity', 'edit any activity', 'delete own activity', 'delete any activity');
}

/**
 *
 * Drupal API hook_accesss
 * @param unknown_type $op
 * @param unknown_type $node
 * @param unknown_type $account
 */
function pi_activity_access($op, $node, $account)
{
  //@toto - what to do here - check related inquiry/stage/phase for the activity
  // and make sure all the users/actors/audience stuff is valid
  return true;
}

/**
 * Access callback for pi_activities under the url activity/%
 * @param uint $activity_id the id of the activity being accessed
 * @param uint $op the function to perform on the activity (view/add/edit)
 * @return TRUE or FALSE to indicate whether access is allowed for that function
 */
function pi_activity_item_access($activity, $op) {
  $return_value = false;
  if(isset($activity->activity_id))
  {
    global $user;
    $details = get_inquiry_details_from_current_path();
    $return_value = check_node_function_of_activity($details->inquiry_id, $activity->activity_id, $user->uid, $op);
    if(($return_value===false) && ($op=='view'))
    {
      $return_value = check_node_function_of_activity($details->inquiry_id, $activity->activity_id, $user->uid, 'edit');
    }
    if(($return_value===false) && ($op=='add'))
    {
      $possible_add_nid = pi_activity_get_add_activity_for_sort_activity($details->inquiry_id, $activity->activity_id, $user->uid);
      if( $possible_add_nid !== NULL)
      {
        $return_value = true;
      }
    }
  }
  return $return_value;
}

/**
 * hook_menu() for pi_activity defining all the activity/% menu callbacks, etc
 * @return array of menu items as per drupal 6 api
 */
function pi_activity_menu() {
  $items = array();
  $items['activity/%pi_activity'] = array(
		'title' => 'View',
		'file' => 'pi_activity.activity.inc',
		'page callback' => 'pi_activity_view',
		'page arguments' => array(1, 'view'),
		'access callback' => 'pi_activity_item_access',
		'access arguments' => array(1, 'view'),
		'type' => MENU_CALLBACK
  );

  $items['activity/%pi_activity/view'] = array(
		'title' => 'View',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0
  );

  $items['activity/%pi_activity/edit'] = array(
		'title' => 'Edit',
		'file' => 'pi_activity.activity.inc', 
		'page callback' => 'pi_activity_view',
		'page arguments' => array(1, 'edit'),
		'access callback' => 'pi_activity_item_access',
		'access arguments' => array(1, 'edit'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1
  );

  $items['activity/%pi_activity/add'] = array(
		'title' => 'Add',
		'file' => 'pi_activity.activity.inc', 
		'page callback' => 'pi_activity_view',
		'page arguments' => array(1, 'add'),
		'access callback' => 'pi_activity_item_access',
		'access arguments' => array(1, 'add'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 2
  );

  $items['activity/%pi_activity/admin'] = array(
		'title' => 'Admin',
		'file' => 'pi_activity.admin.inc', 
		'page callback' => 'pi_activity_content',
		'page arguments' => array(1),
		'access_callback' => 'user_access',
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 3
  );

  $items['activity/%pi_activity/admin/content'] = array(
		'title' => 'View Activity Content',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0
  );

  $items['activity/%pi_activity/admin/edit'] = array(
		'title' => 'Edit Activity',
		'file' => 'pi_activity.admin.inc', 
		'page callback' => 'pi_activity_edit',
		'page arguments' => array(1),
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1
  );

  $items['activity/%pi_activity/admin/view/%node'] = array(
		'title' => 'Edit Activity',
		'file' => 'pi_activity.admin.inc', 
		'page callback' => 'pi_activity_admin_view_node',
		'page arguments' => array(1, 4),
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_CALLBACK,
		'weight' => 1
  );

  // NOTE: If you change the url below also change pi_activity_form_pi_activity_form_alter()
  $items['admin/nquire/activity'] = array(
		'title' => 'Add an Activity to an Inquiry',
		'description' => 'This allows you to directly add an activity to an inquiry, selecting the phase and stages it belongs to.',
		'page callback' => 'pi_activity_add',
		'type' => MENU_NORMAL_ITEM,
		'access arguments' => array('administer site configuration'),
		'weight' => 4,
  );

  return $items;
}

/**
 * This page is the standard activity authoring page that is currently linked to from admin/nquire
 * It calls pi_activity_form which will be rewritten in pi_activity_pi_activity_form_alter where it will
 * be redirected to it's calling location where necessary
 */
function pi_activity_add()
{
  $output = '';

  $output = t("<p>Use this page to add an activity to an inquiry - select the activity, then the phase and then the phases that it will be incuded in." .
			 	" For each stage you wil have to choose how it will be made available: as either <i>unavailable</i>, " . 
				"<i>startable</i>, <i>editable</i> or <i>viewable</i>.");	
  $new_activity = new stdClass();
  $new_activity->type = 'pi_activity';
  $output .= drupal_get_form('pi_activity_form', $new_activity);

  return $output;
}

/**
 * General form form for activity editing using drupal forms API.
 * @param $form_state
 */
function pi_activity_form(&$node, $form_state) {
  /* construct form to edit the details of an activity
   * inc. pi_activity, pi_activity_status, pi_activity_actor & pi_stage_phase_activity tables
   */
  $form = array();
  $type = node_get_types('type', $node);

  /* First get inquiry, phase and stage locations */
  $inquiry_data = array();
  $inquiry_nids = pi_inquiry_load_nids();
  $inquiry_data = pi_util_get_names_from_nids($inquiry_nids);

  $inquiry_options = array('none'=>t('Select an inquiry for this activity'));
  foreach($inquiry_data as $inquiry_nid => $inquiry_name)
  {
    $inquiry_options[$inquiry_nid] = $inquiry_name;
  }

  pi_util_get_names_from_nids($inquiry_nids);
  if(count($inquiry_data)==0)
  {
    drupal_set_message('There are no inquiries defined, please create an inquiry before defining phases.', 'error');
  }

  //This section allows a dynamic list of stages to appear on the form to allow
  // pi_stage_phase links to be created at the same time as a stage.
  // This uses the ahah_helper module
  ahah_helper_register($form, $form_state);
  
  
  if($node->phase_nid!=NULL)
  {
    $phase = node_load($node->phase_nid);
    if($phase!=FALSE)
    {
      if($phase->inquiry_nid!=NULL)
      {
        if(array_key_exists($phase->inquiry_nid, $inquiry_options))
        {
          $node->inquiry_nid = $phase->inquiry_nid;
        }
      }
      
    }
  }
  
  // If there's no value in storage and the node has one set, then use that
  if(isset($node->inquiry_nid) && !isset($form_state['storage']['inquiry_nid']))
  {
    $inquiry_nid_default_value = $node->inquiry_nid;
  }
  else
  {
    //If there's a value in storage use that
    if(isset($form_state['storage']['inquiry_nid']))
    {
      $inquiry_nid_default_value =  $form_state['storage']['inquiry_nid'];
    }
    else
    {
      //Otherwise, use 'none'
      $inquiry_nid_default_value = 'none';
    }
  }
  
  $form['inquiry_nid'] = array(
    '#type' => 'select',
    '#title' => t('Inquiry for stage'),
    '#required' => TRUE,
    '#weight' => -20,
    '#options' => $inquiry_options,
    '#allowed_inquiry_nids' => $inquiry_nids,
    '#default_value' => $inquiry_nid_default_value,
    '#element_validate' => array('pi_util_inquiry_nid_validate'),
    '#ahah' => array(
      'path'    => ahah_helper_path(array('activity_phases_stages')),
      'wrapper' => 'activity-phases-stages-wrapper',
    ),
    //this fixes some layout issues with the ahah throbber
    //'#attributes' => array('style'=>'overflow:auto;border: thin solid black;'),
    '#prefix' => "<div style='min-height:40px;'>",
    '#suffix' => '</div>'
  );

  //This uses the generic submit callback provided by the ahah_helper module here
  // Is sets $form_state['rebuild'] = TRUE.
  // 'no-js' class is set so that the submit button will be shown if JS is disabled.
  $form['inquiry_nid']['update_usage'] = array(
    '#type'  => 'submit',
    '#value' => t('Update phase list'),
    '#weight' => -2,
    '#submit' => array('ahah_helper_generic_submit'),
    '#attributes' => array('class' => 'no-js'),
  );

  $form['activity_phases_stages'] = array(
    '#tree' => true,
	'#weight' => -9,
    '#prefix' => "<div id='activity-phases-stages-wrapper'>",
    '#suffix' => '</div>'  
  );

  $form['activity_phases_stages']['phase_nid'] = _pi_activity_form_generate_phase_select($inquiry_nid_default_value, $node->phase_nid);

  $stages_default_value = array();
  if(is_array($form_state['storage']['activity_phases_stages']['stages']))
  {
    $stages_default_value = $form['storage']['activity_phases_stages']['stages'];
  }
  else
  {
    $stages_default_value = $node->activity_phases_stages['stages'];   
  }
  $form['activity_phases_stages']['stages'] = _pi_activity_form_generate_stage_select($inquiry_nid_default_value, $stages_default_value);


  /* Now the activity inquiry/phase/stages are decided get the rest of the details, title, type, description, etc */
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#weight' => -8,
    '#description' => t('This is the title of the activity that will appear as the activity link in the phase view.'),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );

    //activity and node type query
  $node_types = node_get_types('names');
  if(is_array($node_types))
  {
    $node_type_options = array('none'=>t('Select activity type...'));
    foreach($node_types as $node_type => $name)
    {
      $node_type_options[$node_type] = $name;
      $allowed_activity_types = array_keys($node_types);
    }
  }
  else
  {
    $node_type_options = array('none' => t('No activity types available, please check nQuire is correctly installed'));
    $allowed_activity_types = array();
  }

  $form['activity_type'] = array(
    '#type' => 'select',
    '#title' => t('Activity Type'),
    '#required' => true,
    '#description' => t('Choose the type of activity you want to place into the inquiry from this list.'),
    '#weight' => -7,
    '#options' => $node_type_options,
    '#default_value' => $node->activity_type,
    '#allowed_activity_types' => $allowed_activity_types,
  );

  $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  $form['body_field']['#weight'] = -6;
  $form['body_field']['#description'] = t('For some activity types the description will be shown at the top of the page (for example in the Hypothesis activity). Enter it here.');
  $form['body_field']['body']['#rows'] = 6;
  $form['body_field']['teaser_include']['#access'] = FALSE;

  $form['node_type'] = array(
  	'#type' => 'select',
  	'#title' => t('Node Type'),
  	'#required' => true,
  	'#weight' => -8,
  	'#options' => $node_type_options,
  	'#default_value' => $node->node_type,
  	'#description' => t('Some activities will create content of different types, but unless you know otherwise choose the same as the Activity Type.')
  );

  $form['parameters'] = array(
    '#type' => 'textfield',
    '#title' => t('Parameters'),
    '#weight' => 7,
    '#default_value' => $node->parameters,
    '#description' => t('Some activities need special parameters, but unless you know otherwise leave this blank.')
  );

  $destination_option = array('phase'=>'phase','self'=>'self',);

  $form['destination_after'] = array(
    '#type' => 'select',
    '#title' => t('Destination After Completing the Activity (self or phase)'),
    '#required' => true,
    '#weight' => 8,
    '#options' => $destination_option,
    '#default_value' => $result->destination,
    '#description' => t('When someone completes an activity and saves it, they can go back to the phase view, or stay on the activity page (self), so choose which one here.')
  );

  $form['groups'] = array(
    '#type' => 'fieldset',
    '#title' => t('Set up who works on and who can see the results of this activity'),
    '#weight' => 9,
    '#description' => t('First choose the audience: this determines how widely the results are shared.  Then select the group containing who you want to do the activity.')
  );

  //pi_activity_status table
  $query2 = "SELECT * FROM {pi_activity_status} WHERE activity_id = %d";
  $result2 = db_fetch_object(db_query($query2, $node->nid));

  $defined_groups = pi_flatten_grouped_item_list(pi_get_defined_group_nids());
  $group_options = array('none' => 'Select actor group...') +  pi_util_get_names_from_nids(array_keys($defined_groups));
  $form['groups']['selects'] = array(
    '#tree' => true,
    '#theme' => 'pi_util_form_elements_float',
  );

  $activity_audience_types = array(
    'none' => t('Select audience setting...'),
    'individual' => t("Don't share (Individual activity)"),
    'group' => t('Share with group'),
    'class' => t('Share with class'),
    'multiclass' => t('Share with multiclass')
    );

    
  if(isset($form_state['storage']['selects']['audience']))
  {
    $default_audience = $form_state['storage']['selects']['audience'];
  }
  else
  {
    $default_audience = $node->audience;
  }
  $form['groups']['selects']['audience'] = array(
    '#type' => 'select',
    '#title' => t('Activity Audience'),
    '#weight' => 1,
    '#options' => $activity_audience_types,
    '#default_value' => $default_audience,
    '#prefix' => "<div style='min-height:40px;'>",
    '#suffix' => '</div>',
    '#ahah' => array(
      'path'    => ahah_helper_path(array('groups', 'info')),
      'wrapper' => 'groups-info-wrapper',
    ),
    '#prefix' => "<div style='min-height:40px;'>",
    '#suffix' => '</div>'		
  );

  if(isset($form_state['storage']['selects']['gid']))
  {
    $default_actor = $form_state['storage']['selects']['gid'];
  }
  else
  {
    $default_actor = $node->actor;
  }
  
  $form['groups']['selects']['gid'] = array(
    '#type' => 'select',
    '#title' => t('Activity Group'),
    '#weight' => 2,
    '#options' => $group_options,
    '#default_value' => $default_actor,
    '#ahah' => array(
      'path'    => ahah_helper_path(array('groups', 'info')),
      'wrapper' => 'groups-info-wrapper',
    ),
    '#prefix' => "<div style='min-height:40px;'>",
      '#suffix' => '</div>'		
  );

  $explanation_value = _pi_activity_explain_actor_and_audience($default_actor, $default_audience);
  $form['groups']['info'] = array(
    '#type' => 'item',
    '#weight' => 3,
    '#value' => $explanation_value,
    '#prefix' => "<div id='groups-info-wrapper' style='clear:left;'>",
    '#suffix' => '</div>'		
  );


  $node_function_options = array('add'=>'add','edit'=>'edit','view'=>'view',);
  $form['node_function'] = array(
    '#type' => 'select',
    '#title' => t('Node Function'),
    '#weight' => 11,	
    '#options' => $node_function_options,
    '#default_value' => $node->node_function,
  );

  $visible_status_options = array(
    'start'=>'start',
    'in_progress'=>'in_progress',
    'view'=>'view',
    'unavailable'=>'unavailable'
  );

  $form['visible_status'] = array(
	'#type' => 'select',
    '#title' => t('Visible Status'),
    '#options' => $visible_status_options,
    '#weight' => 12,
    '#default_value' => $result2->visible_status,
  );

  //nid options
  $query = "SELECT nid, title, type FROM {node}";
  $result = db_query($query);
  $referenced_node_options = array();
  //first is none -> is 0 as no nid is 0 they always start at 1
  $referenced_node_options['none'] = 'none';
  $max_string_length = 40;
  while($referenced_node_option = db_fetch_object($result))
  {
    if(strlen($referenced_node_option->title) > $max_string_length)
    {
      $referenced_node_name = substr($referenced_node_option->title, 0, $max_string_length) . '...';
    }
    else
    {
      $referenced_node_name = $referenced_node_option->title;
    }
    $referenced_node_options[$referenced_node_option->nid] =  $referenced_node_name . ": " . $referenced_node_option->nid . " (" . $referenced_node_option->type . ")";
  }

  $query = "SELECT nid FROM {pi_activity_node} WHERE activity_id = %d";
  $referenced_node = db_fetch_object(db_query($query, $node->nid));
  if($referenced_node==NULL)
  {
    $referenced_node_id = 'none';
  }
   else
  {
    $referenced_node_id = $referenced_node->nid;
  }

  $form['existing_nid'] = array(
    '#type' => 'select',
  	'#title' => t('Does The Activity Refer To An Existing Node? I.e. if you have selected view in view_type then to which node do you want to view?'),
    '#weight' => 13,
    '#options' => $referenced_node_options,
    '#default_value' => $referenced_node_id
  );
  return $form;
}


/**
 *
 * Drupal API hook_form_FORM-ID_alter(), changes the form to alter the default node layout
 * @param &$form
 * @param &$form_state
 */
function pi_activity_form_pi_activity_node_form_alter(&$form, &$form_state) {
  $form['menu']['#weight'] = 10;
  if (isset($form_state['post']))
  {
    ahah_helper_register($form, $form_state);
    if ($form_state['submitted'])
    {
      $form['groups']['info']['#prefix'] = '';
      $form['groups']['info']['#suffix'] = '';
      $form['activity_phases_stages']['#prefix'] = '';
      $form['activity_phases_stages']['#suffix'] = '';      
    }
  }
  // ISSUE 2: content cannot be saved by another user
  /**
  * @TODO: Figure out the main cause why this happens. It has something
  * to do with staying on the node form instead of redirecting to the view.
  **/
  $form['changed']['#default_value'] = $_SERVER['REQUEST_TIME'];
}


/**
 * Generate the ['activity_phases']['stages'] checkbox list for a given inquiry nid.
 * this is used in this module and also called by pi_authoring using hook_form_FORM-ID_alter()
 * as it can't run the ahah call do do this
 * @param uint $inquiry_nid nid of the inquiry to show generate boxes for or 'none' for blank
 * @return array describing the checkboxes form element
 */
function _pi_activity_form_generate_phase_select($inquiry_nid, $default_value='none')
{
  // Based on the selection above generate the select boxes for phases
  $phase_select_options = array('none' => t('Select the phase for this activity...'));
  if($inquiry_nid != 'none')
  {
    $inquiry_phase_nids = pi_phase_load_nids($inquiry_nid);
    $phase_names = pi_util_get_names_from_nids($inquiry_phase_nids);
    foreach($phase_names as $phase_nid => $name)
    {
      $phase_select_options[$phase_nid] = $name;
    }
  }
  else
  {
    //if there is no inquiry selected then there are no phases to select
    $inquiry_phase_nids = array();
  }

  $form_element =  array(
    '#type' => 'select',
    '#title' => t('Select phase for activity'),
      '#weight' => 2,
    '#required' => true,
    '#options' => $phase_select_options,
    '#allowed_phase_nids' => $inquiry_phase_nids,
    '#default_value' => $default_value,
    '#element_validate' => array('pi_util_phase_nid_validate'),
  );
  return $form_element;
}


/**
 * Generate the ['activity_phases']['stages'] checkboxes list for a given inquiry nid.
 * this is used in this module and also called by pi_authoring using hook_form_FORM-ID_alter()
 * as it can't run the ahah call do do this
 * @param uint $inquiry_nid nid of the inquiry to show generate boxes for or 'none' for blank
 * @return array describing the checkboxes form element
 */
function _pi_activity_form_generate_stage_select($inquiry_nid, $default_values=array())
{
  $elements_to_return = array(
    '#type' => 'fieldset',
    '#title' =>  t('Select the stages this activity appears in'),
    '#required' => true,
    '#weight' => 3,
  );

  $stage_boxes = array();
  $stage_options = array();
  $default_stage_options = array();

  if( ($inquiry_nid != 'none') && ( $inquiry_nid != NULL ) )
  {
    $inquiry_stage_nids = pi_stage_load_nids($inquiry_nid);
    $stage_names = pi_util_get_names_from_nids($inquiry_stage_nids);
    if(count($stage_names)==0)
    {
      $description = t('There are no stages defined for this inquiry yet.');
    }
    else
    {
      //pi_debug_message($default_values);  
      foreach ($stage_names as $stage_nid => $name)
      {
        $stage_options[$stage_nid] = $name;
        if($default_values[$stage_nid]=='visible')
        {
          $default_stage_options[$stage_nid] = $stage_nid;
        }
      }
      $description = t('The activity will only be visible to people in the selected stages.');
    }
  }
  else
  {
    $description = t("Select an inquiry to see it's stages.");
  }
   

  // Based on the selection above generate the select boxes for phases
  $elements_to_return['stage_select'] = array(
    '#type' => 'checkboxes',
    '#required' => true,
    '#options' => $stage_options,
    '#default_value' => $default_stage_options,
    '#theme' => 'pi_util_form_elements_float'
    );

    $elements_to_return['info'] = array(
    '#type' => 'item',
    '#value' => $description,
    '#prefix' => "<div style='clear:left;'>",
    '#suffix' => "</div>"  
    );

    return $elements_to_return;
}

/**
 *
 * Generate an explanation of exactly who works on and who will see the result of an activity
 * given the actor group id and the audiance group type
 * @param uint $actor_gid gid of a valid group within nQuire (an og_group with class/group/multiclass definition)
 * @param string $audience_group_type one of individual, group, class, or multiclass
 */
function _pi_activity_explain_actor_and_audience($actor_gid, $audience_group_type)
{
  if( ($group!=FALSE) && array_key_exists($audience_group_type, $group_values))
  {
    $activity_setting = _pi_activity_get_actor_audience_type($actor_gid, $audience_group_type);
    
    $actor_group_type = pi_get_type_of_group($actor_gid);    
    $group_members = pi_get_members_of_group($actor_gid);
    $group_members_list = pi_group_get_name_list($actor_gid);
    
    $setting_preview=array();
      // Now the type of activity actor/audience has been established, print the appropriate
      // explanation messages.
    switch($activity_setting)
    {
      case 'done_as_individuals_in_group_not_shared':
        //If audience is individual then everyone in the target group will create
        // their own activity content and it wont be shared.
        $setting_explanation = t("The members of the selected @group_type '%group_name' will do this activity individually and the results will not be shared.",
        array(
            '@group_type'=> $actor_group_type,
            '%group_name'=> $group->title
          )
        );
        $setting_preview[] = t("Members of the @group_type are: %names",
        array(
            '@group_type'=> $actor_group_type,
            '%names' => $group_members_list
          )
        );
        break;
           
        case 'done_as_single_group_not_shared':
          $setting_explanation = t("This activity will be done as a %actor_group_type by %actor_group_type '%group_name'.",
            array(
                '%actor_group_type' => $actor_group_type,
                '%group_name'=> $group->title
            )
          );
          $setting_preview[] = t("One shared result for %group_name (%names).",
            array(
                '%group_name'=> $group->title,
                '%names' => $group_members_list
            )
          );
          break;
        case 'done_by_all_groups_in_larger_group_not_shared':
          // If audience is group then activity will be done as a group and shared within the specified audience group type
          // All the groups of nquire group type 'group' within the selected group will do one item of content
          $setting_explanation = t("The activity will be done by each @audience_group_type within the @group_type '%group_name'.",
            array(
                '@audience_group_type'=> $audience_group_type,
                '@group_type'=> $actor_group_type,
                '%group_name'=> $group->title,
            )
          );
        // Need to get all audience group within the hierarchy of the selected actor group.
        $associated_groups = pi_groups_get_associated_groups($actor_gid, $audience_group_type);
        $group_names = pi_util_get_names_from_nids($associated_groups);
        foreach($group_names as $group_id => $group_name)
        {
          $setting_preview[] = t("One shared result for @audience_group_type '%group_name' (%names).",
          array(
              '@audience_group_type'=> $audience_group_type,
              '%group_name'=> $group_name,
              '%names' => pi_group_get_name_list($group_id)
          )
          );
        }
        break;
      case 'done_by_group_shared_with_larger_group':
        $audience_id = pi_groups_get_associated_groups($actor_gid, $audience_group_type);
        // There should only be one larger group, so if more than one is returned, there's a problem
        // if 0 is returned then there is also a problem, but it's less bad as it means the parent hasn't
        // been assigned, rather than it having 2 parents (that's a DB error!).
        if(count($audience_id)==1)
        {
          $audience_group_info = pi_util_get_names_from_nids($audience_id);
          $audience_group_name = $audience_group_info[$audience_id[0]];
          $setting_explanation = t("This activity will done by @actor_group_type '%group_name' and the result will be viewable by the @audience_group_type '%audience_group_name'.",
          array(
              '@audience_group_type'=> $audience_group_type,
              '@actor_group_type'=> $actor_group_type,
              '%group_name'=> $group->title,
              '%audience_group_name'=> $audience_group_name						
          )
          );
          $setting_preview[] = t("One shared result for %group_name (%names) viewable by %audience_group_name (%audience_group_names).",
          array(
              '%group_name'=> $group->title,
              '%names' => $group_members_list,
              '%audience_group_name'=> $audience_group_name,
              '%audience_group_names'=> pi_group_get_name_list($audience_id)						
          )
          );
        }
        elseif(count($audience_id)==0)
        {
          $setting_explanation = t("This activity will done by @actor_group_type '%group_name' and the result would be viewable by the associated @audience_group_type but one has not been assigned.",
          array(
              '@actor_group_type'=> $actor_group_type,
              '%group_name'=> $group->title,
              '@audience_group_type'=> $audience_group_type,
          )
          );
          $setting_preview[] = t("One shared result for %group_name (%names) viewable by the associated @audience_group_type (not yet assigned).",
          array(
              '%group_name'=> $group->title,
              '%names' => $group_members_list,
              '@audience_group_type'=> $audience_group_type,
          )
          );
        }
        else
        {
          $setting_explanation = t("This activity will done by @actor_group_type '%group_name' and the result would be viewable by the associated @audience_group_type however there's more than one class associated with '%group_name' - please check the group hierarchy is set up correctly.",
          array(
              '@actor_group_type'=> $actor_group_type,
              '%group_name'=> $group->title,
              '@audience_group_type'=> $audience_group_type,
          )
          );
          $setting_preview[] = t("One shared result for %group_name (%names) viewable by the associated @audience_group_type (not yet assigned).",
          array(
              '%group_name'=> $group->title,
              '%names' => $group_members_list,
              '@audience_group_type'=> $audience_group_type,
          )
          );
        }
        break;
      default:
        //This bit should never be reached because the above options cover all eventualities!!
        $setting_explanation = '';
        drupal_set_message('Unexpected error in pi_activity_explain_actor_and_audience!', 'error');
        break;
    }
    $output = theme('pi_activity_form_actor_audience_explanation', $setting_explanation, $setting_preview);
  }
  else
  {
    $output = t('Select a group and audience group type to see who does and how sees the activity content.');
  }
  return $output;
}

/**
 * hook_load from Drupal API
 * Returns the activity_object from pi_activity table - used in the activity menu
 * CHANGED FOR ACTIVITY_NODE VERSION
 * @param objecy (node) $node
 * @return object from db_fetch_object() for pi_activity table
 */
function pi_activity_load($node)
{
  $query = "SELECT * FROM {pi_activity} WHERE nid = %d";
  $result = db_query($query, $node->nid);
  $activity = db_fetch_object($result);
  if ($activity!=NULL)
  {
    //map activity_id to nid fgor backward compatability
    $activity->activity_id = &$activity->nid;
    
    // map destination_after to destination - using destination in forms overrides
    // the form destination variable, and breaks  it, so this has to have a different name
    // in the form
    if ($activity->destination!=NULL)
    {
      $activity->destination = &$activity->destination_after;
    }
    
    //The constraints of the construction of the form mean that variable names are
    // also in random places in the node object, so link them to sensible places too
    $activity->activity_phases_stages = array();
    $activity->activity_phases_stages['phase_nid'] = &$activity->phase_nid;
    $activity->selects['audience'] = &$activity->audience;
    $activity->selects['gid'] = &$activity->actor;
    
    //Now get the stage states:
    $stages_result = _pi_activity_get_activity_stage_stages($node->nid);
    $stages = array();
    
    foreach($stages_result as $stage_state_row)
    {
      $stages[$stage_state_row['stage_nid']] = $stage_state_row['stage_state'];
    }
    $activity->activity_phases_stages['stages'] = $stages;
    
    //Now get the default node function and visible status from the status table
    
    $result = db_query("SELECT * from {pi_activity_status} WHERE activity_id = %d AND gid = %d",
      $node->nid, $activity->actor);
    while($row = db_fetch_array($result))
    {
      $result_rows = $row;
    }

    // There should only be one result for this...
    switch(count($result_rows))
    {
      case 0:
        $activity->visible_function = NULL;
        $activity->node_function = NULL;
      break;
      case 1:
        // This is the ideal case, so just copy the data as needed
        $activity->visible_function = $result_rows[0]['visible_status'];
        $activity->node_function = $result_rows[0]['node_function'];
      break;
      default:
        //take the first and generate a warning if more than one is found
        $activity->visible_status = $result_rows[0]['visible_status'];
        $activity->node_function = $result_rows[0]['node_function'];
        drupal_set_message(
          t("Conflicting status data for group @gid and activity @nid; the first one will be used: @function, @visible_status",
            array(
            	'@nid'=>$node->nid, '@gid'=>$activity->actor, 
            	'@function'=>$activity->node_function, '@visible_status' => $activity->visible_status),'warning')
        );
    }
    
    // Get the related node id if set: if there is a 0 node set, then use 'none' 
    $result = db_query('SELECT * FROM {pi_activity_node} WHERE activity_id = %d ORDER BY nid ASC LIMIT 1');
    $activity->existing_nid = 'none';
    if($result!=FALSE)
    {
      $row = db_fetch_array($result);
      if($row['nid']!=0)
      {
        $activity->existing_nid = $row['nid'];
      }
      $activity->existing_nid_pan_id = $row['pan_id'];
    }
    
    
  }
  else
  {
    drupal_set_message(t('Error: Activity data not found in pi_activity table'), 'error');
  }
  return $activity;
}

/**
 * 
 * hook_insert() implementation for pi_activity node
 * @param object $node
 */
function pi_activity_insert($node)
{
  // It is necessary to update the following tables:
  //   * pi_activity
  //   * pi_activity_stage_state
  //   * pi_activity_status
  //   * pi_activity_node
  
  
  // First update the pi_activity table
  $pi_activity_row = _pi_activity_form_data_to_pi_activity_row($node);
  $write_result = drupal_write_record('pi_activity', $pi_activity_row);
  if($write_result==FALSE)
  {
    drupal_set_message(t('Error saving new pi_activity data'), 'error');
  }
  
  $selected_stages = array();
  foreach($node->activity_phases_stages['stages']['stage_select'] as $stage_nid => $selected)
  {
    if($selected!=0)
    {
      $selected_stages[$stage_nid] = 'visible';
    }
  }
  
  // Now set stage_states
  foreach($selected_stages as $stage_nid => $stage_state)
  {
    $pi_activity_stage_state = array('activity_nid'=>$node->nid, 'stage_nid'=>$stage_nid, 'stage_state' => $stage_state);
    $write_result = drupal_write_record('pi_activity_stage_state', $pi_activity_stage_state);
    if($write_result==FALSE)
    {
      drupal_set_message(
        t('Error saving pi_activity stage state for stage !stage_nid',
          array('!stage_nid' => $stage_nid)
        ),
        'error'
      );
    }       
  }
  
  // now set activity_statuses - one for the main activity and one for the shared view modde part of
  // activities
  $activity_statuses_to_add = array();
  
  //Staert with the default status for all activity types
  $default_status = array(
    'activity_id'=>$node->nid,
    'uid' => NULL,
    'gid' => $node->actor,
    'node_function' => $node->node_function,
    'visible_status' => $node->visible_status
  );
  
  $activity_statuses_to_add[] = $default_status;
  
  // If it is a shared activity, then make a 'view' status for the share group
  // otherwisese just make the standard activity status for the activity.  
  $activity_actor_audience_result_type = _pi_activity_get_activity_actor_audience_result_type($node->actor, $node->audience); 
  switch($activity_actor_audience_result_type)
  {
    case 'done_as_individuals_in_group_not_shared':
      //If audience is individual then everyone in the target group will create
      // their own activity content and it wont be shared.
      // do nothing - no view status needed for any other group
      break;
         
    case 'done_as_single_group_not_shared':
    // do nothing - no view status needed for any other group        
    break;
    case 'done_by_all_groups_in_larger_group_not_shared':
      // If audience is group then activity will be done as a group and shared within the specified audience group type
      // All the groups of nquire group type 'group' within the selected group will do one item of content
      // Need to get all audience group within the hierarchy of the selected actor group.
      // do nothing - no view status needed for any other group               
    break;
    case 'done_by_group_shared_with_larger_group':
      $audience_id = pi_groups_get_associated_groups($actor_gid, $audience_group_type);
      // There should only be one larger group, so if more than one is returned, there's a problem
      // if 0 is returned then there is also a problem, but it's less bad as it means the parent hasn't
      // been assigned, rather than it having 2 parents (that's a DB error!).
      if(count($audience_id)==0)
      {
        drupal_set_message(t("Haven't set activity status to share the result of this activity as no associated group is defined for the actor group."), 'warning');
      }
      else
      {
        if(count($audience_id)>1)
        {
          drupal_set_message(t("This activity will done by @actor_group_type '%group_name' and the result would be viewable by the associated @audience_group_type however there's more than one class associated with '%group_name' - please check the group hierarchy is set up correctly.",
            array(
                '@actor_group_type'=> $actor_group_type,
                '%group_name'=> $group->title,
                '@audience_group_type'=> $audience_group_type,
            )), 'warning'
          );
        }
        foreach($audience_id as $audience_nid)
        {
          $activity_statuses_to_add[] =  array(
            'activity_id'=>$node->nid,
            'uid' => NULL,
            'gid' => $audience_nid,
            'node_function' => 'view',
            'visible_status' => 'view'
          );
        }
      }        
    break;
    default:
      //This bit should never be reached because the above options cover all eventualities!!
    break;
  }

  foreach($activity_statuses_to_add as $status)
  {
    $result = druapl_write_record('pi_activity_status', $status);
    if($result == FALSE)
    {
      drupal_set_message(
        t('Error saving pi_activity_status, node function !function, visible status !status for group !gid',
          array('!function' => $status['node_function'], '!status' => $sstatus['visible_status'], '!gid'=>$status['gid'])
          ),
        'error'
      );
    }
  }
  
    
  // Finally the related node if necessary 
  if($node->existing_nid!='none')
  {
    $activity_node = array();
    $result = druapl_write_record('pi_activity_node', $activity_node);
    if($result == FALSE)
    {
      drupal_set_message(
        t('Error saving pi_activity_node (!nid)',
          array('!nid' => $node->existing_nid)
        ),
        'error'
      );
    }
  }
  
}

/**
 * 
 * Drupal API hook_update() function for pi_activity
 * @param $node
 */
function pi_activity_update($node)
{
  $activity_row_data = _pi_activity_form_data_to_pi_activity_row($node);
  $update_result = drupal_write_record('pi_activity', $activity_row_data, array('nid', 'vid'));
  if ($update_result == FALSE)
  {
    drupal_set_message('Error: Activity data not saved due to database problem; try saving again.', 'error');
  }  
  
  // update associated pi_activity_stage_states
  // get current ones; add new ones; delete old ones
  
  $existing_stage_states = _pi_activity_get_activity_stage_states($node->nid);
  //make a list of stages and pass_ids
  $stage_state_pass_ids = array();
  foreach($existing_stage_states as $pass_id => $row)
  {
    $stage_state_pass_ids[$row['stage_nid']] = $pass_id;    
  }
  
  $selected_stages = array();
  $stage_states_to_add = array();
  $stage_state_ids_to_remove = array();
  
  //Create a list of stage states to add and remove, by checking which ones exist already
  // and by what is specified in the form
  foreach($node->activity_phases_stages['stages']['stage_select'] as $stage_nid => $selected)
  {
    if($selected!=0)
    {
      //if a stage state is specified then set the state to visible - check if it the state is already
      // set, if it is not already set then add it to the add list
      $selected_stages[$stage_nid] = 'visible';
      if(!array_key_exists($stage_nid, $stage_state_pass_ids) && !array_key_exists($stage_nid, $stage_states_to_add))
      {
        $stage_states_to_add[$stage_nid] = $selected_stages[$stage_nid];
      }
    }
    else
    {
      // If the stage is not selected in the form, then check if a state is already set, and add it
      // to the remove list if it is.
      if(array_key_exists($stage_nid, $stage_state_pass_ids) && !array_key_exists($stage_nid, $stage_state_ids_to_remove))
      {
        $stage_state_ids_to_remove[$stage_nid] = $stage_state_pass_ids[$stage_nid];   
      }
    }
  }

  //find any existing states for stages not given in the form and add them to the remove list
  foreach($stage_state_pass_ids as $stage_nid => $pass_id)
  {
    if(!array_key_exists($stage_nid, $selected_stages) && !array_key_exists($stage_nid, $stage_state_ids_to_remove))
    {
      $stage_state_ids_to_remove[$stage_nid] = $pass_id;
    }
  }
  
  //Add only the non-exisitant state rows
  foreach($stage_states_to_add as $stage_nid => $stage_state)
  {
    $pi_activity_stage_state = array('activity_nid'=>$node->nid, 'stage_nid'=>$stage_nid, 'stage_state' => $stage_state);
    $write_result = drupal_write_record('pi_activity_stage_state', $pi_activity_stage_state);
    if($write_result==FALSE)
    {
      drupal_set_message(
        t('Error saving pi_activity stage state for stage !stage_nid',
          array('!stage_nid' => $stage_nid)
        ),
        'error'
      );
    }       
  }
  
  // Remove all the unneeded state rows
  foreach($stage_state_ids_to_remove as $pass_id)
  {
    db_query('DELETE FROM {pi_activity_stage_state} WHERE pass_id = %d', $pass_id);
  }
  
  
  // now update activity_statuses - one for the main activity and one for the shared view modde part of
  // activities
  $existing_activity_statuses = array();
  $result = db_query("SELECT * FROM {pi_activity_status} WHERE activity_id = %d", $node->nid);
  if($result!=FALSE)
  {
    while($status_row = db_fetch_array($result))
    {
      $existing_activity_statuses[$status_row['gid']] = $status_row;
    }
  }
  
  $activity_statuses_to_add = array();
  
  //Staert with the default status for all activity types
  $default_status = array(
    'activity_id'=>$node->nid,
    'uid' => NULL,
    'gid' => $node->actor,
    'node_function' => $node->node_function,
    'visible_status' => $node->visible_status
  );
  
  $activity_statuses_to_add[] = $default_status;
  
  // If it is a shared activity, then make a 'view' status for the share group
  // otherwisese just make the standard activity status for the activity.  
  $activity_actor_audience_result_type = _pi_activity_get_activity_actor_audience_result_type($node->actor, $node->audience); 
  switch($activity_actor_audience_result_type)
  {
    case 'done_as_individuals_in_group_not_shared':
      //If audience is individual then everyone in the target group will create
      // their own activity content and it wont be shared.
      // do nothing - no view status needed for any other group
      break;
         
    case 'done_as_single_group_not_shared':
    // do nothing - no view status needed for any other group        
    break;
    case 'done_by_all_groups_in_larger_group_not_shared':
      // If audience is group then activity will be done as a group and shared within the specified audience group type
      // All the groups of nquire group type 'group' within the selected group will do one item of content
      // Need to get all audience group within the hierarchy of the selected actor group.
      // do nothing - no view status needed for any other group               
    break;
    case 'done_by_group_shared_with_larger_group':
      $audience_id = pi_groups_get_associated_groups($actor_gid, $audience_group_type);
      // There should only be one larger group, so if more than one is returned, there's a problem
      // if 0 is returned then there is also a problem, but it's less bad as it means the parent hasn't
      // been assigned, rather than it having 2 parents (that's a DB error!).
      if(count($audience_id)==0)
      {
        drupal_set_message(t("Haven't set activity status to share the result of this activity as no associated group is defined for the actor group."), 'warning');
      }
      else
      {
        if(count($audience_id)>1)
        {
          drupal_set_message(t("This activity will done by @actor_group_type '%group_name' and the result would be viewable by the associated @audience_group_type however there's more than one class associated with '%group_name' - please check the group hierarchy is set up correctly.",
            array(
                '@actor_group_type'=> $actor_group_type,
                '%group_name'=> $group->title,
                '@audience_group_type'=> $audience_group_type,
            )), 'warning'
          );
        }
        foreach($audience_id as $audience_nid)
        {
          $activity_statuses_to_add[] =  array(
            'activity_id'=>$node->nid,
            'uid' => NULL,
            'gid' => $audience_nid,
            'node_function' => 'view',
            'visible_status' => 'view'
          );
        }
      }        
    break;
    default:
      //This bit should never be reached because the above options cover all eventualities!!
    break;
  }

  foreach($activity_statuses_to_add as $status)
  {
    // If one to add already exists then get the ID and add it to the lust for updating
    if(array_key_exists($status['gid'], $existing_activity_statuses))
    {
      $status['pas_id'] = $existing_activity_statuses[$status['gid']]['pas_id'];
      $activity_statuses_to_update[$status['pas_id']] = $status;      
    }
    
    $result = druapl_write_record('pi_activity_status', $status);
    if($result == FALSE)
    {
      drupal_set_message(
        t('Error saving pi_activity_status, node function !function, visible status !status for group !gid',
          array('!function' => $status['node_function'], '!status' => $sstatus['visible_status'], '!gid'=>$status['gid'])
          ),
      'error'
      );
    }
  }
  
  // Update any existing activity statuses that need to be updated
  foreach($activity_status_to_update as $id => $status)
  {
    //checi it needs to be updating before doing anything...
    if(($status['visible_status']!=$existing_activity_statuses[$status['gid']]['visible_status']) ||
        ($status['node_function']!=$existing_activity_statuses[$status['gid']]['node_function']) )
    {
      $result = druapl_write_record('pi_activity_status', $status, $id);
      if($result == FALSE)
      {
        drupal_set_message(
          t('Error saving pi_activity_status, node function !function, visible status !status for group !gid',
            array('!function' => $status['node_function'], '!status' => $sstatus['visible_status'], '!gid'=>$status['gid'])
            ),
        'error'
        );
      }  
    }
  }
  
  // If a status isn't to be updated, then remove it
  foreach(array_keys($existing_activity_status) as $id)
  {
    if(!array_key_exists($id, $activity_status_to_update))
    {
      db_query('DELETE FROM {pi_activity_status} WHERE pas_id = %d', $id);
    }    
  }
  
  // Finally the related node if necessary 
  
  // Check if there's an activity node with nid=0 - if so then update this
  // Otherwise check if there's more than one activity node, if there is, then add the 0
  // if there's only one activity node then
  $result = db_query("SELECT * FROM {pi_activity_node} WHERE activity_id = %d ORDER BY nid", $node->nid);
  $id_to_update = NULL;
  if($result!=FALSE)
  {
    $activity_nodes = array();
    while($row = db_fetch_array($result))
    {
      $activity_nodes[] = $row;
    }
    switch(count($activity_nodes))
    {
      case 0:
        // id to update will be null and a node will be inserted
      break;
      case 1: 
        // when 1 result is returned, this is the one to update     
        $id_to_update = $activity_nodes[0]['pan_id'];   
      break;    
      default:
        // if there's more than one activity_node id then do nothing as it's
        // used in a different way
      break;      
    }   
  }  
  if($node->existing_nid=='none')
  {
    $nid_to_write = 0; 
  }
  else
  {
    $nid_to_write = $node->existing_nid;
  }
  $activity_node = array('activity_id'=>$node->nid, 'nid'=>$nid_to_write);
  if($id_to_update!=NULL)
  {
    $result = drupal_write_record('pi_activity_node', $activity_node, $id_to_update);
  }
  else
  {
    $result = drupal_write_record('pi_activity_node', $activity_node);
  }
  
  if($result == FALSE)
  {
    drupal_set_message(
      t('Error saving pi_activity_node (!nid)',
        array('!nid' => $node->existing_nid)
      ),
      'error'
    );   
  }
}

/**
 *
 * Take the data from $node provided by drupal API to and turn it into an object that can be saved using
 * drupal_write_record()
 * @param $node
 */
function _pi_activity_form_data_to_pi_activity_row($node)
{
  $data_to_save = new StdClass();
  
  $property_to_column = array(
    'nid' => 'nid',
    'vid' => 'vid',
    'activity_type' => 'activity_type',
    'node_type' => 'node_type',
    'parameters' => 'parameters',
    'destination_after' => 'destination_after',
  );
  foreach($property_to_column as $column => $property)
  {
    $data_to_save->$column = $node->$property;
  }
  
  $data_to_save->phase_nid = $node->activity_phases_stages['phase_nid'];
  $data_to_save->audience = $node->selects['audience'];
  $data_to_save->actor = $node->selects['gid'];
  
  return $data_to_save;
}



function pi_activity_delete(&$node)
{
  //delete from pi_activity
  $query = "DELETE FROM {pi_activity} WHERE nid = %d AND vid = %d";
  db_query($query, $node->nid, $node->vid);

  //delete from pi_activity_stage_state
  $query = "DELETE FROM {pi_activity_stage} WHERE activity_nid = %d";
  db_query($query, $node->nid);
  
  //delete from pi_activity_status
  $query = "DELETE FROM {pi_activity_status} WHERE activity_id = %d";
  db_query($query, $node->nid);

  //delete from pi_activity_node
  $query = "DELETE FROM {pi_activity_node} WHERE activity_id = %d";
  db_query($query, $node->nid);

  //delete enter and leave focus
  $query = "DELETE FROM {pi_activity_enter_focus} WHERE activity_id = %d";
  db_query($query, $node->nid);
  $query = "DELETE FROM {pi_activity_leave_focus} WHERE activity_id = %d";
  db_query($query, $node->nid);
}

/**
 * 
 * Return an array of pi_activity_stage_states fior $nid
 *  indexed by pass_id, filled with db_fetch_array() results:
 *  array(pass_id => array(pass_id, stage_nid, activity_nid, stage_state)
 * @param $nid id of node id of a valid activity
 */
function _pi_activity_get_activity_stage_stages($nid)
{
 //Now get the stage states:
  $stage_states = array();
  $stages_result = db_query('SELECT * FROM {pi_activity_stage_state} WHERE activity_nid = %d', $nid);
  if($stages_result!=FALSE)
  {
    while($stage_state_row = db_fetch_array($stages_result))
    {
      $stage_states[$stage_state_row['pass_id']] = $stage_state_row;
    }
  }
  return $stage_states;
}


/**
 * 
 * Helper function to get pi_shtage_phase ids for inserting into 
 * pi_stage_phase_activity['psp_id'] column on activities
 * @param $selected_stages
 * @return array($nid) array of psp_ids 
 *//*
//@todo delete me
function _pi_activity_form_get_pi_stage_phase_ids($selected_phase, $selected_stages)
{
  $return_data = array();
  $phase = node_load($phase_id);
  if ($phase!=FALSE)
  {
    if ($phase->type=='pi_phase')
    {
      foreach ($selected_stages as $stage_nid)
      {
        $stage = node_load($stage_nid);
        if ($stage!=FALSE)
        {
          if ($stage->type=='pi_stage')
          {
            if (array_key_exists($stage_nid, $stage->stage_phase_ids))
            {
              $stage_psp_id = $stage->stage_phase_ids[$stage_nid];
              $return_date[] = $stage_psp_id;
              pi_debug_message('_pi_activity_form_get_pi_stage_phase_ids');
            }
            else
            {
              drupal_set_message(t("Error: Stage '%stage is not in current inquiry"), array('%stage' => $stage_nid), 'error');
            }
          }
          else
          {
            drupal_set_message(t("Error: Selected 'stage' %stage is not a stage node."), array('%stage' => $stage_nid), 'error');
          }
        }
        else
        {
          drupal_set_message(t("Error: Stage %stage not found."), array('%stage' => $stage_nid), 'error');
        }
      }
    }
    else
    {
      drupal_set_message(t("Error: Selected 'phase' %phase is not a phase node."), array('%phase' => $selected_phase), 'error');
    }
  }
  else
  {
    drupal_set_message(t("Error: Phase %phase not found."), array('%phase' => $selected_phase), 'error');
  }
}*/

/**
 * 
 * Return an array of arrays containing the desired state of activities in each stage of the inquiry
 * The array is indexed by 'pass_id' to allow updates to change the state rather than delete
 * and reinsert rows. e.g. retult:
 * array( $pass_id => array( 'stage_nid' => $stage_nid, 'stage_state' => $stage_state ), ... )
 * @param uint $activity_nid a valid activity node id
 * @returns array of array('stage_nid', 'stage_state') indexed by pass_id
 */
function _pi_activity_get_activity_stage_states($activity_nid)
{
  $query = 'SELECT * from {pi_activity_stage_state} WHERE activity_nid = %d';
  $result = db_query($query, $activity_nid);
  
  $seen_stage_nids = array();
  $return_rows = array();
  
  if($result!=FALSE)
  {
    while($row = db_fetch_array($result))
    {
      if(array_key_exists($row['stage_nid'], $seen_stage_nids))
      {
        $previous_state = $return_rows[$seen_stage_nids[$row['stage_nid']]['stage_state']];
        pi_debug_message($previous_state);
        drupal_set_message(
          t("More than one stage state set for activity @activity_nid and stage @stage_nid - using state @state", 
          array('@activity_nid' => $activity_nid, '@stage_nid' => $row['stage_nid'], '@state' => $previous_state))
        );
      }
      else
      {
        $return_rows[$row['pass_id']] = array('stage_nid'=>$row['stage_nid'], 'stage_state'=>$row['stage_state']);
        $seen_stage_nids[$row['stage_nid']] = $row['stage_state'];
      }
    }    
  }
  return $return_rows;  
}


function pi_activity_get_activity_actors($activity_id)
{
  $query = 'SELECT * FROM {pi_activity_actor} WHERE activity_id = %d';
  
}

/**
 * hook_theme() for pi_activity content
 */
function pi_activity_theme()
{
  return array(
		'pi_activity_admin_view_node' => array(
			'arguments' => array('activity', 'node_view_page'),
			'file' => 'pi_activity.admin.inc'
			),
		'pi_activity_form_actor_audience_explanation' => array(
			'arguments' => array('explanation', 'preview'),
			'file' => 'pi_activity.form.themes.inc'
			)
		);
}


/*
 *activity teaser
 */
function pi_activity_teaser($node, $activity, $link_node_function) {
  if($link_node_function == 'view')
  {
    //Add activity ID to node, needed for the PI chart module
    $node->activity_id = $activity->activity_id;
    $output = node_view($node, TRUE, TRUE);
  }
  else
  {
    $output = $activity->description;
  }
  return $output;
}


/**
 * Returns a list of nids of activity nodes generated for the given pi_activity
 * @param uint $inquiry_id the id of a pi_inquiry to get all related nodes for the activity (n.b. this is probably not needed)
 * @param uint $activity_id the id of a pi_activity to get all related nodes for
 * @return array(uint) an array of all the activity content nids for the given activity_is
 */
function pi_activity_get_activity_content_nids($activity_id, $inquiry_id)
{
  $activity_content_nids = array();
  $query = "SELECT nid FROM {pi_activity_node} WHERE activity_id = %d AND inquiry_id = %d";
  $result = db_query($query, $activity_id, $inquiry_id);
  while($row = db_fetch_array($result))
  {
    $activity_content_nids[] = $row['nid'];
  }
  return $activity_content_nids;
}



function pi_activity_nodeapi(&$node, $op)
{
	if ($node->type != 'image') {
		global $user;
		//only do this if the thing created is an activity
		//check this from the args
		$details = get_inquiry_details_from_current_path();
	
		if(is_object($details) && is_numeric($details->activity_id))
		{
			$activity = pi_activity_load( $details->activity_id );
			$activity_type = $activity->activity_type;
	
			//set PI activity node
			if($op == 'insert')
			{
				//new content saved
				switch( $node->type )
				{
					case 'pi_available_measures':
							
						if( $activity_type != 'pi_fooddiary' && $activity_type != 'pi_fooddiary_measures' )
						{
							add_activity_when_activity_node_created($node, 'edit', 'edit', $node->title, $details);
						}
						else if( $activity_type == 'pi_fooddiary_measures' )
						{
							$activity_node = new stdClass();
							$activity_node->activity_type = 'pi_available_measures';
							$activity_node->node_type = 'pi_available_measures';
	
							add_activity_when_activity_node_created($node, 'edit', 'edit', $node->title, $details, $activity_node);
						}
						break;
					case 'pi_key_questions':
						update_node_title($node, $node->key_question);
						add_activity_when_activity_node_created($node, 'edit', 'edit', $node->key_question, $details);
						break;
					case 'pi_key_answers':
						update_node_title($node, $node->key_answer);
						add_activity_when_activity_node_created($node, 'edit', 'edit', $node->key_answer, $details);
						break;
					case 'pi_result_presentations':
						add_activity_when_activity_node_created($node, 'edit', 'edit', $node->title, $details);
						break;
					case 'pi_data':
						//get_inquiry_details_from_current_path() does not work for datalogger
						if( arg(1) == 'datalogger_data' )
						{
							$details = new stdClass;
							$details->inquiry_id = arg(2);
							$details->stage_id = arg(3);
							$details->phase_id = arg(4);
							$details->activity_id = arg(5);
						}
						//not generated by fooddiary
						if( $activity_type != 'pi_fooddiary' )
						{
							add_activity_when_activity_node_created($node, 'edit', 'edit', $node->title, $details);
						}
						break;
					case 'pi_fooddiary':
						add_activity_when_activity_node_created($node, 'edit', 'edit', $node->title, $details);
						break;
					default:
						//In case the data are generated by another activity
						//(e.g. fooddiary_data => generates pi_sort_measure)
						if(isset($node->activity_id))
						{
							$details->activity_id = $node->activity_id;
						}
						add_new_pi_activity_node($node, 'edit', 'edit', $details);
				}
	
				//add og
				$loaded_activity = load_activity($details->activity_id);
				if ($loaded_activity->audience != "individual")
				{
					$users_group = get_group_of_type($user->uid, $loaded_activity->audience, $details->inquiry_id, $details->stage_id, $details->phase_id, $details->activity_id);
					$context['groups'] = array($users_group);
					og_add_group_action($node, $context);
				}
			}
	
			if($op == 'update')
			{
				switch ($node->type)
				{
					case 'pi_available_measures':
						update_activity_when_activity_node_updated($node, $node->title);
						break;
					case 'pi_key_answers':
						update_node_title($node, $node->key_answer);
						update_activity_when_activity_node_updated($node, $node->key_answer);
						break;
					case 'pi_key_questions':
						update_node_title($node, $node->key_question);
						update_activity_when_activity_node_updated($node, $node->key_question);
						break;
					case 'pi_result_presentations':
						update_activity_when_activity_node_updated($node, $node->title);
						break;
					case 'pi_data':
						//none come from datalogger as it is not used to update existing data
						update_activity_when_activity_node_updated($node, $node->title);
						break;
				}
				//update og
				$loaded_activity = load_activity($details->activity_id);
				if ($loaded_activity->audience != "individual")
				{
					$users_group = get_group_of_type($user->uid, $loaded_activity->audience, $details->inquiry_id, $details->stage_id, $details->phase_id, $details->activity_id);
					$context['groups'] = array($users_group);
					og_add_group_action($node, $context);
				}
			}
		}
	
		if($op == 'delete')
		{
			//update existing content
			if($activity_id = get_activity_id_for_nid($node->nid))
			{
				delete_activity($activity_id);
			}
		}
	
	}

}


// ---------------------------------------------------------------------------

/**
 * Functions in this block are for adding, deleting and inspecting activities
 */

/**
 * Returns the activity_object from pi_activity table.
 * @param uint $nid Activity ID
 * @return node object from node_load($nid)
 */
function load_activity($nid)
{
  return node_load($nid);
}

/**
 * Create the url to a particular activity
 * @param uint $inquiry_id
 * @param uint $stage_id
 * @param uint $phase_id
 * @param uint $activity_id
 * @param uint $uid
 * @return array ['url'] and ['title'] countaining link url (via drupal url()) and title (via chaeck_plain())
 */
function pi_activity_get_link($inquiry_id, $stage_id, $phase_id, $activity_id, $uid)
{
  $url = array('url'=>'', 'title'=>'');

  $image_path = drupal_get_path( 'module', 'pi' ) . '/images/';
  $status_image = array( 	'start' => 'creatable.png',
							'edit' => 'editable.png',
							'view' => 'viewable.png',
							'unavailable' => 'unavailable.png' );

  $loaded_activity = load_activity($activity_id);
  $visible_status = get_visible_status_of_activity($inquiry_id, $activity_id, $uid);
  $node_function = get_node_function_of_activity($inquiry_id, $activity_id, $uid);

  switch ($loaded_activity->destination)
  {
    case "self":
      $destination = "destination=activity/" . $activity_id . "/view";
      break;
    case "phase":
      $destination = "destination=phase/" . $phase_id;
      break;
    default:
      $destination = "destination=inquiry/" . $inquiry_id;
      break;
  }

  // set editable nodes to be viewed by default
  if ($node_function == 'edit')
  {
    $node_function = 'view';
  }

  $url['url'] = "activity/" . $activity_id . "/" . $node_function;
  $url['destination'] = $destination;

  $teacher_gid = check_teacher_activity_for_inquiry_activity_user($inquiry_id, $activity_id, $uid);
  $activity_name_text = check_plain($loaded_activity->name) . teacher_only_flag($teacher_gid);

  $label_icon = "<img width='12' src='" . $image_path . $status_image[$visible_status] . "'/>";
  $url['title'] = $activity_name_text . '&nbsp;' . $label_icon;

  return $url;
}


/**
 * Returns an array of activities in order based on a sort of the posistion column
 * @param uint $inquiry_nid
 * @param uint $stage_nid
 * @param uint $phase_nid
 * @param uint $uid
 */
function pi_activity_get_activities_of_stage_phase_user($inquiry_nid, $stage_nid, $phase_nid, $uid)
{
  // Get the first activity of the phase, if one exists...
  // otherwise don't bother and make next point to next phase
  $phase_activities = get_activities_of_stage_phase_and_user($inquiry_nid, $stage_nid, $phase_nid, $uid);
  $activities_in_order = array();
  if(count($phase_activities)>0)
  {
    //order activities by position to find first
    $positions = array();
    foreach($phase_activities as $key => $activity)
    {
      $positions[$activity->position] = $key;
    }
    asort($positions);

    //now put the positions in an array with standard indexing
    foreach($positions as $phase_activities_key)
    {
      $activities_in_order[] = $phase_activities[$phase_activities_key];
    }
  }
  return $activities_in_order;
}

/**
 * Return the activity_id of an "Add $whatever"n activity for a given "Sort $whatever" function, if not return NULL
 * @param unknown_type $inquiry_nid The inquiry id that the activity belongs to
 * @param unknown_type $activity_ind The "Sort $whatever" activity id for the add activity.
 * @param unknown_type $uid The user id to find the add activity id for.
 */
function pi_activity_get_add_activity_for_sort_activity($inquiry_id, $activity_id, $uid)
{
  $return_value = NULL;
  $sort_activity = load_activity($activity_id);

  if($sort_activity!=FALSE)
  {
    $type = node_get_types('type', $sort_activity->node_type);

    if(isset($type->add_node_type))
    {
      $node_type_to_find = $type->add_node_type;

      $phases = pi_phase_load_nids_for_user($inquiry_id, $uid);
      foreach ($phases as $phase)
      {
        $activities = get_activities_of_stage_phase_and_user($inquiry_id, NULL, $phase, $uid);
        foreach ($activities as $activity)
        {
          if($activity->node_type == $node_type_to_find)
          {
            $activity_status = load_activity_status($inquiry_id, $activity->activity_id, $uid);
            if ($activity_status->visible_status == 'start')
            {
              $return_value = $activity->activity_id;
              break;
            }
          }
        }
      }
    }
  }

  return $return_value;
}


/**
 * Returns an array of nids of a node type available
 * to a user for a given inquiry
 * @param $uid The user to which the nodes are availeable
 * @param $inquiry_id the inquiry id that the nodes belong to
 * @param $type the node type to search for e.g. 'pi_data'
 *
 */
function pi_activity_get_available_nids_of_type($uid, $inquiry_id, $node_type)
{
  $return_nids = array();

  $query = "SELECT DISTINCT {node}.nid as nid FROM {node} AS node " .
		"LEFT JOIN {node_access} node_access ON node.nid = node_access.nid " .
		"LEFT JOIN {og_uid} og_uid ON node_access.gid = og_uid.nid " .
		"LEFT JOIN {pi_activity_node} pi_activity_node ON pi_activity_node.nid =  node.nid  " .
		"WHERE TYPE = '%s'  AND pi_activity_node.inquiry_id = %d " .
		"AND STATUS = '1' AND ((node.uid = %d) OR (og_uid.uid = %d) )";
  $result = db_query($query, $node_type, $inquiry_id, $uid, $uid);
  while($row = db_fetch_object($result))
  {
    $return_nids[] = $row->nid;
  }
  return $return_nids;
}


/**
 * This function takes an array of nids, loads the node and then maps the
 * node attributes to fields as per the key and value of $field_maping
 * if the node cann't be loaded it is dropped from the array therefore
 * if this is of concern to you, you should check array_keys($results)
 * with $nids
 * @param $nids array(uint) nids to get data from
 * @param $field_mapping mapping of node attribute to field e.g. array('weight' => '#weight')
 * @return array [nid][{field_mapping_value}] node->{field_mapping_key}
 */
function pi_activity_map_fields_from_nids($nids, $field_mapping)
{
  $result = array();
  foreach($nids as $nid)
  {
    $node_fields = NULL;
    $node = node_load($nid);
    if($node!=FALSE)
    {
      $node_fields = array();
      foreach($field_mapping as $field => $mapping)
      {
        $node_fields[$mapping] = $node->$field;
      }
    }
    $result[$nid] = $node_fields;
  }
  return $result;
}

/**
 * 
 * Enter description here ...
 * @param unknown_type $actor
 * @param unknown_type $audience
 */
function _pi_activity_get_activity_actor_audience_result_type($actor_gid, $audience_group_type)
{
  $activity_setting = '';
  $group_values = array(
		'individual' => 0,
		'group' => 1,
		'class' => 2,
		'multiclass' => 3
  );
  $group = node_load($actor_gid);

  $actor_group_type = pi_get_type_of_group($actor_gid);

  $audience_value = $group_values[$audience_group_type];
  $actor_value = $group_values[$actor_group_type];

  $activity_setting = NULL;

  //This section sets up the type of explanation that is generated below in the switch
  // statement.  It's easier to understand the input/outcomes here then sort out the
  // explanations below.

  //$audience_value == 0 (individual)
  if ($audience_group_type=='individual')
  {
    // When individual audience is set, then it's an individual activity for everyone in
    // the seleted actor group.
    $activity_setting = 'done_as_individuals_in_group_not_shared';
  }
  elseif ($audience_value == $actor_value)
  {
    // If the actor group type is the same as the audience type then the activity is
    // shared between all members of the actor group and only one activity content is generated
    $activity_setting = 'done_as_single_group_not_shared';
  }
  elseif ($audience_value < $actor_value)
  {
    // When the audience is smaller than the actor group type, then all the
    // groups of the audience type are given individual activities.
    // for example all the groups within a class or multiclass.
    $activity_setting = 'done_by_all_groups_in_larger_group_not_shared';
  }
  elseif ($audience_value > $actor_value)
  {
    // When the audience group type is larger than the actor group, then the
    // actor group shares the generated content witht the members of the larger group
    // and one item of generated for the actor group.
    // for example a group shares one content item with a class,
    // or a class shares one content item with a multiclass
    $activity_setting = 'done_by_group_shared_with_larger_group';
  }

  return $activity_setting;
}

?>