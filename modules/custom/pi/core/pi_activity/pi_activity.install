<?php
// $Id: pi_activity.install 2010/05/21 MCP $

/**
 * @file pi_activity module installer
 */

/**
 * Implementation of hook_install().
 */
function pi_activity_install()
{
  // Create tables.
  drupal_install_schema('pi_activity');

  variable_set("og_content_type_usage_pi_activity", 'group_post');
  //Options are status, promote, sticky, revision
  variable_set("node_options_pi_activity", array('status','revision'));
  variable_set("comment_pi_activity", COMMENT_NODE_DISABLED);
  variable_set('upload_pi_activity', 0);
}

/**
 * Implementation of hook_uninstall().
 */
function pi_activity_uninstall() {
  // Remove tables.
  drupal_uninstall_schema('pi_activity');

  variable_del("og_content_type_usage_pi_activity");
  variable_del("node_options_pi_activity");
  variable_del("comment_pi_activity");
  variable_del("upload_pi_activity");
}

/**
 * Implementation of hook_schema().
 */
function pi_activity_update_6001(&$sandbox)
{
  $results = array();
  $batch_size = 20;
  // stage this update using sandbox variable...
  if (!isset($sandbox['progress']))
  {
    $sandbox['progress'] = 0;
    $sandbox['current_node'] = 0;
    $sandbox['new_node_ids'] = array();
    $sandbox['max'] = 16;
  }

  //pi_debug_message($sandbox['progress']);
  //pi_debug_message(count($sandbox['new_node_ids']));
  $table_data[0] = array('pi_activity_enter_focus', 'paef_id', 'activity_id');
  $table_data[1] = array('pi_activity_leave_focus', 'palf_id', 'activity_id');
  $table_data[2] = array('pi_activity_node', 'pan_id', 'activity_id');
  $table_data[3] = array('pi_activity_preference', 'pap_id', 'show_activity');
  $table_data[4] = array('pi_activity_status', 'pas_id', 'activity_id');
  $table_data[5] = array('pi_inquiry_grouping', 'pig_id', 'activity_id');

  switch($sandbox['progress'])
  {
    case 0:
      //Get the new schema definition and make sure cache is updated
      $schema['pi_activity'] = drupal_get_schema('pi_activity', true);
      $schema['pi_activity_stage_state'] =  drupal_get_schema('pi_activity_stage_state', true);

      db_create_table($results, 'pi_activity_stage_state', $schema['pi_activity_stage_state'] );
      db_rename_table($results, 'pi_activity', 'pi_activity_old');
      db_create_table($results, 'pi_activity', $schema['pi_activity'] );
      db_drop_field($results, 'pi_activity_node', 'inquiry_id');
      db_drop_field($results, 'pi_activity_status', 'inquiry_id');
      $new_schema = drupal_get_schema(NULL, true);
      $sandbox['progress']++;
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      //pi_debug_message("Copying: " . $table_data[$sandbox['progress']-1][0]);
      _pi_activity_upgrade_copy_associated_table($table_data[$sandbox['progress']-1][0]);
      $rows_updated = 0;
      $sandbox['progress']++;
      break;
    case 7:
      $rows_updated = _pi_activity_upgrade_create_nodes($sandbox['new_node_ids'], $sandbox['current_node'], $batch_size);
      if($rows_updated == 0)
      {
        $sandbox['progress']++;
        $sandbox['current_node'] = 0;
      }
      else
      {
        $sandbox['current_node'] += $rows_updated;
      }
      break;
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      _pi_activity_upgrade_copy_and_update_table($table_data[$sandbox['progress']-8][0], $table_data[$sandbox['progress']-8][1], $table_data[$sandbox['progress']-8][2], $sandbox['new_node_ids']);
      $sandbox['progress']++;
      break;
    case 14:
      //Set up directly referenced nodes and activity parent activities after all the nids and activity_ids have been changed.
      $rows_updated = _pi_activity_upgrade_set_activity_direct_references($sandbox['current_node'], $batch_size);
      if($rows_updated == 0)
      {
        $sandbox['progress']++;
        $sandbox['current_node'] = 0;
      }
      else
      {
        $sandbox['current_node'] += $rows_updated;
      }
      break;
      case 15:
      //Set up directly referenced nodes and activity parent activities after all the nids and activity_ids have been changed.
      $rows_updated = _pi_activity_upgrade_set_child_activity_nodes($sandbox['current_node'], $batch_size);
      if($rows_updated == 0)
      {
        $sandbox['progress']++;
        $sandbox['current_node'] = 0;
      }
      else
      {
        $sandbox['current_node'] += $rows_updated;
      }
      break;
    case 16:
      db_drop_table($results, 'pi_activity_actor');
      db_drop_table($results, 'pi_stage_phase_activity');
      //rebuild the schema cache after the changes
      $new_schema = drupal_get_schema(NULL, true);
      break;
  }

  // Inform the batch update engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($sandbox['progress'] != $sandbox['max']) {
    $results['#finished'] = $sandbox['progress'] / $sandbox['max'];
  }
  return $results;
}

function _pi_activity_upgrade_create_nodes(&$new_node_ids, $start, $batch_size)
{
  $rows_updated = 0;
  $result = db_query_range('SELECT * FROM {pi_activity_old}', $start, $batch_size);
  while($row = db_fetch_array($result))
  {
    $rows_updated++;

    $activity_id = $row['activity_id'];

    $new_node = _pi_activity_upgrade_covert_to_node($row);
    node_save($new_node);
    $new_node_id = $new_node->nid;
    $new_node_ids[$activity_id] = $new_node_id;
  }
  return $rows_updated;
}

/**
 *
 * this function converts the activity data in pi_activity, pi_activity_actor, and pi_stage_phase_activity to
 * a node, with the necessary fields for it to be saved in the new format
 * The new format consolidates pi_activity_actor into the pi_activity table, and replaces pi_stage_phase_activity with
 * pi_activity_stage_state.  This table contains a desired state for an activity in the stage, to be set when switching stages
 * but individual groups will have their own activity states set using the teacher orchestration tools
 * @param array $activity pi_activity database row, in 'original' format
 */
function _pi_activity_upgrade_covert_to_node($activity)
{
  $node = new stdClass();
  $node->type = 'pi_activity';

  $rows_to_properties = array(
    'name' => 'title',
    'description' => 'body',
	'activity_type' => 'activity_type',
	'node_type' => 'node_type',  
    'parameters' => 'parameters',
    'destination' => 'destination',
  );

  // Convert fields that are a one-to-one copy
  foreach($rows_to_properties as $row => $property)
  {
    $node->$property = $activity[$row];
  }

  //Then do ones that are more complicated
  $node->selects['audience'] = $activity['audience'];

  // Find the actor for the activity and add it to the new table schema
  // only get the first actor in the database, since multiple actors doesn't make sense in the system now
  $actor_result = db_query("SELECT * FROM {pi_activity_actor} WHERE `activity_id` = %d LIMIT 1", $activity['activity_id']);

  $node->selects['gid'] = NULL;
  if( !is_null($actor_result) && ($actor_result!=FALSE) )
  {
    $actor_row = db_fetch_object($actor_result);
    if($actor_row!=FALSE)
    {
      $node->selects['gid'] = $actor_row->gid;
    }
  }
  $node->actor = &$node->selects['gid'];
  if($node->actor == NULL)
  {
    drupal_set_message(t("Updating activity !id - no actor set (phase default will be used if assigned to a phase)", array('!id' => $activity['activity_id']), 'warning'));
  }
  $node->visible_status = 'start';
  $node->node_function = 'add';

  // Find the phase associated with the activity and
  // add it directly to the pi_activity table for the new schema
  //again only use the first phase found as activities can only belong to one phase
  $skip=false;
  $phase_result = db_query("SELECT DISTINCT {pi_stage_phase}.`phase_id` FROM {pi_stage_phase_activity} " .
      "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase}.`psp_id` = {pi_stage_phase_activity}.`psp_id` " .
      "WHERE {pi_stage_phase_activity}.`activity_id` = %d LIMIT 1", $activity['activity_id']);
  if(!is_null($phase_result) && ($phase_result!=FALSE) )
  {
    $phase_nid_row = db_fetch_array($phase_result);
    $node->activity_phases_stages['phase_nid'] = $phase_nid_row['phase_id'];
    if($phase_nid_row['phase_id']!=null)
    {
      // Assuming the activity does belong to a phase, find the corresponding stage states for the activity
      // and map them to the new schema
      $node->activity_phases_stages['stages']['stage_select'] = array();

      $stage_result = db_query("SELECT DISTINCT {pi_stage_phase}.`stage_id`, {pi_stage_phase_activity}.`position` FROM {pi_stage_phase_activity} " .
        "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase}.`psp_id` = {pi_stage_phase_activity}.`psp_id` " .
        "WHERE ( {pi_stage_phase_activity}.`activity_id` = %d ) " .
        "AND ({pi_stage_phase}.`phase_id` = %d)", $activity['activity_id'], $phase_nid_row['phase_id']);
      $activity_position = NULL;
      if( !is_null($stage_result) && ($stage_result!=FALSE) )
      {
        while($stage_phase_row = db_fetch_array($stage_result))
        {
          $node->activity_phases_stages['stages']['stage_select'][$stage_phase_row['stage_id']] = TRUE;
          if($activity_position != $stage_phase_row['position'])
          {
            if(is_null($activity_position))
            {
              $activity_position = $stage_phase_row['position'];
            }
            else
            {
              drupal_set_message(t("Activity weights conflict for activity '%activity_title' between stages, using initial position %p and not %not_p", array('activity_title' => $node->title, '%p' => $activity_position, '%not_p' => $row['position']), 'warning'));
            }
          }

          $node->activity_phases_stages['weight'] = $activity_position;
        }
      }
    }
    else
    {
      $skip=true;
    }
  }
  else
  {
    $skip=true;
  }
  if($skip)
  {
    drupal_set_message(t('Skipping orphaned activity !number, %title', array('!number' => $activity['activity_id'], '%title' => $activity['name'])), 'info');
    $node->activity_phases_stages['phase_nid'] = NULL;
    $node->activity_phases_stages['stages']['stage_select'] = array();
    return NULL;
  }
  return $node;
}

/**
 * This is an internal upgrade function that identifies and sets the directly refgerenced content nodes for
 * activities and also sets the parent activity for all generated activities in the system
 * see comment at the end of _pi_activity_upgrade_covert_to_node() for details
 */
function _pi_activity_upgrade_set_activity_direct_references($current_node, $batch_size)
{
  $rows_changed = 0;
  $query = "SELECT `nid`, `activity_type` from {pi_activity}";
  $activity_result = db_query_range($query, $current_node, $batch_size);
  while($row = db_fetch_array($activity_result))
  {
    $rows_changed++;
    $activity_nid = $row['nid'];

    /* Get all linked nodes to update there - if the first node for the activity ID in pi_activity_node is 0
     * then it's an activity that has multiple contents.  If it's not 0 then there should only be one value as it's
     * direcly referenced node, so that should be put into the table now.
     * If the first isn't 0 and there's more than one entry, there's a problen somewhere!
     */
    $query = "SELECT * FROM {pi_activity_node} WHERE `activity_id` = %d ORDER BY `nid` ASC";
    $result = db_query($query, $activity_nid);
    $first_result = db_fetch_array($result);
    if((!is_null($result)) && ($first_result!=FALSE))
    {
      pi_debug_message("first result for activity  " . $activity_nid . " is " . $first_result['nid']);
      if($first_result['nid'] != 0)
      {
        // This is a directly referenced node
        // @todo - check this node exists?
        pi_debug_message("Loading activity  " . $activity_nid);
        $activity_node = node_load($activity_nid);
        if($activity_node)
        {
          pi_debug_message("Activity " . $activity_nid . " is " . $activity_node->type);
          if($activity_node->type=='pi_activity')
          {
            $activity_node->referenced_node = $first_result['nid'];
            pi_debug_message("Loading activity content " .  $first_result['nid']);
            $content_node = node_load($first_result['nid']);
            pi_debug_message("nid " . $first_result['nid'] . " is a " . $content_node->type);
            pi_debug_message("Assigning node " . $first_result['nid'] . " (" . $content_node->title . ") directly to activity " . $activity_nid . " (" . $activity_node->title . ")");
            node_save($node);
            $delete_query = "DELETE FROM {pi_activity_node} WHERE pan_id = %d";
            db_query($delete_query, $first_result['pan_id']);
          }
          else
          {
            drupal_set_message(t("Not converting activity !a node !n as activity is actually a !t",
            array('!a' => $activity_nid, '!n' => $first_result['nid'], !t => $node->type)));
          }
        }
        else
        {
          drupal_set_message(t("Not converting activity !a node !n as activity doesn't exist",
          array('!a' => $activity_nid, '!n' => $first_result['nid'])));
        }
      }
      else
      {
        //First result is not 0 so this is an activity that references a number of nodes.
        // delete the 0 reference now
        $delete_query = "DELETE FROM {pi_activity_node} WHERE pan_id = %d";
        db_query($delete_query, $first_result['pan_id']);
        
        // Leave these as is, unless they also have an activity attached to them, 
        // in which case deal with them seperately below 
      }
    }
  }  
  return $rows_changed;
}

/* Check if each activity has a parent; this is done by checking for activities in the same phase
 * that are of the type this activity generates e.g. for pi_sort_data it generates pi_data
 * This can't be done until all the activities are upgraded hovever, since activity ids will be changing when
 * they are are being processed one by one.
 * This works because activities currently can only have one "sort" instance per inquiry, and an activity
 * can only be on one phase (so if child activities appear in another phase, they'll not be linked any more.
 * This will be different in the new version activities, which will directly set parent data on creation, and
 * conceivably they could appear in a different phase, but this would be rather strange. */
function _pi_activity_upgrade_set_child_activity_nodes($current_node, $batch_size)
{
  $rows_changed = 0;
  $query = "SELECT `nid`, `activity_type`, `phase_nid` from {pi_activity}";
  $activity_result = db_query_range($query, $current_node, $batch_size);
  while($row = db_fetch_array($activity_result))
  {
    $rows_changed++;
    $activity_nid = $row['nid'];
    // First of all find the name of the module that provides the activity content
    $activity_type = $row['activity_type'];

    // Then get the type of data that activity content module provides
    $info_function_name = $activity_type . '_node_info';
    if(function_exists($info_function_name))
    {
      $node_info = $info_function_name();
      $generated_node_type = $node_info[$activity_type]['add_node_type'];
      //When it does generate nodes, check what type those nodes are and get the nids of the content
      // of that type in the activity's phase.
      if(!is_null($generated_node_type))
      {
        pi_debug_message("Finding nodes of type " . $generated_node_type . " for activity " . $row['nid'] );
        $child_nodes_query = "SELECT {pi_activity_node}.`nid` FROM {pi_activity_node} " .
        "LEFT JOIN {pi_activity} on {pi_activity_node}.`activity_id` = {pi_activity}.`nid` " .
          "LEFT JOIN {node} on {pi_activity_node}.`nid` = {node}.`nid` " .
          "WHERE {node}.`type` = '%s' AND {pi_activity}.`phase_nid` = %d";
        pi_debug_message(sprintf($child_nodes_query, $generated_node_type, $row['phase_nid']));
        $result_for_child_nodes = db_query($child_nodes_query, $generated_node_type, $row['phase_nid']);

        // finally for each child activity content node, get their activity node and set the parent_activity nid
        // from the directly referenced nodes
        while($child_nid_row = db_fetch_array($result_for_child_nodes))
        {
          pi_debug_message("Setting activity parent for " . $child_nid_row['nid'] . " to ". $row['nid']);
          // First version for directly referenced nodes
          $child_activity_node_query = "SELECT `nid` FROM {pi_activity} WHERE `referenced_node` = %d";
          $result_for_child_activity_node = db_query($child_activity_node_query, $child_nid_row['nid']);
          while($child_activity_node_row = db_fetch_array($result_for_child_activity_node))
          {
            $child_activity_node = node_load($child_activity_node_row['nid']);
            if($child_activity_node!=FALSE)
            {
              pi_debug_message("Assigning activity parent " . $row['nid'] . " activity child " . $child_activity_node_row['nid']);
              $child_activity_node->parent_activity = $row['nid'];
              node_save($child_activity_node);
            }
          }
        }
      }
      else
      {
        //drupal_set_message(t("Node type %type doesn't have a generated node type", array('%type' => $row['activity_type'])), 'warning');
      }
    }
    else
    {
      //drupal_set_message(t("Node type %type doesn't have a node info function", array('%type' => $row['activity_type'])), 'warning');
    }
  }
  return $rows_changed;
}

function _pi_activity_upgrade_copy_associated_table($table_name)
{
  //Since activity_id and new nids may overlap you have to move data from one table to another instead
  // of changing on mass
  db_rename_table($results, $table_name, $table_name . '_tmp');
  db_query("CREATE TABLE {%s} LIKE {%s}", $table_name, $table_name . '_tmp');
}

function _pi_activity_upgrade_copy_and_update_table($table_name, $key_column_name, $column_name, $new_node_ids)
{
  //Since activity_id and new nids may overlap you have keep the two datasets seperate
  // and clear out the data generated by pi_activity_insert when the nodes were updated
  db_query('TRUNCATE TABLE {%s}', $table_name);

  // get the coulmn names to copy data with by performing an query and getting a
  // string indexed array of the result with column names as the key
  $result = db_query("SELECT * FROM {%s}", $table_name . "_tmp");
  //pi_debug_message(arr$generated_node_typeay_keys($rows));
  $count = 0;
  while($row = db_fetch_array($result))
  {
    if(array_key_exists($row[$column_name], $new_node_ids))
    {
      $new_row = $row;
      $new_row[$column_name] =  $new_node_ids[$row[$column_name]];
      $write_result = drupal_write_record($table_name, $new_row);
      $count++;
    }
    else
    {
      drupal_set_message(t("Not updating !name for activity '!id' as activity doesn't exist", array('!name' => $table_name, '!id' => (($row[$column_name]!=NULL)? $row[$column_name]: "NULL"))), 'status');
    }
  }

  // and drop the temp table
  db_query('DROP TABLE {%s}', $table_name . '_tmp');
}

function _pi_activity_upgrade_copy_update_one_activity_id($table_name, $column_names, $id_column_name, $activity_id, $node_id)
{
  $columns_and_new_values = array_combine($column_names, $column_names);
  $columns_and_new_values[$id_column_name] = $node_id;

  $query = "SELECT `" . implode('`, `', $column_names) . "` FROM {%s} WHERE `%s` = %d";
  $result = db_query($query, $table_name . '_tmp', $id_column_name, $activity_id);
  if($result)
  {
    $count = 0;
    while($row = db_fetch_object($result))
    {
      $new_row = $row;
      $new_row->$id_column_name = $node_id;
      $write_result = drupal_write_record($table_name, $row);
      if(($write_result != SAVED_NEW) && ($write_result != SAVED_UPDATED))
      {
        $result_string = _pi_write_record_result_string($write_result);
        pi_debug_message("Unexpected result writing to $table_name - $result_string");
      }
      $count++;
    }
    return $count;
  }
  /*
   $query = "INSERT INTO {%s} (" . implode($column_names, ', ') . ") " .
  	" SELECT " . implode($columns_and_new_values, ', ') . " FROM {%s} WHERE {%s}.`%s` = %d";
  	*/
  //pi_debug_message(sprintf($query, $table_name, $table_name . '_tmp', $table_name . '_tmp', $id_column_name, $activity_id));
  //db_query($query, $table_name, $table_name . '_tmp', $table_name . '_tmp', $id_column_name, $activity_id);
}


function pi_activity_schema() {
  $schema = array();
  $schema['pi_activity'] = array(
    'description' => 'PI Activity.',
    'fields' => array(
	  'nid' => array(
        'description' => 'Activity node id, used to be activity_id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
  ),
	  'vid' => array(
        'description' => 'Activity node id, used to be activity_id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
  ),
      'phase_nid' => array(
        'description' => 'The phase this activity is associated with.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
  ),
      'parent_activity' => array(
        'description' => 'If this activity is created by another activity, then it is referenced here.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => NULL
  ),
      'show_children_in_phase' => array(
        'description' => 'If this activity creates child activities then if they are to be shown in the phase view, it will be set here.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
  ),
      'referenced_node' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => NULL,
        'description' => 'If the activity directly references a single node, it is set here.'
        ),
      'activity_type' => array(	
      	'type' => 'varchar',
       	'length' => 64,
       	'not null' => FALSE,
		'description' => 'What kind of node type is this activity working with.'
		),
      'show_activity' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'description' => 'Show the activity in the phase list or not: true/false.'
        ),
      'node_type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Node type - content type of a node created/used in an activity.'
        ),
      'parameters' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Parameters needed to create/use a node in an activity (optional).'
        ),
      'destination_after' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'destination - form destination page after submission e.g. phase, self.'
        ),
      'audience' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'audience - intended audience category for a created node e.g. individual, group, class, multiclass.'
        ),
      'actor' => array(
        'description' => 'og group nid of the actor group',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'weight' => array(
        'description' => 'The default layout order in the phase list.',
    	'type' => 'int',
		'size' => 'normal',
        'unsigned' => TRUE,
		'not null' => TRUE,
        'default' => 0	
        )
        ),
    'primary key' => array('nid', 'vid'),
    'indexes' => array(
      'nid' => array('nid'), 
      'vid' => array('vid'),
      'phase_nid' => array('phase_nid'), 
      'activity_type' => array('activity_type'),
      'actor' => array('actor')
        )
        );
        $schema['pi_activity_stage_state'] = array(
    'description' => 'State of an activity in a particular stage',
    'fields' => array(
      'pass_id' => array(
        'description' => 'Primary key: Id column for this table',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'activity_nid' => array(
        'description' => 'Activity node id for this stage-state definition',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
        ),
	  'stage_nid' => array(
        'description' => 'Stage node id for this stage-state definition',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
        ),
      'stage_state' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => 'shown',
        'description' => 'Activity state: the visible state of the activity in this stage'
        )
        ),
    'primary key' => array('pass_id'),
    'indexes' => array(
      'activity_id' => array('activity_nid'), 
      'stage_nid' => array('stage_nid'), 
        )
        );
        $schema['pi_activity_enter_focus'] = array(
	'description' => 'PI activity enter focus',
	'fields' =>	array(	
		'paef_id' => array(
			'type' => 'serial',
			'size' => 'normal',
			'unsigned' => TRUE,
			'not null' => TRUE,
			'default' => NULL,
	 		'description' => '' ),
      	'activity_type' => array(	
      		'type' => 'varchar',
        	'length' => 64,
        	'not null' => FALSE,
			'description' => '' ),
		'inquiry_id' => array(
			'type' => 'int',
			'size' => 'normal',
			'unsigned' => TRUE,
			'not null' => FALSE,
			'default' => NULL,
	 		'description' => '' ),
		'activity_id' => array(
			'type' => 'int',
			'size' => 'normal',
			'unsigned' => TRUE,
			'not null' => FALSE,
			'default' => NULL,
	 		'description' => '' ),
  		'node_function' => array(	
  			'type' => 'varchar',
			'length' => 32,
        	'not null' => TRUE,
			'description' => '' ),	
  		'visible_status' => array(	
  			'type' => 'varchar',
        	'length' => 32,
        	'not null' => TRUE,
			'description' => '' ),
		'prior_nf' => array(
			'type' => 'varchar',
        	'length' => 32,
        	'not null' => FALSE,
			'description' => '' ),	
  		'prior_vs' => array(
  			'type' => 'varchar',
        	'length' => 32,
        	'not null' => FALSE,
			'description' => '' )	),	
	'primary key' =>	array(	'paef_id'),
	'indexes' => 	array(	'activity_type' => array('activity_type'),
							'inquiry_id' => array('inquiry_id'),
      						'activity_id' => array('activity_id'),
							'prior_nf' => array('prior_nf'),
							'prior_vs' => array('prior_vs') 	)
        );

        $schema['pi_activity_leave_focus'] = array(
	'description' => 'PI activity leave focus',
	'fields' =>	array(
		'palf_id' => array(
			'type' => 'int',
			'size' => 'normal',
			'unsigned' => TRUE,
			'not null' => TRUE,
			'default' => NULL,
	 		'description' => '' ),
      	'activity_type' => array(
      		'type' => 'varchar',
        	'length' => 64,
        	'not null' => FALSE,
			'description' => '' ),
		'inquiry_id' => array(
			'type' => 'int',
			'size' => 'normal',
			'unsigned' => TRUE,
			'not null' => FALSE,
			'default' => NULL,
	 		'description' => '' ),
		'activity_id' => array(
			'type' => 'int',
			'size' => 'normal',
			'unsigned' => TRUE,
			'not null' => FALSE,
			'default' => NULL,
	 		'description' => '' ),
  		'node_function' => array(	
  			'type' => 'varchar',
        	'length' => 32,
        	'not null' => TRUE,
			'description' => '' ),	
  		'visible_status' => array(	
  			'type' => 'varchar',
        	'length' => 32,
        	'not null' => TRUE,
			'description' => '' ),
		'prior_nf' => array(
			'type' => 'varchar',
        	'length' => 32,
        	'not null' => FALSE,
			'description' => '' ),	
  		'prior_vs' => array(
  			'type' => 'varchar',
        	'length' => 32,
        	'not null' => FALSE,
			'description' => '' )	),	
	'primary key' =>	array(	'palf_id'),
	'indexes' => 	array(	'activity_type' => array('activity_type'),
							'inquiry_id' => array('inquiry_id'),
      						'activity_id' => array('activity_id'),
							'prior_nf' => array('prior_nf'),
							'prior_vs' => array('prior_vs') 	)
        );

        $schema['pi_activity_node'] = array(
    'description' => 'PI Activity node.',
    'fields' => array(
		'pan_id' => array(
        	'type' => 'serial',
			'size' => 'normal',
			'unsigned' => TRUE,
			'not null' => TRUE,
			'description' => 'Primary Key: Unique category ID' ),
		'activity_id' => array(
        	'type' => 'int',
			'size' => 'normal',
        	'unsigned' => TRUE,
        	'not null' => TRUE,
        	'description' => 'Activity id.' ),
        'nid' => array(
        	'type' => 'int',
        	'size' => 'normal',
        	'unsigned' => TRUE,
        	'not null' => TRUE,
        	'description' => 'Node id.' ) ),
	'primary key' => array('pan_id'),
     //@TODO FIXME inquiry_id is not a valid comumn !
	'indexes' => array( //'inquiry_id' => array('inquiry_id'),
						'activity_id' => array('activity_id'),
						'nid' => array('nid') ),
        );

        $schema['pi_activity_preference'] = array(
    'description' => 'PI Activity Preference',
    'fields' =>	array(
    	'pap_id' =>	array(
    		'type' => 'serial',
    		'size' => 'normal',
    		'unsigned' => TRUE,
    		'not null' => TRUE,
    		'description' => '' ),
    	'show_activity' => array(	
    		'type' => 'int',
        	'size' => 'tiny',
        	'description' => '' ),
    	'uid' => array(	
    		'type' => 'int',
    		'size' => 'normal',
    		'unsigned' => TRUE,
    		'not null' => FALSE,
    		'default' => NULL,
    		'description' => 'User id' ),
    	'gid' => array(
    		'type' => 'int',
    		'unsigned' => TRUE,
    		'not null' => FALSE,
    		'default' => NULL,
    		'size' => 'normal',
    		'description' => 'Group id' )
        ),
  	  'primary key' => array('pap_id'),
      'indexes' => array('uid' => array('uid', 'gid')
        )
        );

        $schema['pi_activity_status'] = array(
    'description' => 'PI Activity status.',
    'fields' => array(
		'pas_id' => array(
			'type' => 'serial',
        	'size' => 'normal',
        	'unsigned' => TRUE,
        	'not null' => TRUE,
        	'description' => 'Primary Key: Unique category ID.' ),
        'activity_id' => array(
        	'type' => 'int',
        	'size' => 'normal',
        	'unsigned' => TRUE,
        	'not null' => FALSE,
        	'description' => 'Activity id.' ),
        //@TODO FIXME Not sure if inquiry_id is still required ?
		'inquiry_id' => array(
        	'type' => 'int',
        	'size' => 'normal',
        	'unsigned' => TRUE,
        	'not null' => FALSE,
        	'description' => 'Inquiry id.' ),
        'uid' => array(
        	'type' => 'int',
        	'size' => 'normal',
        	'unsigned' => TRUE,
        	'not null' => FALSE,
        	'default' => NULL,
        	'description' => 'User id.' ),
        'gid' => array(
        	'type' => 'int',
        	'size' => 'normal',	
        	'unsigned' => TRUE,
        	'not null' => FALSE,
        	'default' => NULL,
        	'description' => 'Group id.' ),
      'node_function' => array(
        	'type' => 'varchar',
        	'length' => 255,
        	'not null' => FALSE,
        	'default' => '',
        	'description' => 'node_function - type of drupal node function i.e. add, edit, view.' ),
      'visible_status' => array(
        	'type' => 'varchar',
        	'length' => 255,
        	'not null' => FALSE,
        	'default' => '',
        	'description' => 'visible_status - type of icon used for an activity link i.e. start, in_progress, view, unavailable.' ) ),
    'primary key' => array('pas_id'),
    'indexes' => array( 'inquiry_id' => array('inquiry_id'),
						'activity_id' => array('activity_id'),
						'uid' => array('uid'),
						'gid' => array('gid'),
						'visible_status' => array('visible_status') )
        );

        /*
         $schema['pi_previous_activity_status'] = array(
         'description' => 'PI previous activity status',
         'fields' =>	array(
         'pas_id' =>	array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => NULL,
         'description' => '' ),
         'inquiry_id' =>	array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => NULL,
         'description' => '' ),
         'activity_id' =>	array(
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => NULL,
         'description' => '' ),
         'uid' => array(
        	'type' => 'int',
        	'unsigned' => TRUE,
        	'not null' => TRUE,
        	'default' => NULL,
        	'description' => 'User id' ),
        	'gid' => array(
        	'type' => 'int',
        	'unsigned' => TRUE,
        	'not null' => TRUE,
        	'default' => NULL,
        	'description' => 'Group id' ),
        	'node_function' => array(
        	'type' => 'varchar',
        	'length' => 255,
        	'not null' => TRUE,
        	'default' => '',
        	'description' => 'node_function - type of drupal node function i.e. add, edit, view.' ),
        	'visible_status' => array(
        	'type' => 'varchar',
        	'length' => 255,
        	'not null' => TRUE,
        	'default' => '',
        	'description' => 'visible_status - type of icon used for an activity link i.e. start, in_progress, view, unavailable.' ) ),
        	'indexes' => 		array(	'pas_id' => array('pas_id'),
        	'node_function' => array('node_function') 	),
        	);
        	*/

        return $schema;
}
