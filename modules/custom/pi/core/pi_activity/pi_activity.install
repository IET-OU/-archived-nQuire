<?php
// $Id: pi_activity.install 2010/05/21 MCP $

/**
 * @file pi_activity module installer
 */

/**
 * Implementation of hook_install().
 */
function pi_activity_install()
{
	// Create tables.
	drupal_install_schema('pi_activity');
	
	variable_set("og_content_type_usage_pi_activity", 'group_post');
	//Options are status, promote, sticky, revision
	variable_set("node_options_pi_activity", array('status','revision'));
	variable_set("comment_pi_activity", COMMENT_NODE_DISABLED);
	variable_set('upload_pi_activity', 0);
}

/**
 * Implementation of hook_uninstall().
 */
function pi_activity_uninstall() {
	// Remove tables.
	drupal_uninstall_schema('pi_activity');
	
	variable_del("og_content_type_usage_pi_activity");
	variable_del("node_options_pi_activity");
	variable_del("comment_pi_activity");
	variable_del("upload_pi_activity");
}

/**
 * Implementation of hook_schema().
 */
function pi_activity_update_6000()
{
  //Get the new schema definition and make sure cache is updated
  
  $schema['pi_activity'] = drupal_get_schema('pi_activity', true);
  $schema['pi_activity_stage_state'] =  drupal_get_schema('pi_activity_stage_state', true);
  
  $results = array();
  db_create_table($results, 'pi_activity_stage_state', $schema['pi_activity_stage_state'] );
  db_rename_table($results, 'pi_activity', 'pi_activity_old');
  db_create_table($results, 'pi_activity', $schema['pi_activity'] );
  _pi_activity_upgrade_execute();
  db_drop_table($results, 'pi_activity_actor');
  db_drop_table($results, 'pi_stage_phase_activity');
  db_drop_field($results, 'pi_activity_node', 'inquiry_id');
  db_drop_field($results, 'pi_activity_status', 'inquiry_id');
  return $results;
}

function _pi_activity_upgrade_execute()
{
  $new_node_ids = array();
  
  $node_count = 0;
  $result = db_query('SELECT * FROM {pi_activity_old} LIMIT 10');
  while($row = db_fetch_array($result))
  {
    $node_count++;
    $activity_id = $row['activity_id'];

    $new_node = _pi_activity_upgrade_covert_to_node($row);
    pi_debug_message($new_node);
    node_save($new_node);
    $new_node_id = $new_node->nid;
    $new_node_ids[$activity_id] = $new_node_id;
  }
  drupal_set_message("Total activities to change $node_count...");

  $tables_and_columns_to_change = array(
    'pi_activity_enter_focus' => 'activity_id',  
    'pi_activity_leave_focus' => 'activity_id',  
    'pi_activity_node' => 'activity_id',  
    'pi_activity_preference' => 'show_activity',  
    'pi_activity_status' => 'activity_id',  
    'pi_inquiry_grouping' => 'activity_id',  
  );
  
  foreach($tables_and_columns_to_change as $table => $column)
  {
     _pi_activity_upgrade_copy_update_and_replace_table($table, $column, $new_node_ids);
     drupal_set_message("Updated $table [$column]");
  }
}


/**
 * 
 * this function converts the activity data in pi_activity, pi_activity_actor, and pi_stage_phase_activity to
 * a node, with the necessary fields for it to be saved in the new format
 * The new format consolidates pi_activity_actor into the pi_activity table, and replaces pi_stage_phase_activity with
 * pi_activity_stage_state.  This table contains a desired state for an activity in the stage, to be set when switching stages
 * but individual groups will have their own activity states set using the teacher orchestration tools 
 * @param array $activity pi_activity database row, in 'original' format
 */
function _pi_activity_upgrade_covert_to_node($activity)
{
  $node = new stdClass();
  $node->type = 'pi_activity';

  $rows_to_properties = array(
    'name' => 'title',
    'description' => 'body',
	'activity_type' => 'activity_type',
	'node_type' => 'node_type',  
    'parameters' => 'parameters',
    'destination' => 'destination',
  );  

  foreach($rows_to_properties as $row => $property)
  {
    $node->$property = $activity[$row];
  }

  $node->selects['audience'] = $activity['audience'];
  
  // Find the actor for the activity and add it to the new table schema 
  // only get the first actor in the database, since multiple actors doesn't make sense in the system now
  $actor_result = db_query("SELECT * FROM {pi_activity_actor} WHERE `activity_id` = %d LIMIT 1", $row['activity_id']);
  if($actor_result!=NULL)
  {
    $actor_row = db_fetch_object($actor_result);
    $node->selects['gid'] = $actor_result->gid;
  }
  else
  {
    $node->selects['gid'] = NULL;
  }

  // Find the stage associated with the activity and 
  // add it directly to the pi_activity table for the new schema
  //again only use the first phase found as activities can only belong to one phase
  $phase_result = db_query("SELECT DISTINCT {pi_stage_phase}.`phase_id` FROM {pi_stage_phase_activity} " .
      "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase}.`psp_id` = {pi_stage_phase_activity}.`psp_id` " .
      "WHERE {pi_stage_phase_activity}.`activity_id` = %d LIMIT 1", $row['activity_id']);
  if($phase_result!=NULL)
  {
    $phase_nid_row = db_fetch_array($phase_result);
    $node->activity_phases_stages['phase_nid'] = $phase_nid_row['phase_id'];
    
    // Assuming the activity doeds belong to a phase, find the corresponding stage states for the activity
    // and map them to the new schema
    $node->activity_phases_stages['stages']['stage_select'] = array();
    
    $stage_result = db_query("SELECT DISTINCT {pi_stage_phase}.`stage_id` FROM {pi_stage_phase_activity} " .
        "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase}.`psp_id` = {pi_stage_phase_activity}.`psp_id` " .
        "WHERE ( {pi_stage_phase_activity}.`activity_id` = %d ) " .
        "AND ({pi_stage_phase}.`phase_id` = %d)", $row['activity_id'], $phase_nid_row['phase_id']);
    
    if($stage_result!=NULL)
    {
      while($row=db_fetch_array($stage_result))
      {
        $node->activity_phases_stages['stages']['stage_select'][$row['stage_id']] = TRUE;
      }
    }    
  }
  else
  {
    $node->activity_phases_stages['phase_nid'] = NULL;
    $node->activity_phases_stages['stages']['stage_select'] = array();    
  }  
  
  return $node;
}

function _pi_activity_upgrade_copy_update_and_replace_table($table_name, $column_name, $new_node_ids)
{
  //Since activity_id and new nids may over lapyou have to move data from one table to another instead
  // of changing on mass
  db_query("CREATE TABLE {%s} LIKE {%s}", $table_name . '_tmp', $table_name);
  //get the coulmn names to copy data using
  $rows = db_query("SELECT * FROM {%s}", $table_name);
  if(is_array($rows))
  {
    foreach($new_node_ids as $activity_id => $node_id)
    {
      _pi_activity_upgrade_copy_update_one_activity_id($table_name, array_keys($rows), $column_name, $activity_id, $node_id);
    }
  }
  // now replace all the changed rows...
  db_query('REPLACE INTO {%s} SELECT * FROM {%s}', $table_name, $table_name . '_tmp');
  // and drop the temp table
  db_query('DROP TABLE {%s}', $table_name . '_tmp');
}

function _pi_activity_upgrade_copy_update_one_activity_id($table_name, $column_names, $id_column_name, $activity_id, $node_id)
{
  $columns_and_new_values = array_combine($column_names, $column_names);
  $columns_and_new_values[$id_column_name] = $node_id;
  
  $query = "INSERT INTO {%s} . (" . implode($column_names, ', ') . ") " .
  	" SELECT (" . implode($columns_and_new_values, ', ') . ") FROM {%s} WHERE `%s` = %d";
  db_query($query, $table_name . '_tmp', $table_name, $id_column_name, $activity_id);
}


function pi_activity_schema() {
  $schema = array();
   $schema['pi_activity'] = array(
    'description' => 'PI Activity.',
    'fields' => array(
	  'nid' => array(
        'description' => 'Activity node id, used to be activity_id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
	  'vid' => array(
        'description' => 'Activity node id, used to be activity_id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'phase_nid' => array(
        'description' => 'The phase this activity is associated with.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'activity_type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Activity type - category of activity e.g. data collection.'
      ),
      'node_type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Node type - content type of a node created/used in an activity.'
      ),
      'parameters' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'default' => '',
        'description' => 'Parameters needed to create/use a node in an activity (optional).'
      ),
      'destination_after' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'destination - form destination page after submission e.g. phase, self.'
      ),
      'audience' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'audience - intended audience category for a created node e.g. individual, group, class, multiclass.'
      ),
      'actor' => array(
        'description' => 'og group nid of the actor group',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('nid', 'vid'),
    'indexes' => array(
      'nid' => array('nid'), 
      'vid' => array('vid'),
      'phase_nid' => array('phase_nid'), 
      'activity_type' => array('activity_type'),
      'actor' => array('actor')
    )
  );
  $schema['pi_activity_stage_state'] = array(
    'description' => 'State of an activity in a particular stage',
    'fields' => array(
      'pass_id' => array(
        'description' => 'Primary key: Id column for this table',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'activity_nid' => array(
        'description' => 'Activity node id for this stage-state definition',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
	  'stage_nid' => array(
        'description' => 'Stage node id for this stage-state definition',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),      
      'stage_state' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => 'shown',
        'description' => 'Activity state: the visible state of the activity in this stage'
      )
    ),
    'primary key' => array('pass_id'),
    'indexes' => array(
      'activity_id' => array('activity_nid'), 
      'stage_nid' => array('stage_nid'), 
    )
  );
  $schema['pi_activity_enter_focus'] = array(
	'description' => 'PI activity enter focus',
	'fields' =>	array(	
		'paef_id' => array(
			'type' => 'serial',
			'length' => 10,
			'unsigned' => TRUE,
			'not null' => TRUE,
			'default' => NULL,
	 		'description' => '' ),
      	'activity_type' => array(	
      		'type' => 'varchar',
        	'length' => 64,
        	'not null' => FALSE,
			'description' => '' ),
		'inquiry_id' => array(
			'type' => 'int',
			'length' => 10,
			'unsigned' => TRUE,
			'not null' => FALSE,
			'default' => NULL,
	 		'description' => '' ),
		'activity_id' => array(
			'type' => 'int',
			'length' => 10,
			'unsigned' => TRUE,
			'not null' => FALSE,
			'default' => NULL,
	 		'description' => '' ),
  		'node_function' => array(	
  			'type' => 'varchar',
			'length' => 32,
        	'not null' => TRUE,
			'description' => '' ),	
  		'visible_status' => array(	
  			'type' => 'varchar',
        	'length' => 32,
        	'not null' => TRUE,
			'description' => '' ),
		'prior_nf' => array(
			'type' => 'varchar',
        	'length' => 32,
        	'not null' => FALSE,
			'description' => '' ),	
  		'prior_vs' => array(
  			'type' => 'varchar',
        	'length' => 32,
        	'not null' => FALSE,
			'description' => '' )	),	
	'primary key' =>	array(	'paef_id'),
	'indexes' => 	array(	'activity_type' => array('activity_type'),
							'inquiry_id' => array('inquiry_id'),
      						'activity_id' => array('activity_id'),
							'prior_nf' => array('prior_nf'),
							'prior_vs' => array('prior_vs') 	)
	);
	
	$schema['pi_activity_leave_focus'] = array(
	'description' => 'PI activity leave focus',
	'fields' =>	array(
		'palf_id' => array(
			'type' => 'int',
			'length' => 10,
			'unsigned' => TRUE,
			'not null' => TRUE,
			'default' => NULL,
	 		'description' => '' ),
      	'activity_type' => array(
      		'type' => 'varchar',
        	'length' => 64,
        	'not null' => FALSE,
			'description' => '' ),
		'inquiry_id' => array(
			'type' => 'int',
			'length' => 10,
			'unsigned' => TRUE,
			'not null' => FALSE,
			'default' => NULL,
	 		'description' => '' ),
		'activity_id' => array(
			'type' => 'int',
			'length' => 10,
			'unsigned' => TRUE,
			'not null' => FALSE,
			'default' => NULL,
	 		'description' => '' ),
  		'node_function' => array(	
  			'type' => 'varchar',
        	'length' => 32,
        	'not null' => TRUE,
			'description' => '' ),	
  		'visible_status' => array(	
  			'type' => 'varchar',
        	'length' => 32,
        	'not null' => TRUE,
			'description' => '' ),
		'prior_nf' => array(
			'type' => 'varchar',
        	'length' => 32,
        	'not null' => FALSE,
			'description' => '' ),	
  		'prior_vs' => array(
  			'type' => 'varchar',
        	'length' => 32,
        	'not null' => FALSE,
			'description' => '' )	),	
	'primary key' =>	array(	'palf_id'),
	'indexes' => 	array(	'activity_type' => array('activity_type'),
							'inquiry_id' => array('inquiry_id'),
      						'activity_id' => array('activity_id'),
							'prior_nf' => array('prior_nf'),
							'prior_vs' => array('prior_vs') 	)
	);

	$schema['pi_activity_node'] = array(
    'description' => 'PI Activity node.',
    'fields' => array(
		'pan_id' => array(
        	'type' => 'serial',
			'length' => 10,
			'unsigned' => TRUE,
			'not null' => TRUE,
			'description' => 'Primary Key: Unique category ID' ),
      	'inquiry_id' => array(
        	'type' => 'int',
			'length' => 10,
        	'unsigned' => TRUE,
        	'not null' => TRUE,
        	'description' => 'PI Inquiry id.' ),
		'activity_id' => array(
        	'type' => 'int',
			'length' => 10,
        	'unsigned' => TRUE,
        	'not null' => TRUE,
        	'description' => 'Activity id.' ),
        'nid' => array(
        	'type' => 'int',
        	'length' => 10,
        	'unsigned' => TRUE,
        	'not null' => TRUE,
        	'description' => 'Node id.' ) ),
	'primary key' => array('pan_id'),
	'indexes' => array( 'inquiry_id' => array('inquiry_id'),
						'activity_id' => array('activity_id'),
						'nid' => array('nid') ),
	);

	$schema['pi_activity_preference'] = array(
	'description' => 'PI Activity Preference.',
	'fields' =>	array(
		'pap_id' =>	array(
			'type' => 'serial',
			'length' => 10,
			'unsigned' => TRUE,
			'not null' => FALSE,
			'default' => NULL,
			'description' => '' ),
		'show_activity' => array(	
			'type' => 'blob',
  			'mysql_type' => 'binary',
			'description' => '' ),
		'uid' => array(	
			'type' => 'int',
			'length' => 10,	
			'unsigned' => TRUE,
			'not null' => FALSE,
			'default' => NULL,
			'description' => 'User id' ),
		'gid' => array(
			'type' => 'int',
			'unsigned' => TRUE,
			'not null' => FALSE,
			'default' => NULL,
			'length' => 10,
			'description' => 'Group id' )	),
	'primary key' =>	array(	'pap_id'),
    'indexes' => 		array(	'uid' => array('uid', 'gid') )
	);

	$schema['pi_activity_status'] = array(
    'description' => 'PI Activity status.',
    'fields' => array(
		'pas_id' => array(
			'type' => 'serial',
        	'length' => 10,
        	'unsigned' => TRUE,
        	'not null' => TRUE,
        	'description' => 'Primary Key: Unique category ID.' ),
        'inquiry_id' => array(
        	'type' => 'int',
        	'length' => 10,
        	'unsigned' => TRUE,
        	'not null' => TRUE,
        	'description' => 'Inquiry id.' ),
        'activity_id' => array(
        	'type' => 'int',
        	'length' => 10,
        	'unsigned' => TRUE,
        	'not null' => FALSE,
        	'description' => 'Activity id.' ),
        'uid' => array(
        	'type' => 'int',
        	'length' => 10,
        	'unsigned' => TRUE,
        	'not null' => FALSE,
        	'default' => NULL,
        	'description' => 'User id.' ),
        'gid' => array(
        	'type' => 'int',
        	'length' => 10,	
        	'unsigned' => TRUE,
        	'not null' => FALSE,
        	'default' => NULL,
        	'description' => 'Group id.' ),
      'node_function' => array(
        	'type' => 'varchar',
        	'length' => 255,
        	'not null' => FALSE,
        	'default' => '',
        	'description' => 'node_function - type of drupal node function i.e. add, edit, view.' ),
      'visible_status' => array(
        	'type' => 'varchar',
        	'length' => 255,
        	'not null' => FALSE,
        	'default' => '',
        	'description' => 'visible_status - type of icon used for an activity link i.e. start, in_progress, view, unavailable.' ) ),
    'primary key' => array('pas_id'),
    'indexes' => array( 'inquiry_id' => array('inquiry_id'),
						'activity_id' => array('activity_id'),
						'uid' => array('uid'),
						'gid' => array('gid'),
						'visible_status' => array('visible_status') )
	);

/*
	$schema['pi_previous_activity_status'] = array(
	'description' => 'PI previous activity status',
	'fields' =>	array(	
		'pas_id' =>	array(
			'type' => 'int',
			'unsigned' => TRUE,
			'not null' => TRUE,
			'default' => NULL,
			'description' => '' ),
		'inquiry_id' =>	array(
			'type' => 'int',
			'unsigned' => TRUE,
			'not null' => TRUE,
			'default' => NULL,
			'description' => '' ),
		'activity_id' =>	array(
			'type' => 'int',
			'unsigned' => TRUE,
			'not null' => TRUE,
			'default' => NULL,
			'description' => '' ),	
        'uid' => array(
        	'type' => 'int',
        	'unsigned' => TRUE,
        	'not null' => TRUE,
        	'default' => NULL,
        	'description' => 'User id' ),
        'gid' => array(
        	'type' => 'int',
        	'unsigned' => TRUE,
        	'not null' => TRUE,
        	'default' => NULL,
        	'description' => 'Group id' ),	
      'node_function' => array(
        	'type' => 'varchar',
        	'length' => 255,
        	'not null' => TRUE,
        	'default' => '',
        	'description' => 'node_function - type of drupal node function i.e. add, edit, view.' ),
      'visible_status' => array(
        	'type' => 'varchar',
        	'length' => 255,
        	'not null' => TRUE,
        	'default' => '',
        	'description' => 'visible_status - type of icon used for an activity link i.e. start, in_progress, view, unavailable.' ) ),	
    'indexes' => 		array(	'pas_id' => array('pas_id'),
      							'node_function' => array('node_function') 	),
	);
*/
	
	return $schema;
}
