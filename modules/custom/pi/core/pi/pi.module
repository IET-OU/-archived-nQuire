<?php
// $Id: pi.module,v 0.1 2009/05/10 09:00:00 tdc5 $

/**
 * @file
 * Enables the use of the PI activity guide.
 */

/**
 * $path
 * ?q=node/nid/view (view is optional)
 * ?q=node/nid/edit
 * ?q=node/add/node_type
 *
 * Following arguments are:
 * inquiry_id
 * stage_id
 * phase_id
 * activity_id
 *
 * Following arguments are:
 * Parameter(s)
 *
 * Following arguments are:
 * &destination=nid
 */

/**
 * Returns a keyed array. The keys are inquiry_id, stage_id, phase_id,
 * activity_id, parameters, destination_nid
 */
function pi_init() {
	drupal_add_css(drupal_get_path('module', 'pi') .'/pi.css');
}

/**
 * hook_menu() - defines the menu items for general inquiry navigation including special paths
 * for inquiry/%, phase/% and activity/%, activity/%/{view,edit,add}
 * @return an array of menu items as per Drupal api.
 */
function pi_menu() {

	$items = array();

	// Do not cache this menu item during the development of this module.

	$items['home'] = array(
		'title' => 'Home',
		'page callback' => 'pi_home_view',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);

	$items['inquiry'] = array(
		'title' => 'Inquiry',
		'page callback' => 'pi_home_view',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
	);

	$items['inquiry/%node'] = array(
		'page callback' => 'pi_inquiry_inquiry_view',
	    'page arguments' => array(1),
		'file' => 'pi.phases_view.inc',
		'access arguments' => array('access content'),
	    'type' => MENU_CALLBACK
	);

	$items['inquiry/%node/view'] = array(
		'title' => 'View',
	    'page callback' => 'pi_inquiry_inquiry_view',
	    'page arguments' => array(1),
		'file' => 'pi.phases_view.inc',
		'access arguments' => array('access content'),
	    'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0
	);
	
	$items['phase/%node'] = array(
		'title' => 'Phase',
		'page callback' => 'pi_inquiry_phase_view',
	    'page arguments' => array(1),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
	$items['export/%/csv'] = array(
		'title' => 'CSV',
		'access callback' => TRUE,
		'page callback' => 'pi_data_export_csv',
		'type' => MENU_CALLBACK,
	);

	$items['export/%/kml'] = array(
		'title' => 'KML',
		'access callback' => 'pi_activity_view',
		'page callback' => 'pi_data_export_kml',
		'type' => MENU_CALLBACK,
	);

	$items['set_stage'] = array(
		'title' => 'Stage selector',
		'page callback' => 'pi_stage_selector_view',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	return $items;
}

function pi_stage_selector_view() {
	$query = "SELECT nid FROM node WHERE type = 'pi_stage_selector' ORDER BY nid DESC LIMIT 1";
	$nid = db_result(db_query($query));
	if ($nid) {
		$loaded_node = node_load($nid);
		if( ! function_exists("node_page_edit")) {
			include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
		}
		$output = node_page_edit($loaded_node);
	}
	else {
		if( ! function_exists("node_add")) {
			include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
		}
		$output = node_add('pi_stage_selector');
	}
	return $output;
}

/**
 * Saves an inquiry_phase into the pi_inquiry_phase table
 * If it does not exist (pip_id is null) then it will be created.
 * If pip_id is specified the inquiry phase will be updated, unless pip_id doesn't exist
 * if $inquiry_phase does not specify all columns updates will work but inserts will not
 * and then it will be treated as a new record and issued with a new id.
 * @param array $inquiry_phase consists of pip_id uint, inquiry_id uint, phase_id uint and position tinyint.
 * @return db_query() result: FALSE on failure.
 */
function save_inquiry_phase($inquiry_phase) {
	// These are the fields that will be inserted if specified
	$allowed_fields = array('inquiry_id', 'phase_id', 'position');

	// Assume this is an INSERT unless pip_id is set and exists in db.
	$query = "INSERT INTO `pi_inquiry_phase` SET (%s)";
	if(isset($inquiry_phase['pip_id']))
	{
		// pip_id is specified so try an UPDATE only if it exists in db already
		$query = "SELECT COUNT(`pip_id`) from pi_inquiry_phase WHERE pip_id=%d";

		$result = db_query($query, array($inquiry_phase['pip_id']));
		if(db_result($result)==1)
		{
			// There is an existing inquiry_phase to go ahead and update it.
			$query = "UPDATE `pi_inquiry_phase` SET %s WHERE `pip_id`='" .
			db_escape_string($inquiry_phase['pip_id']) . "'";
		}
	}
	$fields = '';
	foreach($inquiry_phase as $field => $value)
	{
		if(in_array($field, $allowed_fields))
		{
			// Add comma if it's not the first value
			if($fields!='')
			{
				$fields .= ', ';
			}
			$fields .= "`$field`='" . db_escape_string($value) . "'";
		}
	}
	$result = db_query(str_replace('%s', $fields, $query));
	return $result;
}

function pi_inquiry_inquiry_view($node) {
	global $user;
	$uid = $user->uid;
    $image_path = drupal_get_path( 'module', 'pi' ) . '/images/';
	
	$details = get_inquiry_details_from_current_path();
	
	/*
	 * We are now assuming a 1-1 mapping of both activities and phases to inquiries
	 * This means we no longer need session ids
	 * to find the inquiry when on the phase or activity level
	*/
	
	
	//set current inquiry
	//$sid = get_current_session_id();
	//set_current_inquiry_for_session_and_user_id($details->inquiry_id, $sid, $uid);
	

	$loaded_stage = node_load($details->stage_id);
	drupal_set_title($loaded_stage->title);
	$output = "<p>" . $loaded_stage->body . "</p>";
	$phases = get_phases_of_inquiry_and_user($details->inquiry_id, $user->uid);

	// Header
	$header = array(
	t('Name'),
	t('Description'),
	);

	$rows = array();

	//current phase check
	$current_stage = get_current_stage_of_inquiry_and_user($details->inquiry_id, $user->uid);
	if (isset($current_stage->stage_id))
	{
		$current_stage_id = $current_stage->stage_id;
		$stage = node_load($current_stage_id);
		$phases_of_current_stage = $stage->phases;
	}
	else
	{
		$current_stage_id = '';
		$phases_of_current_stage = array();
	}

	foreach($phases as $phase_nid)
	{
		$phase = node_load($phase_nid);
		$row = array();
		if (in_array($phase->nid, $phases_of_current_stage)) {
			$row[] = l(t($phase->title . " <img width='12' src='" . $image_path . "/folder_empty_current.png'/>"), t("phase/" . $phase->nid), array('html' => TRUE));
		}
		else {
			$row[] = l($phase->title, t("phase/" . $phase->nid));
		}
		$row[] = $phase->body;
		$rows[] = array('data' => $row);
		$activity_count[] = count(get_activities_of_stage_phase_and_user($phase->inquiry_id, NULL, $phase->nid, $user->uid));
		$new_activity_count[] = new_activity_list_count($phase->inquiry_id, $phase->nid, $user->uid);
	}
	//get_phase_view_preference
	$output .= display_phases( $rows, $activity_count, $new_activity_count, $node->layout);
	//$output .= theme('table', $header, $rows);
	return $output;
}



function pi_cycle_phase_view($rows) {
	foreach($rows as $next) {
		$row = $next->data;
		$output .= '1'.next($row);
		$output .= '2'.next($row);
	}
	return $output;
	/*
	 $pos_array = (array(0, 400), array(100, 100), array(100, 500), array(200, 100), array(200, 500), array(300, 200), array(300, 400));

	 $output = "<div style='position: relative; width: 100%; height: 500px;'>";
	 $output .= "<div style='position: absolute; top: 0px; left: 200px; width: 180px; background-color: gray;'>";
	 $output .= "<div style='float:left; background-color: red'>title</div>"
	 $output .= "<div style='clear:both;float:left; background-color: blue'>body</div>";
	 $output .= "</div>";


	 */
}


/**
 * pi_home_view - Home page for PI that lists all the inquiries
 */
function pi_home_view() {
	global $user;
	drupal_set_title("My inquiries");
	$output = "<p>Choose an inquiry.</p>";

	// Header
	$header = array(
		t('Inquiry'),
		t('Description'),
	);

	$rows = array();

	//list all inquiries for the user
	$inquiries_for_user = get_inquiries_of_user($user->uid);
	foreach($inquiries_for_user as $inquiry)
	{
		$row = array();
		$row[] = l($inquiry->title, t("inquiry/" . $inquiry->nid));
		$row[] = $inquiry->body;
		$rows[] = array('data' => $row);
	}

	$output .= theme('table', $header, $rows);
	return $output;
}

function compare_phase($a, $b) {
	$aposition = $a->position;
	$bposition = $b->position;
	$aphase = $a->phase_id;
	$bphase = $b->phase_id;
	if ($aphase == $bphase) {
		if ($aposition == $bposition) {
			return 0;
		};
		if ($aposition < $bposition) {
			return -1;
		};
		if ($aposition > $bposition) {
			return 1;
		};
	}
	else {
		if ($aphase < $bphase) {
			return -1;
		};
		if ($aphase > $bphase) {
			return 1;
		};
	}
}

function compare_status($a, $b) {
	$aposition = $a->position;
	$bposition = $b->position;
	$status = array();
	$status["start"] = 0;
	$status["edit"] = 1;
	$status["view"] = 2;
	$status["unavailable"] = 3;
	$astatus = $status[$a->visible_status];
	$bstatus = $status[$b->visible_status];
	if ($astatus == $bstatus) {
		if ($aposition == $bposition) {
			return 0;
		};
		if ($aposition < $bposition) {
			return -1;
		};
		if ($aposition > $bposition) {
			return 1;
		};
	}
	else {
		if ($astatus < $bstatus) {
			return -1;
		};
		if ($astatus > $bstatus) {
			return 1;
		};
	}
}


/**
 * Produces the view of the activities, etc within a particular phase in an inquiry
 * @param $phase A node of type pi_phase
 * @return sting HTMl output of the phase
 */
function pi_inquiry_phase_view($phase) {

	global $user;
	$details = get_inquiry_details_from_current_path();
	drupal_set_title($phase->title);

	//stage is set to NULL to show all activities of the phase
	$activities = get_activities_of_stage_phase_and_user($phase->inquiry_nid, NULL, $phase->nid, $user->uid);

	$output = "";
	$output .= "<div style='display: block; clear: both;'>";
	$output .= t("<p>" . $phase->body . "</p>");
	$output .= "</div>";
	

	$hidden_created_activity_types = array('pi_key_questions', 'pi_measure_filter', 'pi_available_measures', 'pi_result_presentations', 'pi_data', 'pi_key_answers');
	//$hidden_created_activity_types = array('pi_measure_filter');
	
	
	//$hidden_created_activity_types = array();
	if ($activities) {
	
		// $headings = array('Activity', 'You can...', 'Description');
		$headings = array('Activity', 'Description');
		$table = array();

		$active_activity_flag = 0;

		foreach ($activities as $activity) {
		
			$loaded_activity = load_activity($activity->activity_id);
			$loaded_activity_status = load_activity_status($phase->inquiry_nid, $activity->activity_id, $user->uid);
			
			// only display activities that are not in the hidden list
			if (!(in_array($loaded_activity->node_type, $hidden_created_activity_types)) || $loaded_activity_status->visible_status == 'start' || $loaded_activity_status->visible_status == 'unavailable') {
				switch ($loaded_activity->destination) {
					case "self":
						$destination = t("destination=" . t("activity/" . $activity->activity_id . "/view"));
						break;
					case "phase":
						$destination = t("destination=" . t("phase/" . $phase->nid));
						break;
					default:
						$destination = t("destination=" . t("inquiry/" . $phase->inquiry_nid));
						break;
				};
			
				// so that (by default) always open an exitsing node in view
				// if node_function for link is edit or view then set node function to view
				$link_node_function = $loaded_activity_status->node_function;
				if (($link_node_function == 'edit') OR ($link_node_function == 'view')) {
					$link_node_function = 'view';
				};
			
	  			$activity_path = "activity/" . $activity->activity_id . "/" . $link_node_function;
	  			if ($loaded_activity_status->visible_status == 'unavailable') {
	  				
	  				$activity_link = check_plain($loaded_activity->name) . '&nbsp;' . add_activity_icon($loaded_activity_status->visible_status);
	  			}
				else {
					$image_path = drupal_get_path( 'module', 'pi' ) . '/images/';
					
					/*
					//new activity lightbulb
					if (in_array($activity->activity_id, new_activity_list($details->inquiry_id, $details->phase_id, $user->uid))) {
	  					$new_icon = "<img width='12' src='" . $image_path . "new_activity.png'/>";
	  				}
	  				else {
	  					$new_icon = "";
	  				};
	  			*/
  					$activity_link = l(check_plain($loaded_activity->name) . '&nbsp;' . add_activity_icon($loaded_activity_status->visible_status) . '&nbsp;' . $new_icon, $activity_path, array('html' => TRUE, 'query' => $destination));
				};

	  			if (($active_activity_flag == 0) AND $loaded_activity) {
	  				$active_activity_flag = 1;
	  			};

	  			// $table[] = array($activity_link , ucwords(t($loaded_activity_status->visible_status)), t($loaded_activity->description));
	  			$nid = get_nid_for_inquiry_activity_and_user($phase->inquiry_nid, $activity->activity_id, $user->uid);
	  			$loaded_actvity_node = node_load($nid);
	  			$activity_desc = pi_activity_teaser($loaded_actvity_node, $loaded_activity, $link_node_function);
	  			$table[] = array(array('data' => $activity_link, 'valign' => 'top') , t($activity_desc));
	  			//$table[] = array($activity_link , t($loaded_activity->description));
			};
		};
		
		$output .= theme('table', $headings, $table);
		
		if ($active_activity_flag == 0) {
			$output .= "<div class='status'><div class='messages'><ul><li>None of the above activities can be accessed at this stage.</li></ul></div></div>";
		};
	}
	else {
		$output .= "<div class='status'><div class='messages'><ul><li>No activities are available in this phase at this stage.</li></ul></div></div>";
	};
	return $output;
}

// ****************************************************************


function get_inquiry_details_from_current_path() {
	global $user;
	$uid = $user->uid;

	$result = new stdClass;

	if(arg(0) == 'home') {
		//inquiry, stage, phase an activity are not set
	}
	elseif (arg(0) == 'inquiry' || arg(0) == 'set_stage') {
		//get inquiry from the arg
		if (arg(1)) {
			$result->inquiry_id = (int) arg(1);
		}
			
		//get the current stage for the inquiry and user
		$stage = get_current_stage_of_inquiry_and_user($result->inquiry_id, $uid);
		$result->stage_id = $stage->stage_id;

		//phase and activity are not set
	}
	elseif (arg(0) == 'phase') {
		//get inquiry from the database
		//get direct from the phase id rather than session id
		//$sid = get_current_session_id();
		//$inquiry = get_current_inquiry_for_session_and_user_id($sid, $uid);


		//get the current stage for the inquiry and user
		$stage = get_current_stage_of_inquiry_and_user($result->inquiry_id, $uid);
		$result->stage_id = $stage->stage_id;

		//get phase from the arg
		if (arg(1)) {
			$result->phase_id = (int) arg(1);
			$result->inquiry_id = get_inquiry_id_for_phase_id($result->phase_id);
		}

		//activity is not set
	}
	elseif ((arg(0) == 'activity') || (arg(0) == 'export')) {
		//get inquiry from the database
		//get direct from the activity id rather than session id
		//$sid = get_current_session_id();
		//$inquiry = get_current_inquiry_for_session_and_user_id($sid, $uid);

		//get the current stage for the inquiry and user
		$stage = get_current_stage_of_inquiry_and_user($result->inquiry_id, $uid);
		$result->stage_id = $stage->stage_id;

		//get activity from the arg
		if (arg(1)) {
			$result->activity_id = (int) arg(1);
			$result->inquiry_id = get_inquiry_id_for_activity_id($result->activity_id);
		}
		//get phase of the activity
		$phase = get_phase_of_inquiry_and_activity($result->inquiry_id, $result->activity_id, $uid);
		$result->phase_id = $phase->nid;
	}
	/*
	 if (arg(0) == 'node' && (arg(1) == 'add' || arg(2) == 'edit' || arg(2) == 'view')) {
		$result->inquiry_id = arg(3);
		$result->stage_id = arg(4);
		$result->phase_id = arg(5);
		$result->activity_id = arg(6);
		}
		elseif (arg(0) == 'node' && is_numeric(arg(1)) && is_numeric(arg(2))) {
		$result->inquiry_id = arg(2);
		$result->stage_id = arg(3);
		$result->phase_id = arg(4);
		$result->activity_id = arg(5);
		}
		else {
		$result->inquiry_id = arg(3);
		$result->stage_id = arg(4);
		$result->phase_id = arg(5);
		$result->activity_id = arg(6);
		}*/
	return $result;
}

function get_inquiry_details_of_node_path($path) {
	/**
	 * Returns a keyed array. The keys are inquiry_id, stage_id, phase_id,
	 * activity_id, parameters, destination_nid
	 */

	//$result = array();

	$split_pos = stripos($path, '&');

	$path_start = substr($path, 0, $split_pos);
	$path_end = substr($path, $split_pos);

	$arguments = explode('/', $path_end);


	$result->inquiry_id = $arguments[3];
	$result->stage_id = $arguments[4];
	$result->phase_id = $arguments[5];
	$result->activity_id = $arguments[6];
	$result->parameters = array_slice($arguments, 7);

	$result->destination_nid = substr($path_end, strlen('&destination='));

	return $result;

}

function get_inquiry_id_for_phase_id($phase_id) {
	/**
	 * Returns the inquiry id.
	 * Assumes 1-1 mapping of phases to inquiries
	 * If more than one returns the one with the highest unique key in pi_inquiry_phase
	 */
	 $result = db_fetch_object(db_query("SELECT inquiry_id FROM pi_inquiry_phase WHERE phase_id = '" . $phase_id . "' ORDER BY pip_id DESC LIMIT 1;"));
	 return $result->inquiry_id;
}

// ----------------------------------------------------------------------------------

/**
 * Functions in this block are for loading inquiries, stages and phases
 */

/**
 * Returns an inquiry node object from the database - use node_load() instead!
 * @param unknown_type $inquiry_id
 */
function load_inquiry($inquiry_id) {
	drupal_set_message("load_inquiry depricated, use node_load instead", 'warning', FALSE);
	return node_load($inquiry_id);
}

/**
 * Returns the stage_object from pi_stage table  - use node_load() instead!
 */
function load_stage($stage_id) {
	drupal_set_message("load_stage depricated, use node_load instead", 'warning', FALSE);
	return node_load($stage_id);
}

/**
 * Returns the phase_object from pi_phase table - use node_load() instead!
 */
function load_phase($phase_id) {
	drupal_set_message("load_phase depricated, use node_load instead", 'warning', FALSE);
	return node_load($phase_id);
}

// ----------------------------------------------------------------------------------

/**
 * Functions in this block are for groups
 */

/**
 * Type can be group, class or multiclass.
 * Returns an array of gid values.
 */
function get_group_of_type ($uid, $group_type, $inquiry_id, $stage_id = NULL, $phase_id = NULL, $activity_id = NULL) {
	$query = "SELECT pi_group_type.gid FROM pi_group_type ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_group_type.gid ";
	$query .= "LEFT JOIN pi_grouping_group ON pi_grouping_group.gid = pi_group_type.gid ";
	$query .= "LEFT JOIN pi_inquiry_grouping ON pi_inquiry_grouping.grouping_id = pi_grouping_group.grouping_id ";
	$query .= "WHERE pi_group_type.type = '" . $group_type . "' ";
	$query .= "AND og_uid.uid =  '" . $uid . "' ";
	$query .= "AND (pi_inquiry_grouping.inquiry_id =  '" . $inquiry_id . "' OR pi_inquiry_grouping.inquiry_id IS NULL) ";
	$query .= "AND (pi_inquiry_grouping.stage_id =  '" . $stage_id . "' OR pi_inquiry_grouping.stage_id IS NULL) ";
	$query .= "AND (pi_inquiry_grouping.phase_id =  '" . $phase_id . "' OR pi_inquiry_grouping.phase_id IS NULL) ";
	$query .= "AND (pi_inquiry_grouping.activity_id =  '" . $activity_id . "' OR pi_inquiry_grouping.activity_id IS NULL) ";

	$result = db_result(db_query($query));
	return $result;
}

/**
 * Returns an array containing the uids for the members of the group.
 * The group could be a group, class or multiclass.
 */
function get_members_of_group ($gid) {
	$query = "SELECT uid FROM og_uid ";
	$query .= "WHERE nid = '" . $gid . "'";

	$result = db_query($query);
	return $result;

}

/**
 * Returns TRUE or FALSE depending on whether user is member of group.
 * @param unknown_type $gid
 * @param unknown_type $uid
 * @return Ambigous <string, NULL>
 */
function check_member_of_group($gid, $uid) {
	$members = get_members_of_group ($gid);

	if ($members == NULL) {
		$result = NULL;
	}
	elseif (in_array($uid, $members)) {
		$result = TRUE;
	}
	else {
		$result = FALSE;
	};

	return $result;
}

/**
 * Returns an array containing the gids for the groups of a grouping.
 */
function get_groups_from_grouping($grouping_id) {
	$query = "SELECT pi_grouping_group.gid FROM pi_grouping_group ";
	$query .= "WHERE pi_grouping_group.grouping_id = '" . $grouping_id ."'";

	$result = db_query($query);
	return $result;
}

/**
 * Returns all groups (student group, class, etc.) of which the user is a member.
 */
function get_groups_of_user($uid) {
	$query = "SELECT nid FROM og_uid ";
	$query .= "WHERE uid = '" . $uid . "'";

	$result = db_result(db_query($query));
	return $result;
}

/**
 * Returns a grouping_id.
 * @param unknown_type $inquiry_id
 * @param unknown_type $stage_id
 * @param unknown_type $phase_id
 * @param unknown_type $activity_id
 * @return unknown
 */
function get_grouping($inquiry_id, $stage_id = NULL, $phase_id = NULL, $activity_id = NULL) {
	$query = "SELECT pi_inquiry_grouping.grouping_id FROM pi_inquiry_grouping ";
	$query .= "WHERE pi_inquiry_grouping.inquiry_id = '" . $inquiry_id . "' ";
	if($stage_id != NULL){
		$query .= "AND (pi_inquiry_grouping.stage_id ='" . $stage_id . "' OR pi_inquiry_grouping.stage_id IS NULL) ";
	}
	if($phase_id != NULL){
		$query .= "AND (pi_inquiry_grouping.phase_id ='" . $phase_id . "' OR pi_inquiry_grouping.phase_id IS NULL) ";
	}
	if($activity_id != NULL){
		$query .= "AND (pi_inquiry_grouping.activity_id ='" . $activity_id . "'  OR pi_inquiry_grouping.activity_id IS NULL) ";
	}

	$result = db_result(db_query($query));
	return $result;
}

/**
 * Returns the created grouping_id.
 * @param unknown_type $name
 * @param unknown_type $description
 * @param unknown_type $inquiry_id
 * @param unknown_type $stage_id
 * @param unknown_type $phase_id
 * @param unknown_type $activity_id
 * @return unknown_type
 */
function add_grouping($name, $description, $inquiry_id, $stage_id = NULL, $phase_id = NULL, $activity_id = NULL) {
	//insert pi_grouping
	$query1 = "INSERT INTO pi_grouping ";
	$query1 .= "SET name = '" . $name . "' ";
	$query1 .= ", description = '" . $description . "' ";
	db_query($query1);

	//grouping_id from abouve query is
	$query2 = "SELECT MAX(pi_grouping.grouping_id) FROM pi_grouping";
	$grouping_id = db_result(db_query($query2));

	//insert pi_grouping_group
	$query3 = "INSET INTO pi_inquiry_grouping ";
	$query3 .= "SET inquiry_id = '" . $inquiry_id . "' ";
	if($stage_id != NULL){
		$query3 .= ", stage_id = '" . $stage_id . "' ";
	}
	if($phase_id != NULL){
		$query3 .= ", phase_id = '" . $phase_id . "' ";
	}
	if($activity_id != NULL){
		$query3 .= ", activity_id = '" . $activity_id . "' ";
	}
	$query3 .= ", grouping_id = '" . $grouping_id . "' ";
	db_query($query3);

}

/**
 * Get the current grouping - class and group can change within/across inquiries
 * @param unknown_type $inquiry_id
 * @param unknown_type $stage_id
 * @param unknown_type $phase_id
 * @param unknown_type $activity_id
 * @param unknown_type $uid
 * @return unknown_type
 */
function get_current_group_of_user($inquiry_id, $stage_id, $phase_id, $activity_id, $uid) {
	$grouping = get_grouping($inquiry_id, $stage_id, $phase_id, $activity_id);
	$group_type = "group";

	if ($grouping) {
		$query = "SELECT pi_grouping_group.gid FROM pi_grouping_group, pi_group_type, og_uid ";
		$query .= "WHERE pi_grouping_group.grouping_id = " . $grouping . " ";
		$query .= "AND pi_grouping_group.gid = pi_group_type.gid ";
		$query .= "AND pi_group_type.type = \"" . $group_type . "\" ";
		$query .= "AND pi_grouping_group.gid = og_uid.nid ";
		$query .= "AND og_uid.uid = " . $uid . " ";

		//makes assumption that user is member of only 1 group at a time
		$result = db_result(db_query($query));
		return $result;
	}
	else {
		return NULL;
	}
}

/**
 * Get the current grouping - class and group can change within/across inquiries 
 * @param $inquiry_id
 * @param $stage_id
 * @param $phase_id
 * @param $activity_id
 * @param $uid
 * @return unknown_type
 */
function get_current_class_of_user($inquiry_id, $stage_id, $phase_id, $activity_id, $uid) {
	$grouping = get_grouping($inquiry_id, $stage_id, $phase_id, $activity_id);
	$group_type = "class";

	if ($grouping) {
		$query = "SELECT pi_grouping_group.gid FROM pi_grouping_group, pi_group_type, og_uid ";
		$query .= "WHERE pi_grouping_group.grouping_id = " . $grouping . " ";
		$query .= "AND pi_grouping_group.gid = pi_group_type.gid ";
		$query .= "AND pi_group_type.type = \"" . $group_type . "\" ";
		$query .= "AND pi_grouping_group.gid = og_uid.nid ";
		$query .= "AND og_uid.uid = " . $uid . " ";

		//makes assumption that user is member of only 1 class at a time
		$result = db_result(db_query($query));
		return $result;
	}
	else {
		return NULL;
	}
}

/**
 * adds a group to a grouping
 * @param $grouping_id
 * @param $gid
 * @return unknown_type
 */
 function add_group_to_grouping($grouping_id, $gid) {
	$query = "INSERT INTO pi_grouping_group SET grouping_id = '" . $grouping_id . "', gid = '" . $gid . "'";
	db_query($query);
}

/**
 * Returns the created gid.
 * @param unknown_type $name
 * @param unknown_type $uid_array
 * @param unknown_type $parent_gid
 * @return unknown
 */
function add_group($name, $uid_array, $parent_gid = NULL) {
	$query = "SELECT MAX(og.nid) FROM og";
	$nid = db_result(db_query($query));

	$query = "INSERT INTO og SET ";
	$query .= "nid = '" . $nid . "', ";
	$query .= "selective = '0', ";
	$query .= "description = '" . $name . "', ";
	$query .= "theme = NULL, ";
	$query .= "register = '0', ";
	$query .= "directory = '1', ";
	$query .= "language = NULL, ";
	$query .= "private = '0'";
	db_query($query);

	// add admin user as active admin user
	$query = "INSERT INTO og_uid SET ";
	$query .= "nid = '" . $nid . "', ";
	$query .= "og_role = '0', ";
	$query .= "is_active = '1', ";
	$query .= "is_admin = '1', ";
	$query .= "uid = '1', ";
	$query .= "created = NOW(), ";
	$query .= "changed = NOW()";
	db_query($query);

	// add users as active users
	foreach ($uid_array as $uid) {
		$query = "INSERT INTO og_uid SET ";
		$query .= "og_role = '0', ";
		$query .= "is_active = '1', ";
		$query .= "is_admin = '0', ";
		$query .= "uid = '" . $uid . "', ";
		$query .= "created = NOW(), ";
		$query .= "changed = NOW()";
		db_query($query);
	};

	// tdc5 - not too sure about this next bit - looks dodgy??
	$query = "INSERT INTO pi_group_hierarchy SET ";
	$query .= "gid = '" . $nid . "', ";
	if ($parent_gid == NULL) {
		$query .= "parent_gid = NULL";
	}
	else {
		$query .= "parent_gid = '" . $parent_gid . "'";
	};
	db_query($query);

	return $nid;
}

// --------------------------------------------------------------------------------------

/**
 * Functions in this block are interface where am I stuff
 */

/**
 * This allows you to find out if a phase is visible for a particular user
 * because of a teacher only gid
 * These are flagged in the interface
 * if yes then returns the gid otherwise 0
 */
function check_teacher_phase_for_inquiry_phase_user($inquiry_id, $phase_id, $uid) {
	$query = "SELECT pi_phase_actor.gid, pi_phase_actor.uid ";
	$query .= "FROM pi_phase_actor ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_phase_actor.gid ";
	$query .= "WHERE pi_phase_actor.inquiry_id = " . $inquiry_id . " ";
	$query .= "AND pi_phase_actor.phase_id = " . $phase_id . " ";
	$query .= "AND (pi_phase_actor.uid = " . $uid . " OR og_uid.uid = " . $uid . ") ";
	$result = db_fetch_object(db_query($query));
	if($result->gid) {
		$gid_node = node_load($result->gid);
		if ($gid_node->type == "teacher_group") {
			return $result->gid;
		}
		else {
			return 0;
		}
	}
	elseif ($result->uid) {
		return 0;
	}
}

/**
 * Used to flag teacher only activities from the gid
 */
function check_teacher_activity_for_inquiry_activity_user($inquiry_id, $activity_id, $uid) {
	$query = "SELECT pi_activity_actor.gid, pi_activity_actor.uid ";
	$query .= "FROM pi_activity_actor ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	$query .= "WHERE pi_activity_actor.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND pi_activity_actor.activity_id = '" . $activity_id . "' ";
	$query .= "AND (pi_activity_actor.uid = '" . $uid . "' OR og_uid.uid = '" . $uid . "') ";
	$result = db_fetch_object(db_query($query));
	if($result->gid) {
		$gid_node = node_load($result->gid);
		if ($gid_node->type == "teacher_group") {
			return $result->gid;
		}
		else {
			return 0;
		}
	}
	elseif ($result->uid) {
		return 0;
	}
}

/**
 * Returns an array containing the phase_nids of the inquiry for that user.
 * The phases are ordered by weight.
 */
function get_phases_of_inquiry_and_user($inquiry_id, $uid) {
	$query = "SELECT DISTINCT pi_phase.nid AS nid ";
	$query .= "FROM pi_phase ";
	$query .= "LEFT JOIN pi_phase_actor ON pi_phase_actor.phase_id = pi_phase.nid ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_phase_actor.gid ";
	$query .= "WHERE pi_phase_actor.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND (pi_phase_actor.uid =  '" . $uid. "' OR og_uid.uid =  '" . $uid . "') ";
	$query .= "ORDER BY pi_phase.weight ASC";

	$result = db_query($query);
	$phase_nids = array();
	while($row=db_fetch_array($result))
	{
		$phase_nids[] = $row['nid'];
	}
	return $phase_nids;
}

/**
 * Returns an array containing the stage_ids of the inquiry for that user.
 * The stages are ordered by position.
 */
function get_stages_of_inquiry_and_user($inquiry_id, $uid) {
	$query = "SELECT DISTINCT pi_stage.nid AS nid ";
	$query .= "FROM pi_stage ";
	$query .= "LEFT JOIN pi_stage_actor ON pi_stage_actor.stage_id = pi_stage.nid ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_stage_actor.gid ";
	$query .= "WHERE (pi_stage_actor.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND pi_stage_actor.uid =  '" . $uid. "') ";
	$query .= "OR (pi_stage_actor.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND og_uid.uid =  '" . $uid . "') ";
	$query .= "ORDER BY pi_stage.weight ASC";

	$result = db_query($query);
	$stage_nids = array();
	while($row=db_fetch_array($result))
	{
		$stage_nids[] = $row['nid'];
	}
	return $stage_nids;
}

function insert_stage_phase_activity($psp_id, $activity_id, $position) {
	$query = "INSERT INTO pi_stage_phase_activity (psp_id, activity_id, position) VALUES (" . $psp_id . ", '" . $activity_id . "', '" . $position . "') ";
	db_query($query);
}

/**
 * Returns an array containing the activities of the phase in that stage for that user.
 * The activities are ordered by position.
 */
function get_activities_of_stage_phase_and_user($inquiry_id, $stage_id, $phase_id, $uid) {

	//get the phases and stages for this inquiry and user
	if (is_null($phase_id)) {
		$db_phases = get_phases_of_inquiry_and_user($inquiry_id, $uid);
		$phases = array();
		foreach($db_phases as $db_phase_nid)
		{
			$phases[] = node_load($phase_nid);
		}
	}
	else {
		$phases = array($phase_id);
	}

	/*
	 if (is_null($stage_id)) {
		$db_stages = get_stages_of_inquiry_and_user ($inquiry_id, $uid);
		$stages = array();
		while ($db_stage = db_fetch_object($db_stages)) {
		$stages[] = $db_stage->stage_id;
		}
		}
		else {
		$stages = array($stage_id);
		}*/

	$temp = array();

	if (is_null($stage_id)) {

		foreach($phases as $p){

			$query = "SELECT pi_stage_phase.psp_id FROM pi_stage_phase ";
			$query .= "WHERE pi_stage_phase.phase_id = '" . $p . "'";
			$query_results = db_query($query);
			while ($query_result = db_fetch_object($query_results)) {
				$temp[] = $query_result->psp_id;
			}
		}
	}
	else {
		foreach($phases as $p){
			$query = "SELECT pi_stage_phase.psp_id FROM pi_stage_phase ";
			$query .= "WHERE pi_stage_phase.stage_id = '" . $stage_id . "' AND ";
			$query .= "pi_stage_phase.phase_id = '" . $p . "'";
			$temp[] = db_result(db_query($query));
		}
	}

	//for each of these stages nd phases get the pi_stage_phase psp_id and put it in an array
	/*$temp = array();

	foreach($phases as $p){
	foreach($stages as $s){
	$query = "SELECT pi_stage_phase.psp_id FROM pi_stage_phase ";
	$query .= "WHERE pi_stage_phase.stage_id = '" . $s . "' AND ";
	$query .= "pi_stage_phase.phase_id = '" . $p . "'";
	$temp[] = db_result(db_query($query));
	}
	}*/

	//for each of these psp_id's add the activity_id from pi_stage_phase_activity
	$activities = array();
	foreach($temp as $t){

		/*
		 $query2 = "SELECT * FROM pi_stage_phase_activity ";
		 $query2 .= "WHERE pi_stage_phase_activity.psp_id = '" . $t . "'";*/

		$query2 = "SELECT * FROM pi_stage_phase_activity ";
		$query2 .= "LEFT JOIN pi_activity ON pi_stage_phase_activity.activity_id = pi_activity.activity_id ";
		$query2 .= "LEFT JOIN pi_activity_actor ON pi_activity.activity_id = pi_activity_actor.activity_id ";
		$query2 .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
		$query2 .= "WHERE pi_stage_phase_activity.psp_id = '" . $t . "' ";
		$query2 .= "AND (og_uid.uid = '" . $uid . "' OR pi_activity_actor.uid = '" . $uid . "') ";

		//added ordering by position maw
		$query2 .= "ORDER BY pi_stage_phase_activity.position";

		//activities are ordered in the array by the position
		$answer2 = db_query($query2);
		while ($result2 = db_fetch_object($answer2)) {
			//added in the phase to help with interface listing
			$phase_of_activity = db_fetch_object(
			db_query("SELECT pi_stage_phase.phase_id  FROM pi_stage_phase, pi_stage_phase_activity" .
				" WHERE pi_stage_phase_activity.activity_id = %d AND pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id", $result2->activity_id));
			$result2->phase_id = $phase_of_activity->phase_id;
			//added in the visible status to help with interface listing
			$loaded_activity_status = load_activity_status($inquiry_id, $result2->activity_id, $uid);
			//load_activity_status($result2->activity_id);
			$result2->visible_status = $loaded_activity_status->visible_status;
			$activities[] = $result2;
		}
	}

	return get_unique_activities($activities);
	//return array_unique($activities);
}

//helper function to filter out duplicate activities
function get_unique_activities($activities){
	$unique = array();
	$temp = array();
	foreach($activities as $activity){
		$activity_id = $activity->activity_id;
		if(!(in_array($activity_id,$temp))){
			$temp[] = $activity_id;
			$unique[] = $activity;
		}
	}
	return $unique;
}

/**
 * Returns array of inquiry nodes for user or user's groups
 */
function get_inquiries_of_user($uid = 0) {
	$query = "SELECT DISTINCT(pi_inquiry_actor.inquiry_id) AS nid ";
	$query .= "FROM pi_inquiry_actor ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_inquiry_actor.gid ";
	$query .= "LEFT JOIN pi_inquiry ON pi_inquiry_actor.inquiry_id = pi_inquiry.nid ";
	if ($uid != '0') {
		$query .= "WHERE pi_inquiry_actor.uid = '" . $uid . "' ";
		$query .= " OR og_uid.uid =  '" . $uid . "' ";
	}

	$query .= " ORDER BY pi_inquiry.weight ASC";

	$result = db_query($query);

	$inquiries = array();
	while($row=db_fetch_array($result))
	{
		$inquiries[]= node_load($row['nid']);
	}
	return $inquiries;
}


/**
 * Deprecated function
 */
 /*
function get_current_session_id() {
	global $cookie_domain;
	$session = $_COOKIE[session_name()];
	return $session;
}*/


/**
 * Returns current inquiry_id for session and uid
 * Deprecated function
 */
 /*
function get_current_inquiry_for_session_and_user_id($sid, $uid) {
	// user's current inquiry
	$query = "SELECT pi_current_inquiry.inquiry_id, pi_current_inquiry.pci_id ";
	$query .= "FROM pi_current_inquiry ";
	$query .= "WHERE pi_current_inquiry.sid = '" . $sid . "' ";
	$query .= "AND pi_current_inquiry.uid =  '" . $uid. "' ";

	$result = db_fetch_object(db_query($query));
	return $result;
}*/

/**
 * Sets inquiry_id for session and uid
 * Deprecated function
 */
 /*
function set_current_inquiry_for_session_and_user_id($inquiry_id, $sid, $uid) {
	$query = "DELETE FROM pi_current_inquiry WHERE sid = '" . $sid . "' ";
	db_query($query);
	$query = "INSERT INTO pi_current_inquiry (sid, uid, inquiry_id) VALUES ('" . $sid . "', '" . $uid . "', '" . $inquiry_id . "') ";
	db_query($query);
	clear_expired_sessions();
}*/

/**
 * Deprecated function
 */
 /*
function clear_expired_sessions() {
	$query = "DELETE FROM pi_current_inquiry WHERE NOT EXISTS (select * FROM sessions WHERE sessions.sid = pi_current_inquiry.sid)";
	db_query($query);
}*/


/**
 *  Returns current stage_id
 * @param uint $inquiry_id inquiry nid
 * @param  uint $uid User id
 * @return uint stage nid for current stage of given inquiry and user
 */
function get_current_stage_of_inquiry_and_user($inquiry_id, $uid) {

	// user's current stage
	$query = "SELECT pi_current_stage.stage_id, pi_current_stage.pcs_id ";
	$query .= "FROM pi_current_stage ";
	$query .= "WHERE pi_current_stage.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND pi_current_stage.uid =  " . $uid. " ";
	

	$result = db_fetch_object(db_query($query));

	//user's group's current stage
	if (isset($result) AND ($result == NULL))
	{
		$query = "SELECT pi_current_stage.stage_id, pi_current_stage.pcs_id ";
		$query .= "FROM pi_current_stage ";
		$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_current_stage.gid ";
		$query .= "WHERE pi_current_stage.inquiry_id = '" . $inquiry_id . "' ";
		$query .= "AND og_uid.uid =  " . $uid . " ";

		$result = db_fetch_object(db_query($query));
	};
	return $result;
}

function get_psp_id_for_stage_and_phase($stage_id, $phase_id) {
	if ($stage_id && $phase_id) {
		$query = "SELECT psp_id FROM pi_stage_phase ";
		$query .= "WHERE (stage_id is NULL OR stage_id = '" . $stage_id . "') ";
		$query .= "AND (phase_id is NULL OR phase_id = '" . $phase_id . "') ";
	}
	elseif ($stage_id) {
		$query = "SELECT psp_id FROM pi_stage_phase ";
		$query .= "WHERE (stage_id is NULL OR stage_id = '" . $stage_id . "') ";
	}
	elseif ($phase_id) {
		$query = "SELECT psp_id FROM pi_stage_phase ";
		$query .= "WHERE (phase_id is NULL OR phase_id = '" . $phase_id . "') ";
	}
	else {
		return 0;
	}
	$psp_id = db_result(db_query($query));
	return $psp_id;
}

/**
 * Returns array containing phase_nid list.
 * Uses pi_stage_phase to indentify the phases.
 */
/*
function get_phases_of_stage($inquiry_id, $stage_id) {
	$query = "SELECT pi_stage_phase.phase_id FROM pi_stage_phase ";
	$query .= "LEFT JOIN pi_phase ON pi_phase.nid = pi_stage_phase.phase_id ";
	$query .= "WHERE pi_phase.inquiry_nid = '" . $inquiry_id ."' ";
	$query .= "AND pi_stage_phase.stage_id = '" . $stage_id . "'";

	$result = db_query($query);
	$phase_nids = array();
	while($row=db_fetch_array($result))
	{
		$phase_nids[] = $row['phase_id'];
	}
	return $phase_nids;
}
*/

/**
 * Returns array containing stage_id list.
 * Uses pi_inquiry_phase and pi_stage_phase to indentify the stages.
 */
/*
function get_stages_of_phase($inquiry_id, $phase_id) {
	$query = "SELECT pi_stage_phase.stage_id FROM pi_stage_phase ";
	$query .= "LEFT JOIN pi_stage ON pi_stage.stage_id = pi_stage_phase.stage_id ";
	$query .= "WHERE pi_phase.inquiry_nid = '" . $inquiry_id ."' ";
	$query .= "AND pi_stage_phase.phase_id = '" . $phase_id . "'";

	$result = db_query($query);
	$phase_nids = array();
	while($row=db_fetch_array($result))
	{
		$stage_nids[] = $row['stage_nid'];
	}
	return $stage_nids;
}
*/

/**
 * By previous we mean the started activity with the largest postion value.
 * Returns the started activity in the phase visible to that user with the
 * largest position value in the phase.
 */
function previous_activity_for_stage_phase_and_uid ($inquiry_id, $stage_id, $phase_id, $uid) {
	$query = "SELECT pi_activity_node.nid FROM pi_activity_node ";
	$query .= "LEFT JOIN pi_stage_phase_activity ";
	$query .= "ON pi_stage_phase_activity.activity_id = pi_activity_node.nid ";
	$query .= "LEFT JOIN pi_stage_phase ";
	$query .= "ON pi_stage_phase.psp_id = pi_stage_phase_activity.psp_id ";
	$query .= "LEFT JOIN pi_activity_actor ";
	$query .= "ON (pi_activity_actor.inquiry_id = pi_activity_node.inquiry_id ";
	$query .= "AND pi_activity_actor.activity_id = pi_activity_node.activity_id) ";
	$query .= "LEFT JOIN pi_activity_status ";
	$query .= "ON (pi_activity_status.inquiry_id = pi_activity_node.inquiry_id ";
	$query .= "AND pi_activity_status.activity_id = pi_activity_node.activity_id) ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	$query .= "WHERE pi_activity_node.inquiry_id = '" . $inquiry_id ."' ";
	$query .= "AND pi_stage_phase.stage_id = '" . $stage_id . "' ";
	$query .= "AND pi_stage_phase.phase_id = '" . $phase_id . "' ";
	$query .= "AND (pi_activity_actor.uid = '" . $uid . "' ";
	$query .= "OR og_uid.uid = '" . $uid . "') ";
	$query .= "AND (pi_activity_status.visible_status = 'in_progress' ";
	$query .= "OR pi_activity_status.visible_status = 'view') ";
	$query .= "ORDER BY pi_stage_phase_activity.position DESC LIMIT 1)";

	$result = db_result(db_query($query));
	return $result;

}

/**
 * By next we mean the startable activity with the smallest postion value.
 * Returns the not started activity in the phase visible to that user with
 * the smallest position value in the phase.
 */
function next_activity_for_stage_phase_and_uid ($inquiry_id, $stage_id, $phase_id, $uid) {


	$query = "SELECT pi_activity_node.nid FROM pi_activity_node ";
	$query .= "LEFT JOIN pi_stage_phase_activity ";
	$query .= "ON pi_stage_phase_activity.activity_id = pi_activity_node.nid ";
	$query .= "LEFT JOIN pi_stage_phase ";
	$query .= "ON pi_stage_phase.psp_id = pi_stage_phase_activity.psp_id ";
	$query .= "LEFT JOIN pi_activity_actor ";
	$query .= "ON (pi_activity_actor.inquiry_id = pi_activity_node.inquiry_id ";
	$query .= "AND pi_activity_actor.activity_id = pi_activity_node.activity_id) ";
	$query .= "LEFT JOIN pi_activity_status ";
	$query .= "ON (pi_activity_status.inquiry_id = pi_activity_node.inquiry_id ";
	$query .= "AND pi_activity_status.activity_id = pi_activity_node.activity_id) ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	$query .= "WHERE pi_activity_node.inquiry_id = '" . $inquiry_id ."' ";
	$query .= "AND pi_stage_phase.stage_id = '" . $stage_id . "' ";
	$query .= "AND pi_stage_phase.phase_id = '" . $phase_id . "' ";
	$query .= "AND (pi_activity_actor.uid = '" . $uid . "' ";
	$query .= "OR og_uid.uid = '" . $uid . "') ";
	$query .= "AND pi_activity_status.visible_status = 'start' ";
	$query .= "ORDER BY pi_stage_phase_activity.position ASC LIMIT 1)";

	$result = db_result(db_query($query));
	return $result;
}




// ----------------------------------------------------------------------------------

/**
 * Functions in this block are for data retrieval
 */

function get_selected_measures_headings_for_inquiry_and_user ($inquiry_id, $selected_measures, $uid) {

	$headings = array();

	foreach (explode(',', $selected_measures) as $measure_id) {

		if ($measure_id != 0) {

            $query = "SELECT node.title AS title, pi_available_measures.symbol AS symbol, ";
            $query .= "pi_available_measures.units AS units, pi_available_measures.units_short AS units_short ";
			$query .= "FROM pi_available_measures ";
			$query .= "LEFT JOIN node ON node.nid = pi_available_measures.nid ";
			$query .= "WHERE (pi_available_measures.nid = '" . $measure_id . "') ";

			// print $query;
			$heading = db_fetch_object(db_query($query));

			if (isset($heading->symbol) AND ($heading->symbol != '')) {
				$label = $heading->symbol;
			}
			elseif (isset($heading->title) AND ($heading->title != '')) {
				$label = $heading->title;
			}
			else {
				$label = '';
			};

			if (isset($heading->units_short) AND ($heading->units_short != '')) {
				$units = ' (' . $heading->units_short . ')';
			}
			elseif (isset($heading->units) AND ($heading->units != '')) {
				$units = ' (' . $heading->units . ')';
			}
			else {
				$units = '';
			};

			$headings[] = $label . $units;

		};
	};

	return $headings;
}


function get_selected_measures_data_for_inquiry_and_user ($inquiry_id, $selected_measures, $uid) {
	$result = array();

	foreach (explode(',', $selected_measures) as $measure_id) {

		if ($measure_id != 0) {
			$result[] = get_data_for_inquiry_measure_and_user ($inquiry_id, $measure_id, $uid);
		};
	};

	//sort $result by up to first three columns
    /***
	if (isset($result[2]) AND $result[2] != NULL AND $result[1] != NULL AND $result[0] != NULL) {
		array_multisort(
		$result[0], SORT_ASC, SORT_STRING,
		$result[1], SORT_ASC, SORT_STRING,
		$result[2], SORT_ASC, SORT_STRING
		);
	}
	elseif (isset($result[1]) AND $result[1] != NULL AND $result[0] != NULL) {
		array_multisort(
		$result[0], SORT_ASC, SORT_STRING,
		$result[1], SORT_ASC, SORT_STRING
		);
	}
	elseif (isset($result[0]) AND $result[0] != NULL) {
		array_multisort(
		$result[0], SORT_ASC, SORT_STRING
		);
	};
    */
    
    // Now rotate the values table so that each measure's data 
	// is in a column (rather than a row)
	$i = 0;
	$j = 0;
	$fliped_results = array();

	foreach ($result as $row) {
		foreach ($row as $col) {
			$fliped_results[$i][$j] = $col;
			$i = $i + 1;
		};
		$j = $j + 1;
		$i = 0;
	};

	return $fliped_results;
}

/*
 * $query = "SELECT pi_selected_measures.nid FROM pi_selected_measures
 * LEFT JOIN node_access ON node_access.nid = pi_selected_measures.nid
 * LEFT JOIN node ON node.nid = pi_selected_measures.nid
 * LEFT JOIN pi_activity_node ON pi_activity_node.nid =  pi_selected_measures.nid
 * LEFT JOIN og_uid ON node_access.gid = og_uid.nid
 * WHERE (og_uid.uid = '" . $uid . "' OR node.uid = '" . $uid . "')
 * AND pi_activity_node.inquiry_id = '" . $inquiry_id . "' ";
 */

function get_data_for_inquiry_measure_and_user ($inquiry_id, $measure_id, $uid) {

    $query = "SELECT DISTINCT(pi_collected_data.nid), pi_collected_data.value AS value ";
	$query .= "FROM pi_collected_data ";
    $query .= "LEFT JOIN pi_sort_data ON pi_collected_data.nid = pi_sort_data.data ";
	$query .= "LEFT JOIN node ON pi_collected_data.nid = node.nid ";
	$query .= "LEFT JOIN node_access ON node.nid = node_access.nid ";
	$query .= "LEFT JOIN og_uid ON node_access.gid = og_uid.nid ";
	$query .= "WHERE (pi_collected_data.available_measure_nid = '" . $measure_id . "') ";
	$query .= "AND (node.uid = '" . $uid . "' ";
	$query .= "OR og_uid.uid = '" . $uid . "') ";
    $query .= "ORDER BY pi_sort_data.weight ASC";

	// print $query;
	$db_result = db_query($query);

	$values = array();
	while ($result = db_fetch_object($db_result)) {
		$values[] = $result->value;
	}
	return $values;
}


//interface parameters
function show_activites($uid) {
	$query = "SELECT pi_activity_preference.show_activity FROM pi_activity_preference LEFT JOIN og_uid ON pi_activity_preference.gid = og_uid.nid WHERE (pi_activity_preference.uid = '" . $uid . "' OR og_uid.uid = '" . $uid . "') ";
	$result = db_fetch_object(db_query($query));
	if (isset($result->show_activity) && $result->show_activity == 0) {
		return FALSE;
	}
	elseif (isset($result->show_activity) && $result->show_activity == 1) {
		return TRUE;
	}
	else {
		return TRUE;
	}
}

function show_phases($uid) {
	$query = "SELECT pi_phase_preference.show_phase FROM pi_phase_preference LEFT JOIN og_uid ON pi_phase_preference.gid = og_uid.nid WHERE (pi_phase_preference.uid =  '" . $uid . "' OR og_uid.uid = '" . $uid . "') ";
	$result = db_fetch_object(db_query($query));
	if (isset($result->show_phase) && $result->show_phase == 0) {
		return FALSE;
	}
	elseif (isset($result->show_phase) && $result->show_phase == 1) {
		return TRUE;
	}
	else {
		return TRUE;
	}
}

function get_viewable_activity_ids ($inquiry_id, $uid) {

	
	$query = "SELECT DISTINCT(pi_activity_status.activity_id),pi_phase.weight,pi_stage_phase_activity.position FROM pi_activity_status ";
	$query .= "LEFT JOIN pi_stage_phase_activity ON pi_activity_status.activity_id = pi_stage_phase_activity.activity_id ";
	$query .= "LEFT JOIN pi_stage_phase ON pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id ";
	$query .= "LEFT JOIN pi_phase ON pi_stage_phase.phase_id = pi_phase.nid ";
	$query .= "LEFT JOIN pi_activity_actor ON pi_activity_status.activity_id = pi_activity_actor.activity_id ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	$query .= "WHERE (pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND (pi_activity_status.visible_status = 'view' OR pi_activity_status.visible_status = 'edit')) ";
	$query .= "AND (og_uid.uid = '" . $uid . "' OR pi_activity_actor.uid = '" . $uid . "') ";
	$query .= "ORDER BY pi_phase.weight,pi_stage_phase_activity.position";


	// print $query;
	$results = db_query($query);
	$activity_ids = array();
	

	$hidden_created_activity_types = array('pi_measure_filter');
	
	$hidden_created_activity_types = array('pi_key_questions', 'pi_measure_filter', 'pi_available_measures', 'pi_result_presentations', 'pi_data', 'pi_key_answers');
	
	while ($item = db_fetch_object($results)) {
	
		$loaded_activity = load_activity($item->activity_id);
	

        //if (!(in_array($loaded_activity->node_type, $hidden_created_activity_types))) {
	
			$activity_ids[] = $item->activity_id;
		
	//};
	
	};
	
	
	return $activity_ids;
	
	
}
	
/*
 *activity teaser
 */

function pi_activity_teaser($node, $activity, $link_node_function) {
	if($link_node_function != 'view') {
		$output = "<div class='node-inner'><div class='content'>" . $activity->description . "</div></div>";
	}
	else {
		$output = node_view($node, TRUE, TRUE);
/*
	//this was a test just putting content on the phase page without using node_view
	switch ($activity->node_type)
		{
		case 'pi_hypothesis':
			$output = $node->hypothesis;
			break;
		case 'pi_key_questions':
			$output = $node->body;
			break;
		case 'pi_key_answers':
			$output = $node->body;
			break;
		case 'pi_wiki_notes':
			$output = $node->notes;
			break;
		case 'pi_hypothesis_conclusion':
			$output = $node->conclusion;
			break;
		case 'pi_available_measures':
			$output = $node->body;
			break;
		case 'pi_sort_key_questions':
			$output = 'Here you can change the order of your key questions to put them in the order you will answer them.';
			break;
		case 'pi_data':
			$output_array = array();
			if (is_array($node->categories)) {
				foreach($node->categories as $key=>$data) {
					$output_array[] = "<strong>".$data['#title'].": </strong>".$data['#value'];
				}
				$output = implode(" &#8226; ",$output_array);
			}
			else {
				$output = $activity->description;
			}
			break;	
		case 'pi_result_presentations':
			$graph = result_presentations_teaser_view($node);
			if ($graph == '') {
				$output = $activity->description;
			}
			else {
				$output = $graph;
			}
			break;
		default:
			$output = $activity->description;
			break;
		}*/
	}
	return $output;
}