<?php
// $Id: pi.module,v 0.1 2009/05/10 09:00:00 tdc5 $

/**
 * @file
 * Enables the use of the PI activity guide.
 */

/**
 * $path
 * ?q=node/nid/view (view is optional)
 * ?q=node/nid/edit
 * ?q=node/add/node_type
 *
 * Following arguments are:
 * inquiry_id
 * stage_id
 * phase_id
 * activity_id
 *
 * Following arguments are:
 * Parameter(s)
 *
 * Following arguments are:
 * &destination=nid
 */

/**
 * Returns a keyed array. The keys are inquiry_id, stage_id, phase_id,
 * activity_id, parameters, destination_nid
 */
function pi_init() {
	drupal_add_css(drupal_get_path('module', 'pi') .'/pi.css');
}

/**
 * hook_menu() - defines the menu items for general inquiry navigation including special paths
 * for inquiry/%, phase/% and activity/%, activity/%/{view,edit,add}
 * @return an array of menu items as per Drupal api.
 */
function pi_menu() {

	$items = array();

	// Do not cache this menu item during the development of this module.
  
  $items['admin/nquire'] = array(
    'title' => 'nQuire Admin',
    'page callback' => 'pi_nquire_admin',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
    
  $items['home'] = array(
		'title' => 'Home',
		'page callback' => 'pi_home_view',
		'file' => 'pi.home.inc',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);

	$items['inquiry'] = array(
		'title' => 'Inquiry',
		'page callback' => 'pi_home_view',
		'file' => 'pi.home.inc',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
	);

	$items['inquiry/%node'] = array(
		'page callback' => 'pi_inquiry_inquiry_view',
	    'page arguments' => array(1),
		'file' => 'pi.inquiry.inc',
		'access arguments' => array('access content'),
	    'type' => MENU_CALLBACK
	);

	$items['inquiry/%node/view'] = array(
		'title' => 'View',
	    'page callback' => 'pi_inquiry_inquiry_view',
	    'page arguments' => array(1),
		'file' => 'pi.inquiry.inc',
		'access arguments' => array('access content'),
	    'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0
	);

	$items['phase/%node'] = array(
		'title' => 'Phase',
		'page callback' => 'pi_inquiry_phase_view',
	    'page arguments' => array(1),
		'file' => 'pi.phase.inc',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);

	$items['export/%/csv'] = array(
		'title' => 'CSV',
		'access callback' => TRUE,
		'page callback' => 'pi_data_export_csv',
		'type' => MENU_CALLBACK,
	);

	$items['export/%/kml'] = array(
		'title' => 'KML',
		'access callback' => TRUE,
		'page callback' => 'pi_data_export_kml',
		'type' => MENU_CALLBACK,
	);

	$items['set_stage'] = array(
		'title' => 'Stage selector',
		'page callback' => 'pi_stage_selector_view',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	return $items;
}

function pi_nquire_admin() {
  $output = '';
  if(module_exists(pi_available_content_types)) {
    $output .= "<p>" . l('Manage content types for use as variables', 'admin/pi-available-content-types') . "</p>";
  }
  return $output;
}

function pi_stage_selector_view() {
	$query = "SELECT nid FROM {node} WHERE type = 'pi_stage_selector' ORDER BY nid DESC LIMIT 1";
	$nid = db_result(db_query($query));
	if ($nid) {
		$loaded_node = node_load($nid);
		if( ! function_exists("node_page_edit")) {
			include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
		}
		$output = node_page_edit($loaded_node);
	}
	else {
		if( ! function_exists("node_add")) {
			include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
		}
		$output = node_add('pi_stage_selector');
	}
	return $output;
}


/**
 * Saves an inquiry_phase into the pi_inquiry_phase table
 * If it does not exist (pip_id is null) then it will be created.
 * If pip_id is specified the inquiry phase will be updated, unless pip_id doesn't exist
 * if $inquiry_phase does not specify all columns updates will work but inserts will not
 * and then it will be treated as a new record and issued with a new id.
 * @param array $inquiry_phase consists of pip_id uint, inquiry_id uint, phase_id uint and position tinyint.
 * @return db_query() result: FALSE on failure.
 */
/*
 function save_inquiry_phase($inquiry_phase) {
 // These are the fields that will be inserted if specified
 $allowed_fields = array('inquiry_id', 'phase_id', 'position');

 // Assume this is an INSERT unless pip_id is set and exists in db.
 $query = "INSERT INTO `pi_inquiry_phase` SET (%s)";
 if(isset($inquiry_phase['pip_id']))
 {
 // pip_id is specified so try an UPDATE only if it exists in db already
 $query = "SELECT COUNT(`pip_id`) from pi_inquiry_phase WHERE pip_id=%d";

 $result = db_query($query, array($inquiry_phase['pip_id']));
 if(db_result($result)==1)
 {
 // There is an existing inquiry_phase to go ahead and update it.
 $query = "UPDATE `pi_inquiry_phase` SET %s WHERE `pip_id`='" .
 db_escape_string($inquiry_phase['pip_id']) . "'";
 }
 }
 $fields = '';
 foreach($inquiry_phase as $field => $value)
 {
 if(in_array($field, $allowed_fields))
 {
 // Add comma if it's not the first value
 if($fields!='')
 {
 $fields .= ', ';
 }
 $fields .= "`$field`='" . db_escape_string($value) . "'";
 }
 }
 $result = db_query(str_replace('%s', $fields, $query));
 return $result;
 }
 */

function compare_phase($a, $b) {
	$aposition = $a->position;
	$bposition = $b->position;
	$aphase = $a->phase_id;
	$bphase = $b->phase_id;
	if ($aphase == $bphase) {
		if ($aposition == $bposition) {
			return 0;
		};
		if ($aposition < $bposition) {
			return -1;
		};
		if ($aposition > $bposition) {
			return 1;
		};
	}
	else {
		if ($aphase < $bphase) {
			return -1;
		};
		if ($aphase > $bphase) {
			return 1;
		};
	}
}

function compare_status($a, $b) {
	$aposition = $a->position;
	$bposition = $b->position;
	$status = array();
	$status["start"] = 0;
	$status["edit"] = 1;
	$status["view"] = 2;
	$status["unavailable"] = 3;
	$astatus = $status[$a->visible_status];
	$bstatus = $status[$b->visible_status];
	if ($astatus == $bstatus) {
		if ($aposition == $bposition) {
			return 0;
		};
		if ($aposition < $bposition) {
			return -1;
		};
		if ($aposition > $bposition) {
			return 1;
		};
	}
	else {
		if ($astatus < $bstatus) {
			return -1;
		};
		if ($astatus > $bstatus) {
			return 1;
		};
	}
}


// ****************************************************************


function get_inquiry_details_from_current_path() {
	global $user;
	$uid = $user->uid;

	$result = new stdClass;

	if(arg(0) == 'home') {
		//inquiry, stage, phase an activity are not set
	}
	elseif (arg(0) == 'inquiry' || arg(0) == 'set_stage') {
		//get inquiry from the arg
		if (arg(1)) {
			$result->inquiry_id = (int) arg(1);
		}
			
		//get the current stage for the inquiry and user
		$stage = get_current_stage_of_inquiry_and_user($result->inquiry_id, $uid);
		$result->stage_id = $stage->stage_id;

		//phase and activity are not set
	}
	elseif (arg(0) == 'phase') {
		//get inquiry from the database
		//get direct from the phase id rather than session id
		//$sid = get_current_session_id();
		//$inquiry = get_current_inquiry_for_session_and_user_id($sid, $uid);


		//get the current stage for the inquiry and user
		$stage = get_current_stage_of_inquiry_and_user($result->inquiry_id, $uid);
		$result->stage_id = $stage->stage_id;

		//get phase from the arg
		if (arg(1)) {
			$result->phase_id = (int) arg(1);
			$result->inquiry_id = get_inquiry_id_for_phase_id($result->phase_id);
		}

		//activity is not set
	}
	elseif ((arg(0) == 'activity') || (arg(0) == 'export')) {
		//get inquiry from the database
		//get direct from the activity id rather than session id
		//$sid = get_current_session_id();
		//$inquiry = get_current_inquiry_for_session_and_user_id($sid, $uid);

		//get the current stage for the inquiry and user
		$stage = get_current_stage_of_inquiry_and_user($result->inquiry_id, $uid);
		$result->stage_id = $stage->stage_id;

		//get activity from the arg
		if (arg(1)) {
			$result->activity_id = (int) arg(1);
			$result->inquiry_id = get_inquiry_id_for_activity_id($result->activity_id);
		}
		//get phase of the activity
		$phase = get_phase_of_inquiry_and_activity($result->inquiry_id, $result->activity_id, $uid);
		$result->phase_id = $phase->nid;
	}
	/*
	 if (arg(0) == 'node' && (arg(1) == 'add' || arg(2) == 'edit' || arg(2) == 'view')) {
		$result->inquiry_id = arg(3);
		$result->stage_id = arg(4);
		$result->phase_id = arg(5);
		$result->activity_id = arg(6);
		}
		elseif (arg(0) == 'node' && is_numeric(arg(1)) && is_numeric(arg(2))) {
		$result->inquiry_id = arg(2);
		$result->stage_id = arg(3);
		$result->phase_id = arg(4);
		$result->activity_id = arg(5);
		}
		else {
		$result->inquiry_id = arg(3);
		$result->stage_id = arg(4);
		$result->phase_id = arg(5);
		$result->activity_id = arg(6);
		}*/
	return $result;
}

function get_inquiry_details_of_node_path($path) {
	/**
	 * Returns a keyed array. The keys are inquiry_id, stage_id, phase_id,
	 * activity_id, parameters, destination_nid
	 */

	//$result = array();

	$split_pos = stripos($path, '&');

	$path_start = substr($path, 0, $split_pos);
	$path_end = substr($path, $split_pos);

	$arguments = explode('/', $path_end);


	$result->inquiry_id = $arguments[3];
	$result->stage_id = $arguments[4];
	$result->phase_id = $arguments[5];
	$result->activity_id = $arguments[6];
	$result->parameters = array_slice($arguments, 7);

	$result->destination_nid = substr($path_end, strlen('&destination='));

	return $result;

}

function get_inquiry_id_for_phase_id($phase_id) {
	/**
	 * Returns the inquiry id.
	 * Assumes 1-1 mapping of phases to inquiries
	 * If more than one returns the one with the highest unique key in pi_inquiry_phase
	 */
	$result = db_fetch_object(db_query("SELECT inquiry_id FROM {pi_inquiry_phase} WHERE phase_id = %d ORDER BY pip_id DESC LIMIT 1;", $phase_id));
	return $result->inquiry_id;
}

// ----------------------------------------------------------------------------------

/**
 * Functions in this block are for groups
 */

/**
 * @return array[gid] => db_object An array of published groups indexed by group id
 */
function pi_get_all_groups() {
	$groups = array();
	$query = "SELECT nid from {og}";
	$result = db_query($query);
	while($id_row = db_fetch_array($result))
	{
		$id = $id_row['nid'];
		$group = node_load($id);
		if($group->status)
		{
			$groups[$id] = $group;
		}  		
	}
	return $groups;
}

/**
 * Returns an array containing the uids for the members of the group.
 * The group could be a group, class or multiclass.
 * @param uint $gid Group id to get members of
 * @return array(user) array of db_fetch_objects indeced by id
 */
function pi_get_members_of_group($gid) {
	$query = "SELECT uid FROM {og_uid} WHERE nid = %d";
	$result = db_query($query, $gid);
	$members = array();
	while($row = db_fetch_array($result))
	{
		$id = $row['uid'];
		$user = user_load($id);
		if($user)
		{
			$members[$id] = $user;
		}
	}
	return $members;
}

/**
 * Returns an array containing the uids for the members of the group.
 * The group could be a group, class or multiclass.
 */
function get_members_of_group($gid) {
	$query = "SELECT uid FROM {og_uid} WHERE nid = %d";
	$result = db_query($query, $gid);
	return $result;
}



/**
 * Type can be group, class or multiclass.
 * Returns an array of gid values.
 */
function get_group_of_type($uid, $group_type, $inquiry_id, $stage_id = NULL, $phase_id = NULL, $activity_id = NULL)
{
	$query = "SELECT {pi_group_type}.gid FROM {pi_group_type} "
	 		. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_group_type}.gid "
			. "LEFT JOIN {pi_grouping_group} ON {pi_grouping_group}.gid = {pi_group_type}.gid "
			. "LEFT JOIN {pi_inquiry_grouping} ON {pi_inquiry_grouping}.grouping_id = {pi_grouping_group}.grouping_id "
			. "WHERE pi_group_type.type = '%s' AND og_uid.uid =  %d "
			. "AND ( {pi_inquiry_grouping}.inquiry_id = %d OR {pi_inquiry_grouping}.inquiry_id IS NULL) "
			. "AND ( {pi_inquiry_grouping}.stage_id = %d OR {pi_inquiry_grouping}.stage_id IS NULL) "
			. "AND ( {pi_inquiry_grouping}.phase_id = %d OR {pi_inquiry_grouping}.phase_id IS NULL) "
			. "AND ( {pi_inquiry_grouping}.activity_id = %d OR {pi_inquiry_grouping}.activity_id IS NULL)";
	$result = db_result(db_query($query, $group_type, $uid, $inquiry_id, $stage_id, $phase_id, $activity_id));
	
	return $result;
}


/**
 * Returns TRUE or FALSE depending on whether user is member of group.
 * @param unknown_type $gid
 * @param unknown_type $uid
 * @return Ambigous <string, NULL>
 */
function check_member_of_group($gid, $uid) {
	$members = get_members_of_group ($gid);

	if ($members == NULL) {
		$result = NULL;
	}
	elseif (in_array($uid, $members)) {
		$result = TRUE;
	}
	else {
		$result = FALSE;
	};

	return $result;
}

/**
 * Returns an array containing the gids for the groups of a grouping.
 */
function get_groups_from_grouping($grouping_id) {
	$query = "SELECT gid FROM {pi_grouping_group} WHERE grouping_id = %d";
	$result = db_query($query, $grouping_id);
	return $result;
}

/**
 * Returns all groups (student group, class, etc.) of which the user is a member.
 */
function get_groups_of_user($uid) {
	$query = "SELECT nid FROM {og_uid} WHERE uid = %d";
	$result = db_result(db_query($query, $uid));
	return $result;
}

/**
 * Returns a grouping_id.
 * @param unknown_type $inquiry_id
 * @param unknown_type $stage_id
 * @param unknown_type $phase_id
 * @param unknown_type $activity_id
 * @return unknown
 */
function get_grouping($inquiry_id, $stage_id = NULL, $phase_id = NULL, $activity_id = NULL) 
{	
	$query = "SELECT grouping_id FROM {pi_inquiry_grouping} WHERE pi_inquiry_grouping.inquiry_id = %d ";
	
	$parameters[] = $inquiry_id;
	
	if($stage_id != NULL)
	{
		$query .= "AND ( {pi_inquiry_grouping}.stage_id = %d OR {pi_inquiry_grouping}.stage_id IS NULL) ";
		$parameters[] = $stage_id;
	}
	if($phase_id != NULL)
	{
		$query .= "AND ( {pi_inquiry_grouping}.phase_id = %d OR {pi_inquiry_grouping}.phase_id IS NULL) ";
		$parameters[] = $phase_id;
	}
	if($activity_id != NULL)
	{
		$query .= "AND ( {pi_inquiry_grouping}.activity_id = %d OR {pi_inquiry_grouping}.activity_id IS NULL) ";
		$parameters[] = $activity_id;
	}

	$result = db_result(db_query($query, $parameters));
	
	return $result;
}

/**
 * Returns the created grouping_id.
 * @param unknown_type $name
 * @param unknown_type $description
 * @param unknown_type $inquiry_id
 * @param unknown_type $stage_id
 * @param unknown_type $phase_id
 * @param unknown_type $activity_id
 * @return unknown_type
 */
function add_grouping($name, $description, $inquiry_id, $stage_id = NULL, $phase_id = NULL, $activity_id = NULL) {
	//insert pi_grouping
	$query1 = "INSERT INTO pi_grouping SET name = '%s' description = '%s'";
	db_query($query1, $name, $description);

	//grouping_id from abouve query is
	$query2 = "SELECT MAX(grouping_id) FROM {pi_grouping}";
	$grouping_id = db_result(db_query($query2));

	//insert pi_grouping_group
	$query3 = "INSET INTO pi_inquiry_grouping SET inquiry_id = %d ";
	
	$parameters[] = $inquiry_id;
	
	if($stage_id != NULL)
	{
		$query3 .= ", stage_id = %d ";
		$parameters[] = $stage_id;
	}
	if($phase_id != NULL)
	{
		$query3 .= ", phase_id = %d ";
		$parameters[] = $phase_id;
	}
	if($activity_id != NULL)
	{
		$query3 .= ", activity_id = %d ";
		$parameters[] = $activity_id;
	}
	
	$query3 .= ", grouping_id = %d ";
	$parameters[] = $grouping_id;
	
	db_query($query3, $parameters);
}

/**
 * Get the current grouping - class and group can change within/across inquiries
 * @param unknown_type $inquiry_id
 * @param unknown_type $stage_id
 * @param unknown_type $phase_id
 * @param unknown_type $activity_id
 * @param unknown_type $uid
 * @return unknown_type
 */
function get_current_group_of_user($inquiry_id, $stage_id, $phase_id, $activity_id, $uid) {
	$grouping = get_grouping($inquiry_id, $stage_id, $phase_id, $activity_id);
	$group_type = "group";

	if ($grouping) 
	{
		$query = "SELECT {pi_grouping_group}.gid FROM {pi_grouping_group}, {pi_group_type}, {og_uid} "
				. "WHERE {pi_grouping_group}.grouping_id = %d "
				. "AND {pi_grouping_group}.gid = {pi_group_type}.gid "
				. "AND {pi_group_type}.type = '%s' "
				. "AND {pi_grouping_group}.gid = {og_uid}.nid "
				. "AND {og_uid}.uid = %d";

		//makes assumption that user is member of only 1 group at a time
		$result = db_result(db_query($query, $grouping, $group_type, $uid));
		return $result;
	}
	else 
	{
		return NULL;
	}
}

/**
 * Get the current grouping - class and group can change within/across inquiries
 * @param $inquiry_id
 * @param $stage_id
 * @param $phase_id
 * @param $activity_id
 * @param $uid
 * @return unknown_type
 */
function get_current_class_of_user($inquiry_id, $stage_id, $phase_id, $activity_id, $uid) {
	$grouping = get_grouping($inquiry_id, $stage_id, $phase_id, $activity_id);
	$group_type = "class";

	if ($grouping) 
	{
		$query = "SELECT {pi_grouping_group}.gid FROM {pi_grouping_group}, {pi_group_type}, {og_uid} "
			 	. "WHERE {pi_grouping_group}.grouping_id = "
				. "AND {pi_grouping_group}.gid = {pi_group_type}.gid "
				. "AND {pi_group_type}.type = '%s' "
				. "AND {pi_grouping_group}.gid = {og_uid}.nid "
				. "AND {og_uid.uid} = %d";

		//makes assumption that user is member of only 1 class at a time
		$result = db_result(db_query($query, $grouping, $group_type, $uid));
		return $result;
	}
	else 
	{
		return NULL;
	}
}

/**
 * adds a group to a grouping
 * @param $grouping_id
 * @param $gid
 * @return unknown_type
 */
function add_group_to_grouping($grouping_id, $gid) {
	$query = "INSERT INTO {pi_grouping_group} SET grouping_id = %d , gid = %d";
	db_query($query, $grouping_id, $gid);
}

/**
 * Returns the created gid.
 * @param unknown_type $name
 * @param unknown_type $uid_array
 * @param unknown_type $parent_gid
 * @return unknown
 */
function add_group($name, $uid_array, $parent_gid = NULL) {
	$query = "SELECT MAX(nid) FROM {og}";
	$nid = db_result(db_query($query));

	$query = "INSERT INTO {og} SET nid = %d, selective = '0', description = '%s', theme = NULL, register = '0', directory = '1', language = NULL, private = '0'";
	db_query($query, $nid, $name);

	// add admin user as active admin user
	$query = "INSERT INTO {og_uid} SET nid = %d, og_role = '0', is_active = '1', is_admin = '1', uid = '1', created = NOW(), changed = NOW()";
	db_query($query, $nid);

	// add users as active users
	foreach ($uid_array as $uid) 
	{
		$query = "INSERT INTO {og_uid} SET og_role = '0', is_active = '1', is_admin = '0', uid = %d, created = NOW(), changed = NOW()";
		db_query($query, $uid);
	};

	// tdc5 - not too sure about this next bit - looks dodgy??
	$query = "INSERT INTO {pi_group_hierarchy} SET gid = %d, ";
	
	if ($parent_gid == NULL) 
	{
		$query .= "parent_gid = NULL";
		db_query($query, $nid);
	}
	else 
	{
		$query .= "parent_gid = %d";
		db_query($query, $nid, $parent_gid);
	}
	
	return $nid;
}

// --------------------------------------------------------------------------------------

/**
 * Functions in this block are interface where am I stuff
 */

/**
 * This allows you to find out if a phase is visible for a particular user
 * because of a teacher only gid
 * These are flagged in the interface
 * if yes then returns the gid otherwise 0
 */
function check_teacher_phase_for_inquiry_phase_user($inquiry_id, $phase_id, $uid) {
	$query = "SELECT {pi_phase_actor}.gid, {pi_phase_actor}.uid FROM {pi_phase_actor} "
			. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_phase_actor}.gid "
			. "WHERE {pi_phase_actor}.inquiry_id = %d "
			. "AND {pi_phase_actor}.phase_id = %d "
			. "AND ( {pi_phase_actor}.uid = %d OR {og_uid}.uid = %d )";
	$result = db_fetch_object(db_query($query, $inquiry_id, $phase_id, $uid, $uid));
	if($result->gid) 
	{
		$gid_node = node_load($result->gid);
		if ($gid_node->type == "teacher_group") 
		{
			return $result->gid;
		}
		else 
		{
			return 0;
		}
	}
	elseif ($result->uid) 
	{
		return 0;
	}
}

/**
 * Used to flag teacher only activities from the gid
 */
function check_teacher_activity_for_inquiry_activity_user($inquiry_id, $activity_id, $uid) {
	$query = "SELECT {pi_activity_actor}.gid, {pi_activity_actor}.uid FROM {pi_activity_actor} "			
			. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
			. "WHERE {pi_activity_actor}.inquiry_id = %d "
			. "AND {pi_activity_actor}.activity_id = %d "
			. "AND ( {pi_activity_actor}.uid = %d OR {og_uid}.uid = %d)";
	$result = db_fetch_object(db_query($query, $inquiry_id, $activity_id, $uid, $uid));
	if($result->gid) 
	{
		$gid_node = node_load($result->gid);
		if ($gid_node->type == "teacher_group") 
		{
			return $result->gid;
		}
		else 
		{
			return 0;
		}
	}
	elseif ($result->uid) 
	{
		return 0;
	}
}

/**
 * Returns an array containing the phase_nids of the inquiry for that user.
 * The phases are ordered by weight.
 */
function get_phases_of_inquiry_and_user($inquiry_id, $uid) {
	$query = "SELECT DISTINCT {pi_phase}.nid AS nid FROM {pi_phase} "
			. "LEFT JOIN {pi_phase_actor} ON {pi_phase_actor}.phase_id = {pi_phase}.nid "
			. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_phase_actor}.gid "
			. "WHERE {pi_phase_actor}.inquiry_id = %d "
			. "AND ( {pi_phase_actor}.uid =  %d OR {og_uid}.uid =  %d) "
			. "ORDER BY pi_phase.weight ASC";

	$result = db_query($query, $inquiry_id, $uid, $uid);
	$phase_nids = array();
	while($row=db_fetch_array($result))
	{
		$phase_nids[] = $row['nid'];
	}
	return $phase_nids;
}

/**
 * Returns an array containing the stage_ids of the inquiry for that user.
 * The stages are ordered by position.
 */
function get_stages_of_inquiry_and_user($inquiry_id, $uid) {
	$query = "SELECT DISTINCT {pi_stage}.nid AS nid FROM {pi_stage} "
			. "LEFT JOIN {pi_stage_actor} ON {pi_stage_actor}.stage_id = {pi_stage}.nid "
			. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_stage_actor}.gid "
			. "WHERE ( {pi_stage_actor}.inquiry_id = %d  "
			. "AND {pi_stage_actor}.uid = %d ) "
			. "OR ( {pi_stage_actor}.inquiry_id = %d "
			. "AND {og_uid}.uid =  %d ) "
			. "ORDER BY {pi_stage}.weight ASC";

	$result = db_query($query, $inquiry_id, $uid, $inquiry_id, $uid);
	
	$stage_nids = array();
	while($row=db_fetch_array($result))
	{
		$stage_nids[] = $row['nid'];
	}
	return $stage_nids;
}

function insert_stage_phase_activity($psp_id, $activity_id, $position) {
	$query = "INSERT INTO {pi_stage_phase_activity} (psp_id, activity_id, position) VALUES (%d, %d, %d)";
	db_query($query, $psp_id, $activity_id, $position);
}

/**
 * Returns an array containing the activities of the phase in that stage for that user.
 * The activities are ordered by position.
 */
function get_activities_of_stage_phase_and_user($inquiry_id, $stage_id, $phase_id, $uid) {

	//get the phases and stages for this inquiry and user
	if (is_null($phase_id)) {
		$db_phases = get_phases_of_inquiry_and_user($inquiry_id, $uid);
		$phases = array();
		foreach($db_phases as $db_phase_nid)
		{
			$phases[] = node_load($phase_nid);
		}
	}
	else {
		$phases = array($phase_id);
	}

	/*
	 if (is_null($stage_id)) {
		$db_stages = get_stages_of_inquiry_and_user ($inquiry_id, $uid);
		$stages = array();
		while ($db_stage = db_fetch_object($db_stages)) {
		$stages[] = $db_stage->stage_id;
		}
		}
		else {
		$stages = array($stage_id);
		}*/

	$temp = array();

	if (is_null($stage_id)) 
	{
		foreach($phases as $p)
		{
			$query = "SELECT psp_id FROM {pi_stage_phase} WHERE phase_id = %d";
			$query_results = db_query($query, $p);
			while ($query_result = db_fetch_object($query_results)) 
			{
				$temp[] = $query_result->psp_id;
			}
		}
	}
	else 
	{
		foreach($phases as $p)
		{
			$query = "SELECT psp_id FROM {pi_stage_phase} WHERE stage_id = %d AND phase_id = %d";
			$temp[] = db_result(db_query($query, $stage_id, $p));
		}
	}

	//for each of these stages nd phases get the pi_stage_phase psp_id and put it in an array
	/*$temp = array();

	foreach($phases as $p){
	foreach($stages as $s){
	$query = "SELECT pi_stage_phase.psp_id FROM pi_stage_phase ";
	$query .= "WHERE pi_stage_phase.stage_id = '" . $s . "' AND ";
	$query .= "pi_stage_phase.phase_id = '" . $p . "'";
	$temp[] = db_result(db_query($query));
	}
	}*/

	//for each of these psp_id's add the activity_id from pi_stage_phase_activity
	$activities = array();
	foreach($temp as $t)
	{
		/*
		 $query2 = "SELECT * FROM pi_stage_phase_activity ";
		 $query2 .= "WHERE pi_stage_phase_activity.psp_id = '" . $t . "'";*/

		$query2 = "SELECT * FROM {pi_stage_phase_activity} "
				. "LEFT JOIN {pi_activity} ON {pi_stage_phase_activity}.activity_id = {pi_activity}.activity_id "
				. "LEFT JOIN {pi_activity_actor} ON {pi_activity}.activity_id = {pi_activity_actor}.activity_id "
				. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
				. "WHERE {pi_stage_phase_activity}.psp_id = %d "
				. "AND ( {og_uid}.uid = %d OR {pi_activity_actor}.uid = %d ) "
				. "ORDER BY {pi_stage_phase_activity}.position";

		//activities are ordered in the array by the position
		$answer2 = db_query($query2, $t, $uid, $uid);
		
		while ($result2 = db_fetch_object($answer2)) 
		{
			$sql = "SELECT {pi_stage_phase}.phase_id  FROM {pi_stage_phase}, {pi_stage_phase_activity} "
				. "WHERE {pi_stage_phase_activity}.activity_id = %d AND {pi_stage_phase_activity}.psp_id = {pi_stage_phase}.psp_id";
			//added in the phase to help with interface listing
			$phase_of_activity = db_fetch_object(db_query($sql, $result2->activity_id));
			$result2->phase_id = $phase_of_activity->phase_id;
			//added in the visible status to help with interface listing
			$loaded_activity_status = load_activity_status($inquiry_id, $result2->activity_id, $uid);
			//load_activity_status($result2->activity_id);
			$result2->visible_status = $loaded_activity_status->visible_status;
			$activities[] = $result2;
		}
	}

	return get_unique_activities($activities);
	//return array_unique($activities);
}

//helper function to filter out duplicate activities
function get_unique_activities($activities){
	$unique = array();
	$temp = array();
	foreach($activities as $activity){
		$activity_id = $activity->activity_id;
		if(!(in_array($activity_id,$temp))){
			$temp[] = $activity_id;
			$unique[] = $activity;
		}
	}
	return $unique;
}

/**
 * Returns array of inquiry nodes for user or user's groups
 */
function get_inquiries_of_user($uid = 0) {
	$query = "SELECT DISTINCT {pi_inquiry_actor}.inquiry_id AS nid FROM {pi_inquiry_actor} "
			. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_inquiry_actor}.gid "
			. "LEFT JOIN {pi_inquiry} ON {pi_inquiry_actor}.inquiry_id = {pi_inquiry}.nid ";
	
	if ($uid != '0') 
	{
		$query .= "WHERE {pi_inquiry_actor}.uid = %d ";
		$query .= " OR {og_uid}.uid =  %d ";
		$query .= " ORDER BY {pi_inquiry}.weight ASC";
		$result = db_query($query, $uid, $uid);
	}
	else
	{
		$query .= " ORDER BY {pi_inquiry}.weight ASC";
		$result = db_query($query);
	}

	
	$inquiries = array();
	while($row=db_fetch_array($result))
	{
		$inquiries[]= node_load($row['nid']);
	}
	return $inquiries;
}


/**
 * Deprecated function
 */
/*
 function get_current_session_id() {
 global $cookie_domain;
 $session = $_COOKIE[session_name()];
 return $session;
 }*/


/**
 * Returns current inquiry_id for session and uid
 * Deprecated function
 */
/*
 function get_current_inquiry_for_session_and_user_id($sid, $uid) {
 // user's current inquiry
 $query = "SELECT pi_current_inquiry.inquiry_id, pi_current_inquiry.pci_id ";
 $query .= "FROM pi_current_inquiry ";
 $query .= "WHERE pi_current_inquiry.sid = '" . $sid . "' ";
 $query .= "AND pi_current_inquiry.uid =  '" . $uid. "' ";

 $result = db_fetch_object(db_query($query));
 return $result;
 }*/

/**
 * Sets inquiry_id for session and uid
 * Deprecated function
 */
/*
 function set_current_inquiry_for_session_and_user_id($inquiry_id, $sid, $uid) {
 $query = "DELETE FROM pi_current_inquiry WHERE sid = '" . $sid . "' ";
 db_query($query);
 $query = "INSERT INTO pi_current_inquiry (sid, uid, inquiry_id) VALUES ('" . $sid . "', '" . $uid . "', '" . $inquiry_id . "') ";
 db_query($query);
 clear_expired_sessions();
 }*/

/**
 * Deprecated function
 */
/*
 function clear_expired_sessions() {
 $query = "DELETE FROM pi_current_inquiry WHERE NOT EXISTS (select * FROM sessions WHERE sessions.sid = pi_current_inquiry.sid)";
 db_query($query);
 }*/


/**
 *  Returns current stage_id
 * @param uint $inquiry_id inquiry nid
 * @param  uint $uid User id
 * @return uint stage nid for current stage of given inquiry and user
 */
function get_current_stage_of_inquiry_and_user($inquiry_id, $uid) {

	// user's current stage
	$query = "SELECT stage_id, pcs_id FROM {pi_current_stage} ";
	$query .= "WHERE inquiry_id = %d AND uid = %d ";
	$result = db_fetch_object(db_query($query, $inquiry_id, $uid));

	//user's group's current stage
	if (isset($result) AND ($result == NULL))
	{
		$query = "SELECT {pi_current_stage}.stage_id, {pi_current_stage}.pcs_id FROM {pi_current_stage} "
				. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_current_stage}.gid "
				. "WHERE {pi_current_stage}.inquiry_id = %d "
				. "AND {og_uid}.uid = %d ";

		$result = db_fetch_object(db_query($query, $inquiry_id, $uid));
	}
	
	return $result;
}

function get_psp_id_for_stage_and_phase($stage_id, $phase_id) {
	if($stage_id && $phase_id) 
	{
		$query = "SELECT psp_id FROM {pi_stage_phase} WHERE ( stage_id is NULL OR stage_id = %d) AND (phase_id is NULL OR phase_id = %d)";
		$psp_id = db_result(db_query($query, $stage_id, $phase_id));
	}
	elseif($stage_id) 
	{
		$query = "SELECT psp_id FROM {pi_stage_phase} WHERE (stage_id is NULL OR stage_id = %d)";
		$psp_id = db_result(db_query($query, $stage_id));
	}
	elseif($phase_id) 
	{
		$query = "SELECT psp_id FROM {pi_stage_phase} WHERE (phase_id is NULL OR phase_id = %d)";
		$psp_id = db_result(db_query($query, $phase_id));
	}
	else 
	{
		$psp_id = 0;
	}
	
	return $psp_id;
}

/**
 * Returns array containing phase_nid list.
 * Uses pi_stage_phase to indentify the phases.
 */
/*
 function get_phases_of_stage($inquiry_id, $stage_id) {
 $query = "SELECT pi_stage_phase.phase_id FROM pi_stage_phase ";
 $query .= "LEFT JOIN pi_phase ON pi_phase.nid = pi_stage_phase.phase_id ";
 $query .= "WHERE pi_phase.inquiry_nid = '" . $inquiry_id ."' ";
 $query .= "AND pi_stage_phase.stage_id = '" . $stage_id . "'";

 $result = db_query($query);
 $phase_nids = array();
 while($row=db_fetch_array($result))
 {
 $phase_nids[] = $row['phase_id'];
 }
 return $phase_nids;
 }
 */

/**
 * Returns array containing stage_id list.
 * Uses pi_inquiry_phase and pi_stage_phase to indentify the stages.
 */
/*
 function get_stages_of_phase($inquiry_id, $phase_id) {
 $query = "SELECT pi_stage_phase.stage_id FROM pi_stage_phase ";
 $query .= "LEFT JOIN pi_stage ON pi_stage.stage_id = pi_stage_phase.stage_id ";
 $query .= "WHERE pi_phase.inquiry_nid = '" . $inquiry_id ."' ";
 $query .= "AND pi_stage_phase.phase_id = '" . $phase_id . "'";

 $result = db_query($query);
 $phase_nids = array();
 while($row=db_fetch_array($result))
 {
 $stage_nids[] = $row['stage_nid'];
 }
 return $stage_nids;
 }
 */

/**
 * By previous we mean the started activity with the largest postion value.
 * Returns the started activity in the phase visible to that user with the
 * largest position value in the phase.
 */
function previous_activity_for_stage_phase_and_uid ($inquiry_id, $stage_id, $phase_id, $uid) {
	$query = "SELECT {pi_activity_node}.nid FROM {pi_activity_node} "
			. "LEFT JOIN {pi_stage_phase_activity} ON {pi_stage_phase_activity}.activity_id = {pi_activity_node}.nid "
			. "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase}.psp_id = {pi_stage_phase_activity}.psp_id "
			. "LEFT JOIN {pi_activity_actor} ON ( {pi_activity_actor}.inquiry_id = {pi_activity_node}.inquiry_id "
			. "AND {pi_activity_actor}.activity_id = {pi_activity_node}.activity_id) "
			. "LEFT JOIN {pi_activity_status} ON ( {pi_activity_status}.inquiry_id = {pi_activity_node}.inquiry_id "
			. "AND {pi_activity_status}.activity_id = {pi_activity_node}.activity_id) "
			. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
			. "WHERE {pi_activity_node}.inquiry_id = %d "
			. "AND {pi_stage_phase}.stage_id = %d "
			. "AND {pi_stage_phase}.phase_id = %d "
			. "AND ( {pi_activity_actor}.uid = %d OR {og_uid}.uid = %d ) "
			. "AND ( {pi_activity_status}.visible_status = 'in_progress' "
			. "OR {pi_activity_status}.visible_status = 'view') "
			. "ORDER BY pi_stage_phase_activity.position DESC LIMIT 1)";

	$result = db_result(db_query($query, $inquiry_id, $stage_id, $phase_id, $uid, $uid));
	return $result;

}

/**
 * By next we mean the startable activity with the smallest postion value.
 * Returns the not started activity in the phase visible to that user with
 * the smallest position value in the phase.
 */
function next_activity_for_stage_phase_and_uid ($inquiry_id, $stage_id, $phase_id, $uid) {

	$query = "SELECT {pi_activity_node}.nid FROM {pi_activity_node} "
			. "LEFT JOIN {pi_stage_phase_activity} ON {pi_stage_phase_activity}.activity_id = {pi_activity_node}.nid "
			. "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase}.psp_id = {pi_stage_phase_activity}.psp_id "
			. "LEFT JOIN {pi_activity_actor} ON ( {pi_activity_actor}.inquiry_id = {pi_activity_node}.inquiry_id "
			. "AND {pi_activity_actor}.activity_id = {pi_activity_node}.activity_id) "
			. "LEFT JOIN {pi_activity_status} ON ( {pi_activity_status}.inquiry_id = {pi_activity_node}.inquiry_id "
			. "AND {pi_activity_status}.activity_id = {pi_activity_node}.activity_id) "
			. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
			. "WHERE {pi_activity_node}.inquiry_id = %d "
			. "AND {pi_stage_phase.stage_id} = %d "
			. "AND {pi_stage_phase.phase_id} = %d "
			. "AND ( {pi_activity_actor}.uid = %d OR {og_uid}.uid = %d) "
			. "AND {pi_activity_status}.visible_status = 'start' "
			. "ORDER BY {pi_stage_phase_activity}.position ASC LIMIT 1)";

	$result = db_result(db_query($query, $inquiry_id, $stage_id, $phase_id, $uid, $uid));
	return $result;
}




// ----------------------------------------------------------------------------------

/**
 * Functions in this block are for data retrieval
 */

function get_selected_measures_headings_for_inquiry_and_user($inquiry_id, $selected_measures, $uid) {

	$headings = array();

	foreach (explode(',', $selected_measures) as $measure_id) 
	{
		if ($measure_id != 0) 
		{
			$query = "SELECT {node}.title AS title, {pi_available_measures}.symbol AS symbol, "
					. "{pi_available_measures}.units AS units, {pi_available_measures}.units_short AS units_short "
					. "FROM {pi_available_measures} "
					. "LEFT JOIN {node} ON {node}.nid = {pi_available_measures}.nid "
					. "WHERE ( {pi_available_measures}.nid = %d )";

			// print $query;
			$heading = db_fetch_object(db_query($query, $measure_id));

			if (isset($heading->symbol) AND ($heading->symbol != '')) {
				$label = $heading->symbol;
			}
			elseif (isset($heading->title) AND ($heading->title != '')) {
				$label = $heading->title;
			}
			else {
				$label = '';
			};

			if (isset($heading->units_short) AND ($heading->units_short != '')) {
				$units = ' (' . $heading->units_short . ')';
			}
			elseif (isset($heading->units) AND ($heading->units != '')) {
				$units = ' (' . $heading->units . ')';
			}
			else {
				$units = '';
			};

			$headings[] = $label . $units;

		};
	};

	return $headings;
}


function get_selected_measures_data_for_inquiry_and_user ($inquiry_id, $selected_measures, $uid) {
	$result = array();

	foreach (explode(',', $selected_measures) as $measure_id)
	{
		//Just to make sure there are no spaces...
		$measure_id = trim($measure_id);
		if ($measure_id != 0)
		{
			$result[] = get_data_for_inquiry_measure_and_user ($inquiry_id, $measure_id, $uid);
		}
	}

	//sort $result by up to first three columns
	/***
	 if (isset($result[2]) AND $result[2] != NULL AND $result[1] != NULL AND $result[0] != NULL) {
		array_multisort(
		$result[0], SORT_ASC, SORT_STRING,
		$result[1], SORT_ASC, SORT_STRING,
		$result[2], SORT_ASC, SORT_STRING
		);
		}
		elseif (isset($result[1]) AND $result[1] != NULL AND $result[0] != NULL) {
		array_multisort(
		$result[0], SORT_ASC, SORT_STRING,
		$result[1], SORT_ASC, SORT_STRING
		);
		}
		elseif (isset($result[0]) AND $result[0] != NULL) {
		array_multisort(
		$result[0], SORT_ASC, SORT_STRING
		);
		};
		*/

	// Now rotate the values table so that each measure's data
	// is in a column (rather than a row)
	$i = 0;
	$j = 0;
	$fliped_results = array();

	foreach ($result as $row)
	{
		foreach ($row as $col)
		{
			$fliped_results[$i][$j] = $col;
			$i = $i + 1;
		}
		$j = $j + 1;
		$i = 0;
	}

	return $fliped_results;
}

/*
 * $query = "SELECT pi_selected_measures.nid FROM pi_selected_measures
 * LEFT JOIN node_access ON node_access.nid = pi_selected_measures.nid
 * LEFT JOIN node ON node.nid = pi_selected_measures.nid
 * LEFT JOIN pi_activity_node ON pi_activity_node.nid =  pi_selected_measures.nid
 * LEFT JOIN og_uid ON node_access.gid = og_uid.nid
 * WHERE (og_uid.uid = '" . $uid . "' OR node.uid = '" . $uid . "')
 * AND pi_activity_node.inquiry_id = '" . $inquiry_id . "' ";
 */

function get_data_for_inquiry_measure_and_user ($inquiry_id, $measure_id, $uid) {

	$query = "SELECT DISTINCT {pi_collected_data}.nid AS nid, {pi_collected_data}.value AS value "
			. "FROM {pi_collected_data} "
			. "LEFT JOIN {pi_sort_data} ON {pi_collected_data}.nid = {pi_sort_data}.data "
			. "LEFT JOIN {node} ON {pi_collected_data}.nid = {node}.nid "
			. "LEFT JOIN {node_access} ON {node}.nid = {node_access}.nid "
			. "LEFT JOIN {og_uid} ON {node_access}.gid = {og_uid}.nid "
			. "WHERE ( {pi_collected_data}.available_measure_nid = %d) "
			. "AND ( {node}.uid = %d OR {og_uid}.uid = %d ) "
			. "ORDER BY {pi_sort_data}.weight, {pi_collected_data}.vid ASC";

	// print $query;
	$db_result = db_query($query, $measure_id, $uid, $uid);
	//echo "\n" . $query;

	$values = array();

	while($result = db_fetch_object($db_result))
	{
		//SQL orders the results as well as by VID
		//Therefore the higest VID is overrideing NID's with lower VID's
		$values[$result->nid] = $result->value;
	}

	$values = array_values($values);

	return $values;
}


//interface parameters
function show_activites($uid) {
	$query = "SELECT {pi_activity_preference}.show_activity FROM {pi_activity_preference} " 
			. "LEFT JOIN {og_uid} ON {pi_activity_preference}.gid = {og_uid}.nid " 
			. "WHERE ( {pi_activity_preference}.uid = %d OR {og_uid}.uid = %d ) ";
	$result = db_fetch_object(db_query($query, $uid, $uid));
	if (isset($result->show_activity) && $result->show_activity == 0) {
		return FALSE;
	}
	elseif (isset($result->show_activity) && $result->show_activity == 1) {
		return TRUE;
	}
	else {
		return TRUE;
	}
}

function show_phases($uid) {
	$query = "SELECT {pi_phase_preference}.show_phase FROM {pi_phase_preference} " 
			. "LEFT JOIN {og_uid} ON {pi_phase_preference}.gid = {og_uid}.nid "
			. "WHERE ( {pi_phase_preference}.uid = %d OR {og_uid}.uid = %d)";
	$result = db_fetch_object(db_query($query, $uid, $uid));
	if (isset($result->show_phase) && $result->show_phase == 0) 
	{
		return FALSE;
	}
	elseif (isset($result->show_phase) && $result->show_phase == 1) 
	{
		return TRUE;
	}
	else 
	{
		return TRUE;
	}
}

function get_viewable_activity_ids($inquiry_id, $uid) {
	$query = "SELECT DISTINCT( {pi_activity_status}.activity_id), {pi_phase}.weight, {pi_stage_phase_activity}.position FROM {pi_activity_status} "
			. "LEFT JOIN {pi_stage_phase_activity} ON {pi_activity_status}.activity_id = {pi_stage_phase_activity}.activity_id "
			. "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase_activity}.psp_id = {pi_stage_phase}.psp_id "
			. "LEFT JOIN {pi_phase} ON {pi_stage_phase}.phase_id = {pi_phase}.nid "
			. "LEFT JOIN {pi_activity_actor} ON {pi_activity_status}.activity_id = {pi_activity_actor}.activity_id "
			. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
			. "WHERE ( {pi_activity_status}.inquiry_id = %d "
			. "AND ( {pi_activity_status}.visible_status = 'view' OR {pi_activity_status}.visible_status = 'edit')) "
			. "AND ( {og_uid}.uid = %d OR {pi_activity_actor}.uid = %d) "
			. "ORDER BY pi_phase.weight,pi_stage_phase_activity.position";

	// drupal_set_message(sprintf($query, $inquiry_id, $uid, $uid));
	$results = db_query($query, $inquiry_id, $uid, $uid);
	$activity_ids = array();
	while ($item = db_fetch_object($results))
	{
		$activity_ids[] = $item->activity_id;
	}
	return $activity_ids;
}

/**
 * This compares the ['#weight'] elements in two arrays
 * @param array $x
 * @param array $y
 * @return bool result of $x['#weight'] > $y['#weight']
 */
function my_weight_compare($x, $y) {
	$xw = (int) $x['#weight'];
	$yw = (int) $y['#weight'];
	return $xw > $yw;
}

/**
 * This is a utility function to merge two content item lists which have '#weight' elements
 * e.g. item[x]['#weight'].  Weight elements in the second list are ignored and this list is
 * appended to the ordrered items in their default order.
 * If an unsorted item occurrs in the sorted item list, the sorted item weight takes precidence
 * Weight attributes are renumbered incrementally from 0
 * @param array(array) $sorted_items content item list with '#weight' elements
 * @param $unsorted_items  $sorted_items content item list - weight ignored
 * @return array of items sorted by weight
 */
function pi_merge_content_item_lists($sorted_items, $unsorted_items)
{
	$return_data = array();
	$weight_data = array();
	foreach($sorted_items as $key => $sorted_item)
	{
		$weight_data[$key] =  $sorted_item['#weight'];
	}
	asort($weight_data);
	foreach(array_keys($weight_data) as $ordered_item_key)
	{
		$sorted_items[$ordered_item_key]['#weight'] = count($return_data);
		$return_data[$ordered_item_key] = $sorted_items[$ordered_item_key];
	}
	foreach($unsorted_items as $unsorted_item_key => $unsorted_item)
	{
		if(!array_key_exists($unsorted_item_key, $return_data))
		{
			$unsorted_item['#weight'] = count($return_data);
			$return_data[$unsorted_item_key] = $unsorted_item;
		}
	}
	return $return_data;
}

/**
 * This is a function to sort items by first array indext then then by #weight property
 * The status order is determined by $group_order, which will set the order for the groups
 * the #weight parameter of the items will be reset to a sequential series starting from 0
 * any groups that are not listed are added to the end of the list in order of occurrence
 * @param array $group_order array of indexes to define what order the grouped items will be sorted, e.g. key, selected, none
 * @param $grouped_items array of arrays of items with #weight parameters.
 * 	e.g. array(
 * 		'key' =>
 * 			array(
 * 				'123'=> array('#weight' => 12),
 * 				'321'=>array('#weight' => 32),
 * 			),
 * 		'selected' => etc
 * @param string $weight_index this will usually be #weight for display items
 * 	but for form data it could be anything, e.g. 'weight' is often used
 * @return array Flattened array of items from $grouped_items with a sequential #weight value.
 */
function pi_sort_grouped_item_list($group_order, $grouped_items, $weight_index)
{
	$item_ids = array();
	$item_groups = array();
	$item_weights = array();
	$items = array();
	foreach($grouped_items as $group_name => $group)
	{
		if(!is_array($item_ids[$group_name]))
		{
			$item_ids[$group_name] = array();
		}

		if(!is_array($item_weights[$group_name]))
		{
			$item_weights[$group_name] = array();
		}
		foreach($group as $item_id => $item)
		{
			$item_ids[$group_name][] = $item_id;
			$item_weights[$group_name][] = $item[$weight_index];
			$items[$item_id] = $item;
		}
	}

	// If new groups appear that aren't in the default list, append them to the end of the list:
	foreach(array_keys($item_ids) as $other_group)
	{
		if(!in_array($other_group, $group_order))
		{
			$group_order[] = $other_group;
		}
	}
	$sorted_items = array();
	foreach($group_order as $group)
	{
		if(array_key_exists($group, $item_ids)!=NULL)
		{
			$sort_weights = $item_weights[$group];
			$sort_ids = $item_ids[$group];
			array_multisort($sort_weights, $sort_ids);
			foreach($sort_ids as $item_id)
			{
				$items[$item_id][$weight_index] = count($sorted_items);
				$sorted_items[$item_id] = $items[$item_id];
			}
		}
	}
	return $sorted_items;
}


/**
 * This is a debug function that prints a given variable to drupal message area
 * it uses output buffers (ob_start, ob_get_clean) and var_dump
 * @param $var_to_dump any variable
 */
function pi_debug_message($var_to_dump)
{
	ob_start();
	var_dump($var_to_dump);
	drupal_set_message('<pre>' . check_plain(ob_get_clean()) . '</pre>');
}



?>
