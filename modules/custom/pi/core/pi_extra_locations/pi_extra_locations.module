<?php
// $Id: pi_extra_locations.module,v 1.3 2009/06/12 10:04:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "extra locations" node type
 */

/**
 * Implementation of pi_available_locations_node_info().
 */
function pi_extra_locations_node_info() {
return array(
    'pi_extra_locations' => array(
      'name' => t('Extra locations'), // Required.
      'module' => 'pi_extra_locations',  // Required.
      'description' => t('This module provides support for analysing data.'), // Required.
      'has_title' => FALSE,
      'title_label' => t('Extra locations'),
      'has_body' => TRUE,
      'body_label' => t('Locations'),
      'locked' => '1',
    )
  );
}

/**
 * Implementation of pi_extra_locations_perm().
 */

function pi_extra_locations_perm() {
  return array('create pi_extra_locations content', 'edit own pi_extra_locations');
}

/**
 * Implementation of pi_extra_locations_access().
 */

function pi_extra_locations_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return (user_access('create pi_extra_locations'));
  }

  if ($op == 'update' || $op == 'delete') {
    return (user_access('edit own pi_extra_locations') && ($user->uid == $node->uid));
  }
}

/**
 * Implementation of pi_extra_locations_form().
 */
function pi_extra_locations_form(&$node) {

  drupal_set_title(t('Extra location'));
  global $user;
  // Get metadata for this node type
  // (we use it for labeling title and body fields).
  // We defined this in pi_extra_locations_node_info().
  $type = node_get_types('type', $node);

  $inquiry_id = arg(3)|1;
  
	$area_number = arg(4);
	if ($area_number ==  1) {
		$phase_number  = 4;
		$phase_name  = "<b>Northampton</b>";
	}
	else {
		$phase_number  = 5;
		$phase_name  = "<b>Milton Keynes</b>";
	}
	
	$previous_activity = get_previous_activity($user->uid, $phase_number);
	$default_activity = $previous_activity->activity_id;
	if (!$default_activity) {$default_activity = 0;}

	$activities_result = db_query("SELECT pi_activity.name, pi_activity.activity_id, pi_phase_activity.position
		FROM pi_activity, pi_activity_actor, og_uid, pi_phase_activity
		WHERE
		pi_activity.activity_id = pi_activity_actor.activity_id
		AND
		pi_activity_actor.gid = og_uid.nid
		AND
		og_uid.uid = %d
		AND
		pi_activity.activity_id = pi_phase_activity.activity_id
		AND
		pi_phase_activity.phase_id = %d
		ORDER BY pi_phase_activity.position ASC", $user->uid, $phase_number);

	$activities_arr = array();
	$activities_arr[0] = 'None';

	while ($record = db_fetch_array($activities_result)) {
		$activities_arr[$record['activity_id']] = $record['name'];
	}
  
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain('Location name'),
    '#required' => FALSE,
    '#weight' => -5
  );
  $form['extra_location'] = array(
    '#type' => 'select',
    '#title' => t('To be placed after'),
    '#options' => $activities_arr,
	'#default_value' => $default_activity,
    '#description' => t('Please choose an option.'),
);
  $form['area'] = array(
    '#type' => 'hidden',
    '#title' => 'area',
    '#required' => FALSE,
    '#default_value' => $area_number,
    '#weight' => -10
  );
    $form['phase'] = array(
    '#type' => 'hidden',
    '#title' => 'phase',
    '#required' => FALSE,
    '#default_value' => $phase_number,
    '#weight' => -10
  );
	$form['inquiry_id'] = array(
    '#type' => 'hidden',
    '#title' => 'inquiry_id',
    '#required' => FALSE,
    '#default_value' => $inquiry_id,
    '#weight' => -10
  );
  $prefix = "";
	$prefix .= "<p>";
	$prefix .= "Add an extra " . t($phase_name) . " location";
	$prefix .= "</p>";
  
  $form['#prefix'] = $prefix;
  
  unset($form['delete']);

  return $form;
}

/**
 * Implementation of pi_extra_locations_validate().
 */
function pi_extra_locations_validate($node) {
  //$node->title
  if (str_word_count($node->title) < 1) {
	form_set_error('title', 'You must enter a name for your location.');
  }
}

/**
 * Implementation of pi_extra_locations_insert().
 */
function pi_extra_locations_insert($node) {

	global $user;
	$my_selected_phase = $node->phase;
	$my_selected_activity_id = $node->extra_location;
	$my_available_locations_nid = db_fetch_object(db_query("SELECT pi_available_locations.nid FROM pi_available_locations, node, pi_activity
	WHERE
	pi_activity.activity_id = %d
	AND
	pi_activity.name = node.title
	AND
	node.nid = pi_available_locations.nid", $my_selected_activity_id));
	
	
	if ($my_selected_phase == 4) {
		$location_activity_id = 4;
	}
	else {
		$location_activity_id = 5;
	}
		
	//fetch pi_selected_locations
	$current_selected_locations = db_fetch_array(db_query("SELECT pi_selected_locations.nid, pi_selected_locations.selected_locations FROM pi_selected_locations, node_access, og_uid, pi_activity_node
	WHERE
	pi_selected_locations.nid = node_access.nid
	AND
	node_access.gid = og_uid.nid
	AND
	node_access.realm = 'og_subscriber' 	
	AND
	og_uid.uid = %d
	AND
	pi_selected_locations.nid = pi_activity_node.nid
	AND
	pi_activity_node.activity_id = %d
	ORDER BY pi_selected_locations.vid DESC", $user->uid, $location_activity_id));
	$selected_locations_array = explode(",", $current_selected_locations[selected_locations]);
	

	///qqq
	
	//get position for the menu selected activity_id
	$my_selected_position_db = db_fetch_object(db_query("SELECT position FROM pi_phase_activity WHERE phase_id = %d AND activity_id = %d", $my_selected_phase, $my_selected_activity_id));
	$my_selected_position = $my_selected_position_db -> position;
	
	//get next activity and pos
	//$my_next_activity_pos = get_next_activity(2,4,1);
	$my_next_activity_pos = get_next_activity($user->uid, $my_selected_phase, $my_selected_position);
	
	//get new activity and pos
	if ($my_next_activity_pos->position) {
		$my_new_activity_pos = $my_selected_position + (($my_next_activity_pos->position - $my_selected_position) / 2);
	}
	else {
		$my_new_activity_pos = $my_selected_position + 1;
	}
	
	//add activty_id to pi_activity
	db_query("insert into pi_activity (name) values(\"%s\")", t($node->title));
	$new_activity_id = db_result(db_query("SELECT max(activity_id) from pi_activity;"));
	
	//add to available locations
	db_query("INSERT INTO {pi_available_locations} (nid, vid, area, position) VALUES (%d, %d, %d, %f)",
    $node->nid, $node->vid, $node->area, $my_new_activity_pos);
	$new_available_locations_nid = db_result(db_query("SELECT max(nid) from pi_available_locations;"));

	
	//pi_data is has student group audience
	//add new location activity to activity_actor
	$audience_id = find_student_group_gid($user);
	if($audience_id) {
			db_query("insert into pi_activity_actor (activity_id, gid) values(%d, %d)", $new_activity_id, $audience_id);
	}
	else {
		db_query("insert into pi_activity_actor (activity_id, uid) values(%d, %d)", $new_activity_id, $user->uid);
	}
	
	//pi activity roles
	$data_collection_node_type = "pi_data";
	
	//find selected measures
	$selected_measures = db_result(db_query("
	SELECT pi_selected_measures.selected_measures 
	FROM pi_selected_measures, node_access, og_uid
	WHERE 
	pi_selected_measures.nid = node_access.nid
	AND
	node_access.gid = og_uid.nid
	AND
	node_access.realm = 'og_subscriber' 	
	AND
	og_uid.uid = %d", $user->uid));
	
	$selected_measures_array = explode(",", $selected_measures);
	$measures_parameter = t('/' . implode("/", $selected_measures_array));
	
	db_query("insert into pi_activity_roles (activity_id, node_type_creator_role, node_type_editor_role, node_type_viewer_role, node_type, parameters) values(%d, \"%s\", \"%s\", \"%s\", \"%s\", \"%s\")", $new_activity_id, t($data_collection_node_type . '_creator'), t($data_collection_node_type . '_editor'), t($data_collection_node_type . '_viewer'), t($data_collection_node_type), t("/" . $node -> inquiry_id . "/" . $new_available_locations_nid . $measures_parameter));
	
	db_query("insert into pi_phase_activity (phase_id, activity_id, position) values(%d, %d, %f)", $my_selected_phase, $new_activity_id, $my_new_activity_pos);
		
//selected locations
	//****needs $new_available_locations_nid
	//
	if ($my_available_locations_nid->nid == 0) {
		$updated_locations_array = array();
		$updated_locations_array[] = $new_available_locations_nid;
		foreach ($selected_locations_array as $selected_location) {
			$updated_locations_array[] = $selected_location;
		}
	}
	else {
		$updated_locations_array = array_insert_after($selected_locations_array, $my_available_locations_nid->nid, $new_available_locations_nid);
	}
	$updated_locations_str = implode(",", $updated_locations_array);
	
	db_query("UPDATE pi_selected_locations SET selected_locations = \"%s\" WHERE nid = %d", 
	$updated_locations_str, $current_selected_locations[nid]);

	//update node_type in node table
	db_query("UPDATE node SET type = \"%s\" WHERE nid = %d", 
	t("pi_available_locations"), $node->nid);

}



/**
 * Commented out because uses pi_available_locations module for the below functions MBG, TDC, PM 2009/06/12 Nottingham meeting
 */

/**
 * Implementation of hook_update().

function pi_extra_locations_update($node) {
  if ($node->revision) {
    pi_available_extra_locations_insert($node);
  }
  else {
    db_query("UPDATE {pi_extra_locations} SET inquiry_id = '%d' WHERE vid = %d",
      $node->inquiry_id|1, $node->vid);
  }
}
*/
/**
 * Implementation of hook_delete().

function pi_extra_locations_delete(&$node) {
  db_query('DELETE FROM {pi_extra_locations} WHERE nid = %d', $node->nid);
}
 */
/**
 * Implementation of hook_load().

function pi_extra_locations_load($node) {
  return db_fetch_object(db_query('SELECT inquiry_id FROM {pi_extra_locations} WHERE vid = %d',
    $node->vid));
}
 */
/**
 * Implementation of hook_view().

function pi_extra_locations_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }

  if ($teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }

  return $node;
}
 */


