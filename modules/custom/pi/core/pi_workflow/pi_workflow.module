<?php
// $Id: pi_workflow.module,v 1.1 2009/06/24 09:17:48 ou_pm Exp $

/**
 * @file
 * Implements Activity Guide workflow.
 */

function find_pi_data_nids_for_uid_and_inquiry($uid, $inquiry_id) {
	$query = "SELECT DISTINCT pi_collected_data.nid FROM pi_collected_data LEFT JOIN node_access ON node_access.nid = pi_collected_data.nid LEFT JOIN node ON node.nid = pi_collected_data.nid LEFT JOIN pi_activity_node ON pi_activity_node.nid =  pi_collected_data.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid LEFT JOIN pi_sort_data ON pi_sort_data.data = pi_collected_data.nid WHERE (og_uid.uid = '" . $uid . "' OR node.uid = '" . $uid . "') AND pi_activity_node.inquiry_id = '" . $inquiry_id . "' ORDER BY pi_sort_data.weight ASC ";
	$result = db_query($query);
	return $result;
}

function find_sort_key_questions_nid_for_uid_and_inquiry($uid, $inquiry_id) {
    $query = "SELECT pi_sort_key_questions.nid FROM pi_sort_key_questions LEFT JOIN node_access ON node_access.nid = pi_sort_key_questions.nid LEFT JOIN node ON node.nid = pi_sort_key_questions.nid LEFT JOIN pi_activity_node ON pi_activity_node.nid =  pi_sort_key_questions.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid WHERE (og_uid.uid = '" . $uid . "' OR node.uid = '" . $uid . "') AND pi_activity_node.inquiry_id = '" . $inquiry_id . "' ";
    $result = db_result(db_query($query));
    return $result;
}

function find_hypothesis_nid_for_uid_and_inquiry($uid, $inquiry_id){
    $query = "SELECT pi_hypothesis.nid FROM pi_hypothesis LEFT JOIN node_access ON node_access.nid = pi_hypothesis.nid LEFT JOIN node ON node.nid = pi_hypothesis.nid LEFT JOIN pi_activity_node ON pi_activity_node.nid =  pi_hypothesis.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid WHERE (og_uid.uid = '" . $uid . "' OR node.uid = '" . $uid . "') AND pi_activity_node.inquiry_id = '" . $inquiry_id . "' ";
    $result = db_result(db_query($query));
    return $result;
}

function find_measure_filter_nid_for_uid_and_inquiry($uid, $inquiry_id) {
    $query = "SELECT pi_measure_filter.nid FROM pi_measure_filter LEFT JOIN node_access ON node_access.nid = pi_measure_filter.nid LEFT JOIN node ON node.nid = pi_measure_filter.nid LEFT JOIN pi_activity_node ON pi_activity_node.nid =  pi_measure_filter.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid WHERE (og_uid.uid = '" . $uid . "' OR node.uid = '" . $uid . "') AND pi_activity_node.inquiry_id = '" . $inquiry_id . "' ";
    $result = db_result(db_query($query));
    return $result;
}

function find_selected_measures_nid_for_uid_and_inquiry($uid, $inquiry_id) {
    $query = "SELECT pi_selected_measures.nid FROM pi_selected_measures LEFT JOIN node_access ON node_access.nid = pi_selected_measures.nid LEFT JOIN node ON node.nid = pi_selected_measures.nid LEFT JOIN pi_activity_node ON pi_activity_node.nid =  pi_selected_measures.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid WHERE (og_uid.uid = '" . $uid . "' OR node.uid = '" . $uid . "') AND pi_activity_node.inquiry_id = '" . $inquiry_id . "' ";
    $result = db_result(db_query($query));
    return $result;
}

function find_selected_measures_nid_for_uid ($uid) {
    $query = "SELECT pi_selected_measures.nid FROM pi_selected_measures, node_access, og_uid WHERE pi_selected_measures.nid = node_access.nid AND node_access.gid = og_uid.nid AND og_uid.uid = '" . $uid . "' ";
    $result = db_result(db_query($query));
    return $result;
}

function add_data_parameter_when_selected_measures_created($node, $user) {
    $node_details = get_inquiry_details_from_current_path();

    //find group for user
    $group = get_current_group_of_user ($node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id, $user->uid);

    if (!$group) {
        return NULL;
    }

    //find new interview activity for that group
    $activity_query = "SELECT pi_activity.activity_id FROM pi_activity, pi_activity_actor WHERE pi_activity.node_type = \"pi_data\" AND pi_activity.activity_id = pi_activity_actor.activity_id AND pi_activity_actor.gid = " . $group . " ";
    $interview_activity = db_result(db_query($activity_query));

    if (!$interview_activity) {
        return NULL;
    }

    //add nid as parameter
    $loaded_activity = load_activity($interview_activity);

    $activity_array = array();
    $activity_array["name"] = $loaded_activity->name;
    $activity_array["activity_id"] = $interview_activity;
    $activity_array["description"] = $loaded_activity->description;
    $activity_array["activity_type"] = $loaded_activity->activity_type;
    $activity_array["node_type"] = $loaded_activity->node_type;
    $activity_array["parameters"] = t("251/" . $node->nid);
    $activity_array["destination"] = $loaded_activity->destination;
    $activity_array["audience"] = $loaded_activity->audience;
    save_activity($activity_array);

    //find results activity for that group

    $query = "SELECT pi_activity.activity_id FROM pi_activity WHERE pi_activity.parameters = \"" . $group . "\" ";
    $result_activity = db_result(db_query($query));

    //set view persmissions for class
    if ($result_activity) {
        $query = "UPDATE pi_activity_actor SET pi_activity_actor.gid = 236 WHERE pi_activity_actor.inquiry_id = " . $node_details->inquiry_id . " AND pi_activity_actor.activity_id = " . $result_activity . " ";
        db_query($query);
    }

}

/*
 * Create pi data activity is updated. Update the name.
 */
function workflow_for_updated_node_adder_activity($node, $user) {
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
	$loaded_activity =  load_activity($details->activity_id);
		
	/*Get values of key measures and use these to name the new activity*/
	$measures_param = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);

	if ($measures_param) {
		$measures_node = node_load($measures_param);
		$measure_rows = $measures_node->categories;
	}
	
	$title_array = array();
	
	foreach ($measure_rows as $measure_nid => $measure_selection) {
  	if($measure_selection['#status'] == 'key') {
  		$key = t($measures_param . "-" . $measure_nid);
  		$title_array[] = t($node->onepageprofile_categories[$key]['value']);
  	}
  }

	$activity_name = implode("-",$title_array);

	if (strlen($activity_name) < 2) {
		$activity_name = "Data";
	}
	
	$activity_array = array();
	// $activity_array["name"] = t("D: " . $activity_name);
	$activity_array["name"] = t($activity_name);
	$activity_array["activity_id"] = $loaded_activity->activity_id;
	$activity_array["description"] = $loaded_activity->description;
	$activity_array["activity_type"] = $loaded_activity->activity_type;
	$activity_array["node_type"] = $loaded_activity->node_type;
	$activity_array["parameters"] = $loaded_activity->parameters;
	$activity_array["destination"] = $loaded_activity->destination;
	$activity_array["audience"] = $loaded_activity->audience;

	save_activity($activity_array);
}

function update_activity_when_result_presentations_updated($node, $user) {
    $uid = $user->uid;
    $details = get_inquiry_details_from_current_path();
    $loaded_activity = load_activity($details->activity_id);

    //save current activity including the activity_id
    $activity_array = array();
    // $activity_array["name"] = t("R: " . $node->title);
    $activity_array["name"] = t($node->title);
    $activity_array["activity_id"] = $loaded_activity->activity_id;
    $activity_array["description"] = $loaded_activity->description;
    $activity_array["activity_type"] = $loaded_activity->activity_type;
    $activity_array["node_type"] = $loaded_activity->node_type;
    $activity_array["parameters"] = $loaded_activity->parameters;
    $activity_array["destination"] = $loaded_activity->destination;
    $activity_array["audience"] = $loaded_activity->audience;

    save_activity($activity_array);
}

function update_activity_when_key_answer_updated($node, $user) {
		//update node title
	$length = 250;
	if(strlen($node->body) > $length) {
		$short_body = substr(check_plain($node->body), 0, $length);
		$last_space = strrpos($short_body, " ");
		$short_body = substr($short_body, 0, $last_space);
		$node->title = $short_body."...";
	}
	else {
		$node->title = $node->body;
	}
	db_query("UPDATE node SET title='%s' WHERE vid=%d ", $node->title, $node->vid);
	db_query("UPDATE node_revisions SET title='%s' WHERE vid= %d", $node->title, $node->vid);
	
	$uid = $user->uid;
    $details = get_inquiry_details_from_current_path();
    $loaded_activity = load_activity($details->activity_id);

    //save current activity including the activity_id
    $activity_array = array();
    // $activity_array["name"] = t("A: " . $node->title);
    $activity_array["name"] = t($node->title);
    $activity_array["activity_id"] = $loaded_activity->activity_id;
    $activity_array["description"] = $loaded_activity->description;
    $activity_array["activity_type"] = $loaded_activity->activity_type;
    $activity_array["node_type"] = $loaded_activity->node_type;
    $activity_array["parameters"] = $loaded_activity->parameters;
    $activity_array["destination"] = $loaded_activity->destination;
    $activity_array["audience"] = $loaded_activity->audience;

    save_activity($activity_array);
}

function update_activity_when_key_question_updated($node, $user) {
		//update node title
	$length = 250;
	if(strlen($node->body) > $length) {
		$short_body = substr(check_plain($node->body), 0, $length);
		$last_space = strrpos($short_body, " ");
		$short_body = substr($short_body, 0, $last_space);
		$node->title = $short_body."...";
	}
	else {
		$node->title = $node->body;
	}
	db_query("UPDATE node SET title='" . $node->title . "' WHERE vid='" . $node->vid . "' ");
	db_query("UPDATE node_revisions SET title='" . $node->title . "' WHERE vid='" . $node->vid . "' ");
	
	$uid = $user->uid;
    $details = get_inquiry_details_from_current_path();
    $loaded_activity = load_activity($details->activity_id);

    //save current activity including the activity_id
    $activity_array = array();
    // $activity_array["name"] = t("Q: " . $node->title);
    $activity_array["name"] = t($node->title);
    $activity_array["activity_id"] = $loaded_activity->activity_id;
    $activity_array["description"] = $loaded_activity->description;
    $activity_array["activity_type"] = $loaded_activity->activity_type;
    $activity_array["node_type"] = $loaded_activity->node_type;
    $activity_array["parameters"] = $loaded_activity->parameters;
    $activity_array["destination"] = $loaded_activity->destination;
    $activity_array["audience"] = $loaded_activity->audience;

    save_activity($activity_array);
}

function update_activity_when_add_measure_updated($node, $user) {
    $uid = $user->uid;
    $details = get_inquiry_details_from_current_path();
    $loaded_activity = load_activity($details->activity_id);

    //save current activity including the activity_id
    $activity_array = array();
    // $activity_array["name"] = t("M: " . $node->title);
    $activity_array["name"] = t($node->title);
    $activity_array["activity_id"] = $loaded_activity->activity_id;
    $activity_array["description"] = $loaded_activity->description;
    $activity_array["activity_type"] = $loaded_activity->activity_type;
    $activity_array["node_type"] = $loaded_activity->node_type;
    $activity_array["parameters"] = $loaded_activity->parameters;
    $activity_array["destination"] = $loaded_activity->destination;
    $activity_array["audience"] = $loaded_activity->audience;

    save_activity($activity_array);
}

function add_activity_when_result_presentations_created($node, $user, $node_function, $visible_status) {
    $uid = $user->uid;
    $details = get_inquiry_details_from_current_path();
    $loaded_activity = load_activity($details->activity_id);

    //copy over current except for the activity_id
    $activity_array = array();
    // $activity_array["name"] = t("R: " . $node->title);
    $activity_array["name"] = t($node->title);
    $activity_array["description"] = $loaded_activity->description;
    $activity_array["activity_type"] = $loaded_activity->activity_type;
    $activity_array["node_type"] = $loaded_activity->node_type;
    $activity_array["parameters"] = $loaded_activity->parameters;
    $activity_array["destination"] = $loaded_activity->destination;
    $activity_array["audience"] = $loaded_activity->audience;

    //create the new activity
    save_activity($activity_array);
    $query2 = "SELECT MAX(pi_activity.activity_id) FROM pi_activity";
    $new_activity_id = db_result(db_query($query2));

    //****new details object
    $new_details = new stdClass;
    $new_details->inquiry_id = $details->inquiry_id;
    $new_details->stage_id = $details->stage_id;
    $new_details->phase_id = $details->phase_id;
    $new_details->activity_id = $new_activity_id;

    //set status for the new activity
    $activity_status = load_activity_status($details->inquiry_id, $details->activity_id, $user->uid);
    $new_activity_status = new stdClass;
    $new_activity_status->inquiry_id = $activity_status->inquiry_id;
    $new_activity_status->activity_id = $new_activity_id;
    $new_activity_status->uid = $activity_status->uid;
    $new_activity_status->gid = $activity_status->gid;
    $new_activity_status->node_function = $activity_status->node_function;
    $new_activity_status->visible_status = $activity_status->visible_status;
    save_activity_status($new_activity_status);

    //set actor for the new activity
    $activity_actor = load_activity_actor($details->inquiry_id, $details->activity_id, NULL, NULL);
    $new_activity_actor["inquiry_id"] = $details->inquiry_id;
    $new_activity_actor["activity_id"] = $new_activity_id;
    
    
  ///for audience smaller than actor in add activity
  $actor_gid = $activity_actor[0]["gid"];
  $actor_uid = $activity_actor[0]["uid"];
  $actor_group_type = get_type_of_group($actor_gid);
  $users_group = get_group_of_type($uid, $loaded_activity->audience, $details->inquiry_id, $details->stage_id, $details->phase_id, $details->activity_id);
  $audience_gid = $users_group;
  $audience_group_type = $activity->audience;
  
  if(($actor_group_type == 'group' && $audience_group_type == 'individual') || ($actor_group_type == 'class' && $audience_group_type != 'class' && $audience_group_type != 'multiclass')) {
  	$new_activity_actor["uid"] = $uid;
  	$new_activity_actor["gid"] = $audience_gid;
  }
  else {  
  	$new_activity_actor["uid"] = $activity_actor[0]["uid"];
  	$new_activity_actor["gid"] = $activity_actor[0]["gid"];
  }
    insert_activity_actor($new_activity_actor);

    //set the stage phase activity
    $psp_id = get_psp_id_for_stage_and_phase($details->stage_id, $details->phase_id);
    if(!$psp_id) {
    	$psp_id = get_psp_id_for_stage_and_phase(NULL, $details->phase_id);
    }
    $query = "SELECT position FROM pi_stage_phase_activity WHERE psp_id = " . $psp_id . " ORDER BY position DESC";
    $current_pos = db_result(db_query($query));
    $new_pos = $current_pos + 1;
    insert_stage_phase_activity($psp_id, $new_activity_id, $new_pos);

    //set pi activity node
    add_new_pi_activity_node($node, $user, $node_function, $visible_status, $new_details);

    //set og if necessary for new node
    $details = get_inquiry_details_from_current_path();
    $activity = load_activity($details->activity_id);
    if ($loaded_activity->audience != "individual") {
        $users_group = get_group_of_type($uid, $loaded_activity->audience, $new_details->inquiry_id, $new_details->stage_id, $new_details->phase_id, $new_details->activity_id);
        $context['groups'] = array($users_group);
        og_add_group_action($node, $context);
    }
}	

function add_activity_when_key_answer_created($node, $user, $node_function, $visible_status) {
		//update node title
	$length = 250;
	if(strlen($node->body) > $length) {
		$short_body = substr(check_plain($node->body), 0, $length);
		$last_space = strrpos($short_body, " ");
		$short_body = substr($short_body, 0, $last_space);
		$node->title = $short_body."...";
	}
	else {
		$node->title = $node->body;
	}
	db_query("UPDATE node SET title='%s' WHERE vid=%d ", $node->title, $node->vid);
	db_query("UPDATE node_revisions SET title='%s' WHERE vid=%d ", $node->title, $node->vid);
	
    $uid = $user->uid;
    $details = get_inquiry_details_from_current_path();
    $loaded_activity = load_activity($details->activity_id);

    //copy over current except for the activity_id
    $activity_array = array();
    // $activity_array["name"] = t("A: " . $node->title);
    $activity_array["name"] = t($node->title);
    $activity_array["description"] = $loaded_activity->description;
    $activity_array["activity_type"] = $loaded_activity->activity_type;
    $activity_array["node_type"] = $loaded_activity->node_type;
    $activity_array["parameters"] = $loaded_activity->parameters;
    $activity_array["destination"] = $loaded_activity->destination;
    $activity_array["audience"] = $loaded_activity->audience;

    //create the new activity
    save_activity($activity_array);
    $query2 = "SELECT MAX(pi_activity.activity_id) FROM pi_activity";
    $new_activity_id = db_result(db_query($query2));

    //****new details object
    $new_details = new stdClass;
    $new_details->inquiry_id = $details->inquiry_id;
    $new_details->stage_id = $details->stage_id;
    $new_details->phase_id = $details->phase_id;
    $new_details->activity_id = $new_activity_id;


    //set status for the new activity
    $activity_status = load_activity_status($details->inquiry_id, $details->activity_id, $user->uid);
    $new_activity_status = new stdClass;
    $new_activity_status->inquiry_id = $activity_status->inquiry_id;
    $new_activity_status->activity_id = $new_activity_id;
    $new_activity_status->uid = $activity_status->uid;
    $new_activity_status->gid = $activity_status->gid;
    $new_activity_status->node_function = $activity_status->node_function;
    $new_activity_status->visible_status = $activity_status->visible_status;
    save_activity_status($new_activity_status);

    //set actor for the new activity
    $activity_actor = load_activity_actor($details->inquiry_id, $details->activity_id, NULL, NULL);
    $new_activity_actor["inquiry_id"] = $details->inquiry_id;
    $new_activity_actor["activity_id"] = $new_activity_id;
    
    
  ///for audience smaller than actor in add activity
  $actor_gid = $activity_actor[0]["gid"];
  $actor_uid = $activity_actor[0]["uid"];
  $actor_group_type = get_type_of_group($actor_gid);
  $users_group = get_group_of_type($uid, $loaded_activity->audience, $details->inquiry_id, $details->stage_id, $details->phase_id, $details->activity_id);
  $audience_gid = $users_group;
  $audience_group_type = $activity->audience;
  
  if(($actor_group_type == 'group' && $audience_group_type == 'individual') || ($actor_group_type == 'class' && $audience_group_type != 'class' && $audience_group_type != 'multiclass')) {
  	$new_activity_actor["uid"] = $uid;
  	$new_activity_actor["gid"] = $audience_gid;
  }
  else {  
  	$new_activity_actor["uid"] = $activity_actor[0]["uid"];
  	$new_activity_actor["gid"] = $activity_actor[0]["gid"];
  }
    insert_activity_actor($new_activity_actor);

    //set the stage phase activity
    $psp_id = get_psp_id_for_stage_and_phase($details->stage_id, $details->phase_id);
    if(!$psp_id) {
    	$psp_id = get_psp_id_for_stage_and_phase(NULL, $details->phase_id);
    }

    $query = "SELECT position FROM pi_stage_phase_activity WHERE psp_id = '" . $psp_id . "' ORDER BY position DESC";
    $current_pos = db_result(db_query($query));
    $new_pos = $current_pos + 1;
    insert_stage_phase_activity($psp_id, $new_activity_id, $new_pos);

    //set pi activity node
    add_new_pi_activity_node($node, $user, $node_function, $visible_status, $new_details);

    //set og if necessary for new node
    $details = get_inquiry_details_from_current_path();
    $activity = load_activity($details->activity_id);
    if ($loaded_activity->audience != "individual") {
        $users_group = get_group_of_type($uid, $loaded_activity->audience, $new_details->inquiry_id, $new_details->stage_id, $new_details->phase_id, $new_details->activity_id);
        $context['groups'] = array($users_group);
        og_add_group_action($node, $context);
    }
    
    //Update the node. Title changed.
    return array("node" => $node);
}

function add_activity_when_key_question_created($node, $user, $node_function, $visible_status) {
		//update node title
	$length = 250;
	if(strlen($node->body) > $length) {
		$short_body = substr(check_plain($node->body), 0, $length);
		$last_space = strrpos($short_body, " ");
		$short_body = substr($short_body, 0, $last_space);
		$node->title = $short_body."...";
	}
	else {
		$node->title = $node->body;
	}
	db_query("UPDATE node SET title='" . $node->title . "' WHERE vid='" . $node->vid . "' ");
	db_query("UPDATE node_revisions SET title='" . $node->title . "' WHERE vid='" . $node->vid . "' ");
	
	$uid = $user->uid;
    $details = get_inquiry_details_from_current_path();
    $loaded_activity = load_activity($details->activity_id);

    //copy over current except for the activity_id
    $activity_array = array();
    // $activity_array["name"] = t("Q: " . $node->title);
    $activity_array["name"] = t($node->title);
    $activity_array["description"] = $loaded_activity->description;
    $activity_array["activity_type"] = $loaded_activity->activity_type;
    $activity_array["node_type"] = $loaded_activity->node_type;
    $activity_array["parameters"] = $loaded_activity->parameters;
    $activity_array["destination"] = $loaded_activity->destination;
    $activity_array["audience"] = $loaded_activity->audience;

    //create the new activity
    save_activity($activity_array);
    $query2 = "SELECT MAX(pi_activity.activity_id) FROM pi_activity";
    $new_activity_id = db_result(db_query($query2));

    //****new details object
    $new_details = new stdClass;
    $new_details->inquiry_id = $details->inquiry_id;
    $new_details->stage_id = $details->stage_id;
    $new_details->phase_id = $details->phase_id;
    $new_details->activity_id = $new_activity_id;


    //set status for the new activity
    $activity_status = load_activity_status($details->inquiry_id, $details->activity_id, $user->uid);
    $new_activity_status = new stdClass;
    $new_activity_status->inquiry_id = $activity_status->inquiry_id;
    $new_activity_status->activity_id = $new_activity_id;
    $new_activity_status->uid = $activity_status->uid;
    $new_activity_status->gid = $activity_status->gid;
    $new_activity_status->node_function = $activity_status->node_function;
    $new_activity_status->visible_status = $activity_status->visible_status;
    save_activity_status($new_activity_status);

    //set actor for the new activity
    $activity_actor = load_activity_actor($details->inquiry_id, $details->activity_id, NULL, NULL);
    $new_activity_actor["inquiry_id"] = $details->inquiry_id;
    $new_activity_actor["activity_id"] = $new_activity_id;
    
    
  ///for audience smaller than actor in add activity
  $actor_gid = $activity_actor[0]["gid"];
  $actor_uid = $activity_actor[0]["uid"];
  $actor_group_type = get_type_of_group($actor_gid);
  $users_group = get_group_of_type($uid, $loaded_activity->audience, $details->inquiry_id, $details->stage_id, $details->phase_id, $details->activity_id);
  $audience_gid = $users_group;
  $audience_group_type = $activity->audience;
  
  if(($actor_group_type == 'group' && $audience_group_type == 'individual') || ($actor_group_type == 'class' && $audience_group_type != 'class' && $audience_group_type != 'multiclass')) {
  	$new_activity_actor["uid"] = $uid;
  	$new_activity_actor["gid"] = $audience_gid;
  }
  else {  
  	$new_activity_actor["uid"] = $activity_actor[0]["uid"];
  	$new_activity_actor["gid"] = $activity_actor[0]["gid"];
  }
    insert_activity_actor($new_activity_actor);

    //set the stage phase activity
    $psp_id = get_psp_id_for_stage_and_phase($details->stage_id, $details->phase_id);
    if(!$psp_id) {
    	$psp_id = get_psp_id_for_stage_and_phase(NULL, $details->phase_id);
    }

    $query = "SELECT position FROM pi_stage_phase_activity WHERE psp_id = '" . $psp_id . "' ORDER BY position DESC";
    $current_pos = db_result(db_query($query));
    $new_pos = $current_pos + 1;
    insert_stage_phase_activity($psp_id, $new_activity_id, $new_pos);

    //set pi activity node
    add_new_pi_activity_node($node, $user, $node_function, $visible_status, $new_details);

    //set og if necessary for new node
    $details = get_inquiry_details_from_current_path();
    $activity = load_activity($details->activity_id);
    if ($loaded_activity->audience != "individual") {
        $users_group = get_group_of_type($uid, $loaded_activity->audience, $new_details->inquiry_id, $new_details->stage_id, $new_details->phase_id, $new_details->activity_id);
        $context['groups'] = array($users_group);
        og_add_group_action($node, $context);
    }
}


function add_activity_when_add_measure_created($node, $user, $node_function, $visible_status) {
    $uid = $user->uid;
    $details = get_inquiry_details_from_current_path();
    $loaded_activity = load_activity($details->activity_id);

    //copy over current except for the activity_id
    $activity_array = array();
    // $activity_array["name"] = t("M: " . $node->title);
    $activity_array["name"] = t($node->title);
    $activity_array["description"] = $loaded_activity->description;
    $activity_array["activity_type"] = $loaded_activity->activity_type;
    $activity_array["node_type"] = $loaded_activity->node_type;
    $activity_array["parameters"] = $loaded_activity->parameters;
    $activity_array["destination"] = $loaded_activity->destination;
    $activity_array["audience"] = $loaded_activity->audience;

    //create the new activity
    save_activity($activity_array);
    $query2 = "SELECT MAX(pi_activity.activity_id) FROM pi_activity";
    $new_activity_id = db_result(db_query($query2));

    //****new details object
    $new_details = new stdClass;
    $new_details->inquiry_id = $details->inquiry_id;
    $new_details->stage_id = $details->stage_id;
    $new_details->phase_id = $details->phase_id;
    $new_details->activity_id = $new_activity_id;


    //set status for the new activity
    $activity_status = load_activity_status($details->inquiry_id, $details->activity_id, $user->uid);
    $new_activity_status = new stdClass;
    $new_activity_status->inquiry_id = $activity_status->inquiry_id;
    $new_activity_status->activity_id = $new_activity_id;
    $new_activity_status->uid = $activity_status->uid;
    $new_activity_status->gid = $activity_status->gid;
    $new_activity_status->node_function = $activity_status->node_function;
    $new_activity_status->visible_status = $activity_status->visible_status;
    save_activity_status($new_activity_status);

    //set actor for the new activity
    $activity_actor = load_activity_actor($details->inquiry_id, $details->activity_id, NULL, NULL);
    $new_activity_actor["inquiry_id"] = $details->inquiry_id;
    $new_activity_actor["activity_id"] = $new_activity_id;
    
    
  ///for audience smaller than actor in add activity
  $actor_gid = $activity_actor[0]["gid"];
  $actor_uid = $activity_actor[0]["uid"];
  $actor_group_type = get_type_of_group($actor_gid);
  $users_group = get_group_of_type($uid, $loaded_activity->audience, $details->inquiry_id, $details->stage_id, $details->phase_id, $details->activity_id);
  $audience_gid = $users_group;
  $audience_group_type = $activity->audience;
  
  if(($actor_group_type == 'group' && $audience_group_type == 'individual') || ($actor_group_type == 'class' && $audience_group_type != 'class' && $audience_group_type != 'multiclass')) {
  	$new_activity_actor["uid"] = $uid;
  	$new_activity_actor["gid"] = $audience_gid;
  }
  else {  
  	$new_activity_actor["uid"] = $activity_actor[0]["uid"];
  	$new_activity_actor["gid"] = $activity_actor[0]["gid"];
  }
    insert_activity_actor($new_activity_actor);
		
		//set the stage phase activity
    $psp_id = get_psp_id_for_stage_and_phase($details->stage_id, $details->phase_id);
    if(!$psp_id) {
    	$psp_id = get_psp_id_for_stage_and_phase(NULL, $details->phase_id);
    }
    
    $query = "SELECT position FROM pi_stage_phase_activity WHERE psp_id = " . $psp_id . " ORDER BY position DESC";
    $current_pos = db_result(db_query($query));
    $new_pos = $current_pos + 1;
    insert_stage_phase_activity($psp_id, $new_activity_id, $new_pos);

    //set pi activity node
    add_new_pi_activity_node($node, $user, $node_function, $visible_status, $new_details);

    //set og if necessary for new node
    $details = get_inquiry_details_from_current_path();
    $activity = load_activity($details->activity_id);
    if ($loaded_activity->audience != "individual") {
        $users_group = get_group_of_type($uid, $loaded_activity->audience, $new_details->inquiry_id, $new_details->stage_id, $new_details->phase_id, $new_details->activity_id);
        $context['groups'] = array($users_group);
        og_add_group_action($node, $context);
    }
}

function add_data_activity_from_data_logger($node, $user, $node_function, $visible_status) {
	$uid = $user->uid;
	//As this is coming in from ahah_helper the args are different
	//Therefore standard way of getting details from path does not work
	$details = new stdClass;
	$details->inquiry_id = arg(2);
	$details->stage_id = arg(3);
	$details->phase_id = arg(4);
	$details->activity_id = arg(5);

	$loaded_activity =  load_activity($details->activity_id);
	
	///Get values of key measures and use these to name the new activity
	$measures_param = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);

	if ($measures_param) {
		$measures_node = node_load($measures_param);
		$measure_rows = $measures_node->categories;
	}
	
	$title_array = array();
	
	foreach ($measure_rows as $measure_nid => $measure_selection) {
  	if($measure_selection['#status'] == 'key') {
  		$key = t($measures_param . "-" . $measure_nid);
  		$title_array[] = t($node->onepageprofile_categories[$key]['value']);
  	}
  }
	
	//values of key measures becomes the activity name
	$activity_name = implode("-",$title_array);
	
	//if empty give a placeholder name
	if (strlen($activity_name) < 2) {
        $activity_name = "Data";
  }
  	
  //the new activity
	$activity_array = array();
	// $activity_array["name"] = t("D: " . $activity_name);
	$activity_array["name"] = t($activity_name);
	$activity_array["description"] = $loaded_activity->description;
	$activity_array["activity_type"] = $loaded_activity->activity_type;
	$activity_array["node_type"] = $loaded_activity->node_type;
	$activity_array["parameters"] = $loaded_activity->parameters;
	$activity_array["destination"] = $loaded_activity->destination;
	$activity_array["audience"] = $loaded_activity->audience;

	//create the new activity
	save_activity($activity_array);
	$query2 = "SELECT MAX(pi_activity.activity_id) FROM pi_activity";
	$new_activity_id = db_result(db_query($query2));

	//****new details object
	$new_details = new stdClass;
	$new_details->inquiry_id = $details->inquiry_id;
	$new_details->stage_id = $details->stage_id;
	$new_details->phase_id = $details->phase_id;
	$new_details->activity_id = $new_activity_id;

	//set status for the new activity
	$activity_status = load_activity_status($details->inquiry_id, $details->activity_id, $user->uid);
	$new_activity_status = new stdClass;
	$new_activity_status->inquiry_id = $activity_status->inquiry_id;
	$new_activity_status->activity_id = $new_activity_id;
	$new_activity_status->uid = $activity_status->uid;
	$new_activity_status->gid = $activity_status->gid;
	$new_activity_status->node_function = $activity_status->node_function;
	$new_activity_status->visible_status = $activity_status->visible_status;
	save_activity_status($new_activity_status);

	//set actor for the new activity
	$activity_actor = load_activity_actor($details->inquiry_id, $details->activity_id, NULL, NULL);
	$new_activity_actor["inquiry_id"] = $details->inquiry_id;
	$new_activity_actor["activity_id"] = $new_activity_id;
	
	
	///for audience smaller than actor in add activity
  $actor_gid = $activity_actor[0]["gid"];
  $actor_uid = $activity_actor[0]["uid"];
  $actor_group_type = get_type_of_group($actor_gid);
  $users_group = get_group_of_type($uid, $loaded_activity->audience, $details->inquiry_id, $details->stage_id, $details->phase_id, $details->activity_id);
  $audience_gid = $users_group;
  $audience_group_type = $activity->audience;
  
  if(($actor_group_type == 'group' && $audience_group_type == 'individual') || ($actor_group_type == 'class' && $audience_group_type != 'class' && $audience_group_type != 'multiclass')) {
  	$new_activity_actor["uid"] = $uid;
  	$new_activity_actor["gid"] = $audience_gid;
  }
  else {  
  	$new_activity_actor["uid"] = $activity_actor[0]["uid"];
  	$new_activity_actor["gid"] = $activity_actor[0]["gid"];
  }
	insert_activity_actor($new_activity_actor);
	
	//set the stage phase activity
	$psp_id = get_psp_id_for_stage_and_phase($details->stage_id, $details->phase_id);
	if(!$psp_id) {
		$psp_id = get_psp_id_for_stage_and_phase(NULL, $details->phase_id);
	}

	$query = "SELECT position FROM pi_stage_phase_activity WHERE psp_id = " . $psp_id . " ORDER BY position DESC";
	$current_pos = db_result(db_query($query));
	$new_pos = $current_pos + 1;
	insert_stage_phase_activity($psp_id, $new_activity_id, $new_pos);

	//set pi activity node
	add_new_pi_activity_node($node, $user, $node_function, $visible_status, $new_details);
	

}

/*
 * PI add data used. Create another activity containing the entered data.
 */
function workflow_for_created_node_adder_activity($node, $user, $node_function, $visible_status) {
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
	$loaded_activity =  load_activity($details->activity_id);
		
	/*Get values of key measures and use these to name the new activity*/
	$measures_param = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);

	if ($measures_param) {
		$measures_node = node_load($measures_param);
		$measure_rows = $measures_node->measures_list;
	}
	
	$title_array = array();
	foreach ($measure_rows as $measure_nid => $measure_selection) {
  	if($measure_selection['#status'] == 'key') {
  		$key = t($measures_param . "-" . $measure_nid);
  		$title_array[] = t($node->onepageprofile_categories[$key]['value']);
  	}
  }
	
	//values of key measures becomes the activity name
	$activity_name = implode("-",$title_array);
	
	//if empty give a placeholder name
	if (strlen($activity_name) < 2) {
        $activity_name = "Data";
  }
  	
  //the new activity
	$activity_array = array();
	// $activity_array["name"] = t("D: " . $activity_name);
	$activity_array["name"] = t($activity_name);
	$activity_array["description"] = $loaded_activity->description;
	$activity_array["activity_type"] = $loaded_activity->activity_type;
	$activity_array["node_type"] = $loaded_activity->node_type;
	$activity_array["parameters"] = $loaded_activity->parameters;
	$activity_array["destination"] = $loaded_activity->destination;
	$activity_array["audience"] = $loaded_activity->audience;

	//create the new activity
	save_activity($activity_array);
	$query2 = "SELECT MAX(pi_activity.activity_id) FROM pi_activity";
	$new_activity_id = db_result(db_query($query2));

	//****new details object
	$new_details = new stdClass;
	$new_details->inquiry_id = $details->inquiry_id;
	$new_details->stage_id = $details->stage_id;
	$new_details->phase_id = $details->phase_id;
	$new_details->activity_id = $new_activity_id;

	//set status for the new activity
	$activity_status = load_activity_status($details->inquiry_id, $details->activity_id, $user->uid);
	$new_activity_status = new stdClass;
	$new_activity_status->inquiry_id = $activity_status->inquiry_id;
	$new_activity_status->activity_id = $new_activity_id;
	$new_activity_status->uid = $activity_status->uid;
	$new_activity_status->gid = $activity_status->gid;
	$new_activity_status->node_function = $activity_status->node_function;
	$new_activity_status->visible_status = $activity_status->visible_status;
	save_activity_status($new_activity_status);

	//set actor for the new activity
	$activity_actor = load_activity_actor($details->inquiry_id, $details->activity_id, NULL, NULL);
	$new_activity_actor["inquiry_id"] = $details->inquiry_id;
	$new_activity_actor["activity_id"] = $new_activity_id;

  ///for audience smaller than actor in add activity
  $actor_gid = $activity_actor[0]["gid"];
  $actor_uid = $activity_actor[0]["uid"];
  $actor_group_type = get_type_of_group($actor_gid);
  $users_group = get_group_of_type($uid, $loaded_activity->audience, $details->inquiry_id, $details->stage_id, $details->phase_id, $details->activity_id);
  $audience_gid = $users_group;
  $audience_group_type = $activity->audience;
  
  if(($actor_group_type == 'group' && $audience_group_type == 'individual') || ($actor_group_type == 'class' && $audience_group_type != 'class' && $audience_group_type != 'multiclass')) {
  	$new_activity_actor["uid"] = $uid;
  	$new_activity_actor["gid"] = $audience_gid;
  }
  else {  
  	$new_activity_actor["uid"] = $activity_actor[0]["uid"];
  	$new_activity_actor["gid"] = $activity_actor[0]["gid"];
  }
	insert_activity_actor($new_activity_actor);
	
	//set the stage phase activity
	$psp_id = get_psp_id_for_stage_and_phase($details->stage_id, $details->phase_id);
	if(!$psp_id) {
		$psp_id = get_psp_id_for_stage_and_phase(NULL, $details->phase_id);
	}

	$query = "SELECT position FROM pi_stage_phase_activity WHERE psp_id = " . $psp_id . " ORDER BY position DESC";
	$current_pos = db_result(db_query($query));
	$new_pos = $current_pos + 1;
	insert_stage_phase_activity($psp_id, $new_activity_id, $new_pos);

	//set pi activity node
	add_new_pi_activity_node($node, $user, $node_function, $visible_status, $new_details);
	
}


function workflow_for_created_node($node, $user, $node_function, $visible_status) {
    $details = get_inquiry_details_from_current_path();
    add_new_pi_activity_node($node, $user, $node_function, $visible_status, $details);
}


//this funciton needs to move to pi module
function get_type_of_group($gid) {
	$query = "SELECT type FROM pi_group_type WHERE gid = '" . $gid . "' ";
	$result = db_result(db_query($query));
	return $result;
}

function add_new_pi_activity_node($node, $user, $node_function, $visible_status, $details) {
    $uid = $user->uid;
    //set the PI activity node
    set_pi_activity_node_for_activity($details->inquiry_id, $details->activity_id, $node->nid);
    $activity = load_activity($details->activity_id);

    $activity_status = load_activity_status($details->inquiry_id, $details->activity_id, $user->uid);


    //if the status was not set specifically for this user and it is an individual activity
    if ($activity->audience == "individual") {
        if ($activity_status->uid != $uid) {
            $activity_status->uid = $uid;
            unset($activity_status->gid);
            unset($activity_status->pas_id);
        }
    }

    //set the correct group
    else {
        $users_group = get_group_of_type($uid, $activity->audience, $details->inquiry_id, $details->stage_id, $details->phase_id, $details->activity_id);
        $context['groups'] = array($users_group);
        og_add_group_action($node, $context);
				
        if ($users_group != $activity_status->gid) {

            $activity_status->gid = $users_group;
            unset($activity_status->pas_id);
            unset($activity_status->uid);
        }
    }
    
    $loaded_activity_actor  = load_activity_actor ($details->inquiry_id, $details->activity_id);
    $actor_gid = $loaded_activity_actor[0]["gid"];
    $actor_uid = $loaded_activity_actor[0]["uid"];
    $actor_group_type = get_type_of_group($actor_gid);
    
    $audience_gid = $users_group;
    $audience_group_type = $activity->audience;
    
    
    //find out if the audience is wider than the actor for the activity
    //if so, set the status for the audience to view
		if(($audience_group_type == 'class' && $actor_group_type != 'class' && $actor_group_type != 'multiclass' ) || ($audience_group_type == 'group' && !$actor_group_type)) {
			$activity_status->node_function = 'view';
			$activity_status->visible_status = 'view';
			save_activity_status($activity_status);
			
			//extend activity actor to size of audience
			$loaded_activity_actor[0]["gid"] = $audience_gid;
			update_activity_actor($loaded_activity_actor[0]);
			
			//add extra status for the original actor
			$actor_activity_status = $activity_status;
			unset($activity_status->pas_id);
			$activity_status->gid = $actor_gid;
			$activity_status->uid = $actor_uid;
    	$activity_status->node_function = $node_function;
    	$activity_status->visible_status = $visible_status;
    	save_activity_status($activity_status);			
		}
		
		elseif (($actor_group_type == 'class' && $audience_group_type != 'class' && $audience_group_type != 'multiclass' ) || ($actor_group_type == 'group' && $audience_group_type == 'individual')) {
			
			
    	$activity_status->node_function = $node_function;
    	$activity_status->visible_status = $visible_status;
    	save_activity_status($activity_status);
    }
    else {
    	$activity_status->node_function = $node_function;
    	$activity_status->visible_status = $visible_status;
    	save_activity_status($activity_status);    
    }
}


function set_pi_activity_node_for_activity($inquiry, $activity, $nid) {
    $query = "INSERT INTO pi_activity_node SET ";
    $query .= "inquiry_id = '" . $inquiry . "'";
    $query .= ", activity_id = '" . $activity . "'";
    $query .= ", nid = '" . $nid . "'";
    db_query($query);
}

function set_hypothesis_teaser_body($node) {
	db_query("UPDATE node_revisions SET body ='" . $node->hypothesis . "' WHERE vid='" . $node->vid . "' ");
}