<?php

// $Id: pi_inquiry.module,v 0.1 2010/03/17 MCP $

/**
 * @file  This module provides the implementation of the Inquiry content type
 */

/**
 * hook_node_info()Define the pi_inquiry node type
 */
function pi_inquiry_node_info() {
  return array(
      'pi_inquiry' => array(
          'name' => t('Inquiry'), // Required.
          'module' => 'pi_inquiry', // Required.
          'description' => t('An nQuire Inquiry'), // Required.
          'has_title' => TRUE,
          'title_label' => t('Inquiry Name'),
          'has_body' => TRUE,
          'body_label' => t('Inquiry Description'),
      )
  );
}

/**
 * Define permissions available for pi_inquiry module
 */
function pi_inquiry_perm() {
  return array('create inquiry', 'edit own inquiry', 'edit any inquiry', 'delete own inquiry', 'delete any inquiry');
}

/**
 * Work out if a user has permission to do something with an Inquiry
 */
function pi_inquiry_access($op, $node, $account) {
  $is_author = $account->uid == $node->uid;
  switch ($op) {
    case 'create':
      // Allow if user's role has 'create inquiry' permission.
      return user_access('create inquiry', $account);
    case 'update':
      // Allow if user's role has 'edit own inquiry' permission and user is
      // the author; or if the user's role has 'edit any inquiry' permission.
      return user_access('edit own inquiry', $account) && is_author ||
              user_access('edit any inquiry', $account);
    case 'delete':
      // Allow if user's role has 'delete own inquiry' permission and user is
      // the author; or if the user's role has 'delete any inquiry' permission.
      return user_access('delete own inquiry', $account) && $is_author ||
              user_access('delete any inquiry', $account);
  }
}

/**
 * The form for adding/editing an Inquiry
 */
function pi_inquiry_form($node) {
  // Get metadata for the node type which is defined in pi_inquiry_info()
  $type = node_get_types('type', $node);

  $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
  );

  //Show a simple textarea, no input selector required....
  $form['body_filter']['body'] = array(
      '#type' => 'textarea',
      '#title' => check_plain($type->body_label),
      '#default_value' => $node->body,
      '#required' => TRUE
  );

  $inquiry_groups = pi_get_defined_group_nids();
  $all_defined_groups = array_keys(pi_flatten_grouped_item_list($inquiry_groups));
  //$form['#allowed_phase_actors'] = $all_defined_groups;
  $group_names['none'] = "Select a group...";
  $group_names = array_replace($group_names, pi_util_get_names_from_nids($all_defined_groups));

  $inquiry_actor_default_value = 'none';

  $form['actor_gid'] = array(
      '#type' => 'select',
      '#title' => t('Who is this inquiry for'),
      '#description' => t('Select the group that will be see this inquiry'),
      '#required' => TRUE,
      '#weight' => 1,
      '#default_value' => isset($node->actor_gid) ? $node->actor_gid : 'none',
      '#options' => $group_names,
      '#allowed_inquiry_actors' => $all_defined_groups,
      '#element_validate' => array('pi_inquiry_form_actor_gid_validate')
  );

  $form['layout'] = array(
      '#type' => 'select',
      '#title' => t('Layout'),
      '#weight' => 2,
      '#default_value' => isset($node->layout) ? $node->layout : 'list',
      '#options' => array(
          'list' => t("List"),
          'pentagon' => t("Pentagon"),
          'octagon' => t("Plain octagon"),
          'octagon_icon' => t("Octagon with icons"),
          'octagon_activity' => t("Octagon with activity counts"),
          'octagon_icon_activity' => t("Octagon with activity counts and icons"),
      ),
  );

  $inquiry_groups = pi_get_defined_group_nids();
  $all_defined_groups = array_keys(pi_flatten_grouped_item_list($inquiry_groups));
  $form['#allowed_inquiry_actors'] = $all_defined_groups;
  $group_names['none'] = "Select a group...";
  $group_names = array_replace($group_names, pi_util_get_names_from_nids($all_defined_groups));

  $form['activities'] = pi_activity_show_hide_from($node->nid);
  $form['activities']['#weight'] = 3;

  return $form;
}

/**
 * This is the validation function to make sure that pi_inquiry.actor_gid is a valid group
 * @param array $element
 * @param array $form_state
 */
function pi_inquiry_form_actor_gid_validate($element, $form_state) {
  if (!in_array($form_state['values']['actor_gid'], $element['#allowed_inquiry_actors'])) {
    form_error($element, t('The selected inquiry actor group is not valid, please choose a group from the list.'));
  }
}

/**
 * hook_form_alter - changes the form to change it from default node layout
 */
function pi_inquiry_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'pi_inquiry_node_form') {
    $form['menu']['#weight'] = 3;

    //Remove attachments and comment settings
    unset($form['attachments']);
    unset($form['comment_settings']);
  }
}

function _pi_inquiry_prepare_participants_to_save($node, &$data_to_write) {
  if (!isset($node->participants_selection)) {
    $data_to_write->participants_selection = 'justme';
    $data_to_write->participants_cohort = nquire_group_create_default_inquiry_group($node->uid, "Participants of {$node->nid}");
    $data_to_write->actor_gid = $data_to_write->participants_cohort;
    $data_to_write->group_creation = 'moderated';
  } else {
    $data_to_write->participants_selection = $node->participants_selection;
    $data_to_write->participants_cohort = $node->participants_cohort;
    $data_to_write->actor_gid = $node->actor_gid;
    $data_to_write->group_creation = $data_to_write->group_creation;
  }
}

/**
 * INSERT command for a new inquiry
 */
function pi_inquiry_insert($node) {
  // Query the database first to set the weight to place the item at the end of lists.
  // If the query result is NULL then the the field will to default=0 since the weight
  // column is defined with NOT NULL DEFAULT 0


  $initial_weight = db_result(db_query("SELECT MAX(weight)+1 FROM {pi_inquiry}"));
  $data_to_write = new stdClass();
  $data_to_write->nid = $node->nid;
  $data_to_write->vid = $node->vid;
  $data_to_write->layout = $node->layout;
  $data_to_write->weight = $initial_weight;
  $data_to_write->roles = $node->roles;
  _pi_inquiry_prepare_participants_to_save($node, $data_to_write);

  $result = drupal_write_record('pi_inquiry', $data_to_write);

  if ($result != SAVED_NEW) {
    $result_string = _pi_write_record_result_string($result);
    drupal_set_message(t('Problem saving Inquiry data - saved returned a value of %value.', array('%value' => $result_string)), 'error');
  }
}

/**
 * UPDATE command for an existing inquiry
 */
function pi_inquiry_update($node) {
  if ($node->revision) {
    // New revision; treat it as a new record.
    pi_inquiry_insert($node);
  } else {
    $link = array();
    $summary = array();

    // If there are no activities installed then the options will be empty, so make into an empty array
    if (!is_array($node->activities_show_hide)) {
      $node->activities_show_hide = array();
    }

    foreach ($node->activities_show_hide as $module_name => $show_hide) {
      if ($show_hide['link'] !== 0) {
        $link[] = $module_name;
      }

      if ($show_hide['summary'] !== 0) {
        $summary[] = $module_name;
      }
    }

    $data_to_write = new stdClass();
    $data_to_write->nid = $node->nid;
    $data_to_write->vid = $node->vid;
    $data_to_write->layout = $node->layout;
    $data_to_write->weight = $node->weight;
    $data_to_write->roles = $node->roles;
    _pi_inquiry_prepare_participants_to_save($node, $data_to_write);

    $result = drupal_write_record('pi_inquiry', $data_to_write, array('vid', 'nid'));
    if ($result != SAVED_UPDATED) {
      $result_string = _pi_write_record_result_string($result);
      drupal_set_message(t('Problem saving Inquiry data - saved returned a value of %value.', array('%value' => $result_string)), 'error');
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function pi_inquiry_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {pi_inqury} WHERE vid = %d', $node->vid);
      break;
  }
}

/**
 * DELETE command for an inquiry
 * @todo this should delete all the associated data with the inquiry too!
 */
function pi_inquiry_delete(&$node) {
  // Delete the related information we were saving for this node.
  db_query('DELETE FROM {pi_inquiry} WHERE nid = %d', $node->nid);
}

/**
 * node loader function for inquiry type called when noad_load() is called
 */
function pi_inquiry_load($node) {
  $inquiry_row = db_fetch_array(db_query('SELECT `layout`, `roles`, `weight`, `participants_selection`, `participants_cohort`, `group_creation`, `actor_gid` FROM {pi_inquiry} WHERE vid = %d', $node->vid));
  $inquiry = new stdClass();
  $inquiry->layout = $inquiry_row['layout'];
  $inquiry->weight = $inquiry_row['weight'];
  
  $inquiry->participants_selection = $inquiry_row['participants_selection'];
  $inquiry->participants_cohort = $inquiry_row['participants_cohort'];
  $inquiry->actor_gid = $inquiry_row['actor_gid'];
  $inquiry->group_creation = $inquiry_row['group_creation'];
  
  $inquiry->roles = $inquiry_row['roles'];
  $inquiry->roles_array = nquire_commons_decode_data($inquiry_row['roles']);
  
  return $inquiry;
}

/**
 * Builds the view for the inquiry
 * @todo Add a detailed inquiry view to be used in the whole system
 */
function pi_inquiry_view($node, $teaser = FALSE, $page = FALSE) {
  // If $teaser is FALSE, the entire node is being displayed.
  if (!$teaser) {
    //Use Drupal's default node view.
    $node = node_prepare($node, $teaser);

    // render the inquiry description using a theme function
    $node->content['layout'] = array(
        '#value' => theme('inquiry_layout', $node),
        '#weight' => 1,
    );
    // Add more involved inquiry layout here
  }

  // If $teaser is true, node is being displayed as a teaser,
  // in this case, just show the description and none of the rest of the inquiry stuff
  if ($teaser) {
    //Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }
  return $node;
}

/**
 * Queries the node database to provide a list of nids referring to inquiries
 * ordered by weight
 * use node_load($nid) to then access the inquiry details
 * @return array of nids ordered by weight
 */
function pi_inquiry_load_nids() {
  $query = "SELECT nid from {pi_inquiry} ORDER BY weight";
  $result = db_query($query);
  $inquiry_nodes = array();
  while ($nid = db_result($result)) {
    $inquiry_nodes[] = $nid;
  }
  return $inquiry_nodes;
}

function pi_activity_show_hide_from($nid) {
  //$details = get_inquiry_details_from_current_path();
  //Since this is going to be an add-only form, junk the node data.
  //Now create a new form to submit the measures.

  $form = array();
  $default = array();

  $options = array('link' => t('Hide link'), 'summary' => t('Hide summary'));

  $form['activities_show_hide'] = array(
      '#type' => 'fieldset',
      '#title' => t('Show/Hide Activities'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      '#weight' => 5,
  );

  $activities = variable_get('pi_activities', array());
  asort($activities);
  $hidden_activities = pi_activity_get_hidden_activities_from_inquiry($nid);

  foreach ($activities as $module_name => $name) {
    $default = array();
    $hidden_activities_link = array();
    $hidden_activities_summary = array();

    if (is_array($hidden_activities['link'])) {
      $hidden_activities_link = $hidden_activities['link'];
    }

    if (is_array($hidden_activities['summary'])) {
      $hidden_activities_summary = $hidden_activities['summary'];
    }

    if (array_search($module_name, $hidden_activities_link) !== FALSE) {
      $default[] = 'link';
    }

    if (array_search($module_name, $hidden_activities_summary) !== FALSE) {
      $default[] = 'summary';
    }

    $form['activities_show_hide'][$module_name] = array(
        '#type' => 'checkboxes',
        '#title' => $name,
        '#default_value' => $default,
        '#options' => $options
    );
  }
  if ($form_state['submitted']) {
    pi_activity_show_hide_from_submit($form, $form_state);
  }

  return $form;
}

function pi_activity_get_hidden_activities_from_inquiry($inquiry_id) {
  $query = "SELECT * FROM {pi_inquiry} WHERE nid = %d";

  $result = db_query($query, $inquiry_id);
  $data = array();

  if ($inquiry = db_fetch_object($result)) {
    $data['link'] = explode(',', $inquiry->hide_activity_link);
    $data['summary'] = explode(',', $inquiry->hide_activity_in_summary);
  }

  return $data;
}

function theme_pi_activity_show_hide($form) {
  $output .= drupal_render($form);
  return $output;
}

/**
 * Declare theme functions for pi_inquiry
 */
function pi_inquiry_theme() {
  return array(
      'inquiry_layout' => array(
          'arguments' => array('node'),
      ),
  );
}

/**
 * Theme function to display the inquiry layout
 * @param drupal node data $node Inquiry node details.
 */
function theme_inquiry_layout($node) {
  $output .= '<div class="inquiry-layout">';
  $output .= t("Layout: %layout", array('%layout' => check_plain($node->layout)));
  $output .= '</div>';
  return $output;
}
