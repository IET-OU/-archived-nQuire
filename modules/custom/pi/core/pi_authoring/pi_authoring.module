<?php

/**
 * @file This provides the inquiry authoring wizard which allows the user to create and
 * edit inquiries.  The authoring system appears in the navigation menu. 
 */


/**
 * This is executed before every page request and provides the functionality to include particular files,
 * e.g. custom css and javascript files. 
 */
function pi_authoring_init() {
    drupal_add_css(drupal_get_path('module', 'pi_authoring') .'/pi_authoring.css');
}



/**
 * This implements the theme hook for pi_authoring which defines the available theme
 * functions within this module
 * @return array of theme names and arguments
 */
function pi_authoring_theme() {
	return array(
		'pi_authoring_order_inquiries_form' => array(
			'arguments' => array('form' => NULL),
		),
		'pi_authoring_order_phases_form' => array(
			'arguments' => array('form' => NULL),
		),
	);
}

/**
 * Implementation of _help hook for pi_authoring
 */
function pi_authoring_help($section='') {

	$output = '';

	switch ($section) {
		case "admin/help#pi_authoring":
			$output = '<p>'.  t("Test Authoring for Basic Inquiry Authoring"). '</p>';
			break;
	}

	return $output;
}

/**
 * Implementation of _perm hook i.e. who has access to the authoring pages
 */
function pi_authoring_perm() {
	return array('access pi_authoring content');
}

/**
 * Implementation of _menu hook which has a info page displaying a table of swim lanes
 * similar to the paper based one for authoring and a set of numbered links to define
 * elements of the inquiry i.e. the inquiry, phases, stages and activities along with
 * audience, groups and individual users who will be able to access them
 */
function pi_authoring_menu() {
	$items = array();
	
	// Add some items to the administration menu
	$items['admin/piauthoring'] = array(
      'title' => t('nQuire Inquiry Authoring'),
	  'position' => 'right',
	  'weight' => -5,
  	  'page callback' => 'pi_authoring_view',
      'access arguments' => array('administer site configuration'),
	);

	$items['admin/piauthoring/inquires'] = array(
      'title' => 'Inquiries',
	  'description' => 'Manage Inquiries.',
  	  'page callback' => 'pi_authoring_view',
  	  'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('administer site configuration'),
	);

	//Add a new Inquiry Authoring top level menu
	$items['nQuire'] = array(
      'title' => 'Inquiry Authoring',
  	  'page callback' => 'pi_authoring_view',
  	  'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('access pi_authoring content'),
	);

	$items['nQuire/list'] = array(
      'title' => t('Inquiries'),
  	  'page callback' => 'pi_authoring_view',
  	  'type' => MENU_DEFAULT_LOCAL_TASK,
      'access arguments' => array('access pi_authoring content'),
	  'weight' => 0,
	);
	
	$items['nQuire/new'] = array(
      'title' => 'New Inquiry',
  	  'page callback' => 'pi_authoring_new_inquiry_inquiry',
	  'type' => MENU_LOCAL_TASK,
      'access arguments' => array('access pi_authoring content'),
	  'weight' => 1,
	);

	$items['nQuire/inquiry/%node'] = array(
      'title' => t('Inquiry'),
  	  'page callback' => 'pi_authoring_inquiry_phases',
  	  'page arguments' => array(2),
  	  'type' => MENU_CALLBACK,
  	  'access_callback' => TRUE,
      'access arguments' => array('access pi_authoring content'),
	);
	
	$items['nQuire/inquiry/%node/phases'] = array(
      'title' => t('Edit Phases'),
  	  'page callback' => 'pi_authoring_inquiry_phases',
  	  'page arguments' => array(2),
  	  'type' => MENU_DEFAULT_LOCAL_TASK,
	  'access_callback' => TRUE,
      'access arguments' => array('access pi_authoring content'),
	  'weight' => 0,
	);
	
	$items['nQuire/inquiry/%node/edit'] = array(
      'title' => t('Edit Inquiry'),
  	  'page callback' => 'pi_authoring_inquiry_edit',
  	  'page arguments' => array(2),
	  'access callback' => 'node_access',
	  'access arguments' => array('update', 1),
  	  'type' => MENU_LOCAL_TASK,
	  'weight' => 1,
	);
	
	$items['piauthoring'] = array(
	//'path' => 'piauthoring',
      'title' => t('PI Authoring'),
  	  'page callback' => 'pi_authoring_view',
  	  'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('access pi_authoring content'),
	);

	$items['piauthoring/newinquiry'] = array(
	//'path' => 'piauthoring/newinquiry',
      'title' => t('1. Define the basics'),
  	  'page callback' => 'pi_authoring_new_inquiry',
  	  'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/newinquiry/1'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('Remove'),
  	 'page callback' => 'pi_authoring_new_inquiry_remove',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);

	$items['piauthoring/newinquiry/inquiry'] = array(
	//'path' => 'piauthoring/newinquiry/inquiry',
      'title' => t('1.1. Inquiry'),
  	  'page callback' => 'pi_authoring_new_inquiry_inquiry',
  	  'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('access pi_authoring content'),
	);

	$items['piauthoring/newinquiry/phases'] = array(
	//'path' => 'piauthoring/newinquiry/phases',
      'title' => t('1.2. Phases'),
  	  'page callback' => 'pi_authoring_new_inquiry_phases',
  	  'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/newinquiry/stages'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('1.3. Stages'),
  	 'page callback' => 'pi_authoring_new_inquiry_stages',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);

	$items['piauthoring/firstorganisation'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('2. First Organisation'),
  	 'page callback' => 'pi_authoring_new_inquiry_first_organisation',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/firstorganisation/1'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('Remove'),
  	 'page callback' => 'pi_authoring_new_inquiry_first_organisation_remove',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);

	$items['piauthoring/firstorganisation/stagesphases'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('2.1. Sort Phases Into Stages'),
  	 'page callback' => 'pi_authoring_new_inquiry_first_organisation_stagesphases',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);

	$items['piauthoring/usersandgroups'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('3. Users & Groups'),
  	 'page callback' => 'pi_authoring_new_inquiry_users_and_groups',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);

	$items['piauthoring/usersandgroups/1'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('3.1. Create Your Users'),
  	 'page callback' => 'pi_authoring_new_inquiry_add_new_users',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/usersandgroups/2'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('3.2. Create Your Organic Groups'),
  	 'page callback' => 'pi_authoring_new_inquiry_add_new_groups',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);

	$items['piauthoring/usersandgroups/3'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('3.3. Define Group Types'),
  	 'page callback' => 'pi_authoring_new_inquiry_define_group_type',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/actors'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('4. Inquiry, Phases & Stages Actors'),
  	 'page callback' => 'pi_authoring_new_inquiry_define_inquiry_phases_stages',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);

	$items['piauthoring/actors/1'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('4.1. Define Actors'),
  	 'page callback' => 'pi_authoring_new_inquiry_define_inquiry_phases_stages_actors',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);

	$items['piauthoring/activities'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('5. Authoring Activities'),
  	 'page callback' => 'pi_authoring_new_activities',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/1'] = array(
		//'path' => 'piauthoring/newinquiry/stages',
		'title' => t('5.1. Author Place Holders'),
		'page callback' => 'pi_authoring_new_activities_placeholder',
		'type' => MENU_NORMAL_ITEM,
		'access arguments' => array('access pi_authoring content'),
	);

	$items['piauthoring/activities/1/%node'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
  	 'page callback' => 'pi_authoring_new_activities_placeholder',
	 'page arguments' => array(3),
  	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/2'] = array(
		'title' => t('5.2. Install Needed Modules'),
		'page callback' => 'pi_authoring_new_activities_modules',
		'type' => MENU_NORMAL_ITEM,
		'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/3'] = array(
	    'title' => t('5.3. Author Real Activities'),
		'page arguments' => array(NULL),
		'page callback' => 'pi_authoring_new_activities_real',
		'type' => MENU_NORMAL_ITEM,
		'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/3/%node'] = array(
		'page callback' => 'pi_authoring_new_activities_real',
		'page arguments' => array(3),
		'type' => MENU_CALLBACK,
		'access arguments' => array('access pi_authoring content'),
	);

	
	$items['piauthoring/activities/4/%node'] = array(
		'title' => t('Add Activity'),
		'page callback' => 'pi_authoring_new_activities_placeholder_add',
		'page arguments' => array(3),
		'type' => MENU_CALLBACK,
		'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/5'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('Edit Activity'),
  	 'page callback' => 'pi_authoring_new_activities_real_edit',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/6'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('Include Activity'),
  	 'page callback' => 'pi_authoring_new_activities_include',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/7'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('Move Stage UP'),
  	 'page callback' => 'move_stage_up_one_position',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/8'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('Move Stage Down'),
  	 'page callback' => 'move_stage_down_one_position',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/9'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('Move Phase UP'),
  	 'page callback' => 'move_phase_up_one_position',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/10'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('Move Phase Down'),
  	 'page callback' => 'move_phase_down_one_position',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/11'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('Move Activity UP'),
  	 'page callback' => 'move_activity_up_one_position',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/12'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('Move Activity UP'),
  	 'page callback' => 'move_activity_down_one_position',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/13'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('Delete Activity'),
  	 'page callback' => 'delete_activity_link',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/14'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('Un-include Activity'),
  	 'page callback' => 'uninclude_activity_link',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/workflow'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('6. Author Workflow Rules'),
  	 'page callback' => 'pi_authoring_workflow',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/grouping'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('7. Advanced Grouping'),
  	 'page callback' => 'pi_authoring_advanced_groups',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/grouping/1'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('7.1. Define Groups'),
  	 'page callback' => 'pi_authoring_advanced_groups_og',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/grouping/2'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => t('7.2. Create Grouping'),
  	 'page callback' => 'pi_authoring_advanced_groups_create',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);

	return $items;
}


//-------------------------------------------------------------------------------------------------------------------
//----------------------------------------------Table View of Inquiry------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------

/**
 * This is the start page for inquiry authoring, it will allow the user to select an existing
 * inquiry for editing, or to create a new inquiry.
 */
function pi_authoring_view(){
	$content = '';
	
	// Wrap the contet in a named element to allow css styles to be unique to this module 
	$content .="<div id='pi_authoring'>";
	
	$content .= "<p>To create a new inquiry enter the details here. " . 
		"To edit an existing inquiry select it from the list below.</p>\n";
/*	
	$content .="<div id='new_inquiry'>\n"; 
	$content .= drupal_get_form('pi_authoring_new_inquiry_inquiry_form');
	$content .="</div>\n";  // End of '#new_inquiry
*/	
	$content .= "<h2>Current Inquiries</h2>\n";
	
	$inquiry_nids = pi_inquiry_load_nids();
	
    $rows = array();
	if(!empty($inquiry_nids))
	{
		$content .= drupal_get_form('pi_authoring_order_inquiries_form', $inquiry_nids);
	}
	else
	{
		// Display a warning message to the user as there are no phases yet defined 
		drupal_set_message("No inquires created so far.", 'warning', FALSE);

/*		// Also display some boilerplate text about defining inquiries
		$content .="<div class='help'>\n";
		$content .= "<p>Each activity in an inquiry is allocated to a phase.  ";
		$content .= "A phase is a conceptual part of the inquiry model, for example, ";
		$content .= " <em>Find My Topic</em>, <em>Data Collection</em> and <em>Reflect</em> can all ";
		$content .= "be phases in an inquiry.</p>\n";
		$content .= "</div>\n"; // #help
*/
	}
	
	$content .="</div>\n";  // End of '#pi_authoring'
	return $content;
}



/**
 * This function creates the form for draggable inquiry ordering on the inquiry authoring page
 * @param $inquiries array of each of the inquiry nids in the inquiry
 * @param db_result_object $inquiry the inquiry these phases belong to used to redirect user back to 
 *  inquiry phases page
 * @return array describing a form in drupal api format
 */
function pi_authoring_order_inquiries_form(&$form_state, $inquiries) {
	$form = array();
	$form['#theme'] = 'pi_authoring_order_inquiries_form';
	
	$form['#title'] = 'Inquiries';
	
	$form['order_inquiries_inquiries'] = array(
		'#tree' => TRUE
	);
	
	$position = 0;
	foreach($inquiries as $inquiry_nid)
	{
		$inquiry = node_load($inquiry_nid);
		$form['order_inquiries_inquiries'][$inquiry->nid]['title'] =
		 	array(
		 		'#value' => l(t($inquiry->title), 'nQuire/inquiry/' . $inquiry->nid . '/phases'),
		 	);
		$form['order_inquiries_inquiries'][$inquiry->nid]['body'] = 
			array(
				'#value' => $inquiry->body
			);
		$form['order_inquiries_inquiries'][$inquiry->nid]['delete'] = 
			array(
				'#value' => l(t("Delete"), 'nQuire/inquiry/' . $inquiry->nid . '/delete')
			);
		$form['order_inquiries_inquiries'][$inquiry->nid]['weight'] = 
			array(
	            '#type'          => 'weight',
	            '#delta'         => count($inquiries),
	            '#default_value' => $position
	        );
        
        $position++;
	}
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
  	);
  	return $form;	
}

/**
 * This handles the data from the inquiry ordering form, it does not take the actual order
 * numbers provided by the form, but reorders them from 0..(n-1) so that the weight data in the 
 * table is always consistant and not surceptable to errors introduced by bad post data.
 * @param array $form drupal api form data
 * @param array $form_state drupal api submitted form data
 */
function pi_authoring_order_inquiries_form_submit($form, &$form_state)
{
	firep($form_state['values']['order_inquiries_inquiries'], "Form data");
	$inquiry_order = array();
	
	//put all the phases in an array
	foreach($form_state['values']['order_inquiries_inquiries'] as $inquiry_nid => $new_order)
	{
		$inquiry_order[$inquiry_nid] = $new_order; 
	}
	//sort the elements by the new order
	asort($inquiry_order);
	//firep(var_dump($phase_order), "New order");
	
	// Now reorder from 0..n based on this order
	$count = 0;
	foreach($inquiry_order as $inquiry_nid => $order)
	{
		$inquiry_order[$inquiry_nid] = $count++;		
	}
	firep($inquiry_order, "New order");
	
	// This should really be done in a transation, but it's not possible in the drupal api as you
	// have to know all about the other table that may be locked..
	
	foreach($inquiry_order as $inquiry_nid => $weight)
	{
		if($inquiry = node_load($inquiry_nid))
		{
			$inquiry->weight = $weight;
			node_save($inquiry);
		}
		else
		{
			drupal_set_error(t("Can't find Inquiry $inquiry_nid"), 'error');
		}
	}
}

/**
 * Draws the grid view for an inquiry showing phases, stages and activities.
 * 
 * @param db_fetch_object $inquiry The inquiry for which to draw the table given as an object returned by db_fetch_object 
 * @param unknown_type $view_type
 * @return string html content of the inquiry table view
 */
function draw_table($inquiry, $view_type){
	/*
	 * to build up the table we need to know the phases and activities and to which stage they belong to.
	 * for each phase in the inquiry
	 *  - 1. print the name and find out if it is part of a stage and colour them green
	 *  - 2. find out the activities for that phase and for each stage does it belong
	 * 	- 2.1 if it does belong then colour it green
	 *  - 2.2 if not then include a link to add the activity to that phase and stage
	 */
	 
	$stage_phase_activities = array();

	// Get the nids of all the inquiry phases and stages
	$phase_nids = pi_phase_load_nids($inquiry->nid);
	$stage_nids = pi_stage_load_nids($inquiry->nid);
	
	// pre-load the stages for the inquiry as they're going to be used on each phase row
	$stages = array(); 
	foreach($stage_nids as $stage_nid)
	{
		$stages[$stage_nid] = node_load($stage_nid);
	}
	
	// phase->nid is used in this function, so no need to load the node here, but it will be passed on to
	// get_view, so they are loaded anyway
	$phases = array();
	foreach($phase_nids as $phase_nid)
	{
		$phases[] = node_load($phase_nid);
		foreach($stages as $stage)
		{
			//1. is this phase in this stage?
	 		if(in_array($phase_nid, $stage->stage_phases))
	 		{
	 			//2. does this phase in this stage have activites?
	 			$activities = array();
	 			$query = "SELECT * FROM pi_stage_phase_activity WHERE psp_id = %d ORDER BY position";
	 			$result = db_query($query, $stage->stage_phase_ids[$phase_nid]);
	 			while($object = db_fetch_object($result))
	 			{
	 				$activities[] = $object->activity_id;
	 			}
	 			//phase is included in this stage
	 			$stage_phase_activities[$stage->nid][$phase_nid] = $activities;
	 		}
	 		else
	 		{
	 			//echo $phase->name . ", " . $stage->name . ", " . "null; ";
	 			//phase not in this stage
	 			$stage_phase_activities[$stage->nid][$phase_nid] = NULL;
	 		}
	 	}
	 }
	 firep($stage_phase_activities, "stage_phase_activities");
	return get_view($inquiry, $stage_phase_activities, $stages, $phases, $view_type);
}

/**
 * Draw the table for inquiry authoring
 * 
 * @param object(inquiry) $inquiry
 * @param array(uint)(uint) $stage_phase_activities array of [stage_nid][phase_nid] with an array if activity_ids if inlcuded phase is in stage, NULL if not
 * @param array(uint) $stages array of stages for this inquiry
 * @param array(uint) $phases array of phases for this inquiry
 * @param string $view_type
 * @return string HTML for an inquiry authoring table
 */
function get_view($inquiry, $stage_phase_activities, $stages, $phases, $view_type){
	//content 
	$content = "<div><strong>" . t($inquiry->title) . "</strong></div>\n";
	//draw the table of phses, activities and stages
	$content .= "<table border='1'>\n";
	
	//stage name headers
	$content .= "<tr bgcolor='#eeeeee'>\n";
	$content .= "<td></td>\n";
	foreach($stages as $stage)
	{
		$content .= "<td>\n";
		$stage_down_link = "piauthoring/activities/8/" . $stage->nid . "/" . $inquiry->nid . "/" .  $_GET['q'];
		$stage_up_link = "piauthoring/activities/7/" . $stage->nid . "/" . $inquiry->nid . "/" .  $_GET['q'];
		$content .= t($stage->title) . "  " . l("(+", $stage_up_link) . "  " . l("-)",$stage_down_link);
		$content .= "</td>\n";
	}
	$content .= "</tr>\n";
	
	//phases and activities
	foreach($phases as $phase)
	{
		//Renders
		// Phase name : stages[]
		// Phase activities : stages[]
		
		// Phase name
		$content .= "<tr>\n";
		$phase_down_link = "piauthoring/activities/10/" . $phase->nid . "/" . $inquiry->nid . "/" . $_GET['q'];
		$phase_up_link = "piauthoring/activities/9/" . $phase->nid . "/" . $inquiry->nid . "/" .  $_GET['q'];
		$content .= "<td bgcolor='#eeeeee'>\n" . t($phase->title) . "    " . l("(+",$phase_down_link) . "  " . l("-)",$phase_up_link) . "</td>\n";
		//if the phase is included in a stage then colour the cell green
		foreach($stages as $stage)
		{
			//If this phase is included in this phase, then "array" will be set
			// otherwise it will be null, so display a red cell 
			if(is_array($stage_phase_activities[$stage->nid][$phase->nid]))
			{
				$content .= "<td bgcolor='#00ff00'>"; //green cell
				$sp_link = get_stage_phase_link($view_type, $inquiry->nid, $stage->nid, $phase->nid);
				firep($sp_link, "Found activities in this stage for $phase->nid");
				if($sp_link != '')
				{
					$content .= l("Add Activity", $sp_link);
				}
				$content .= "</td>\n"; 
			}
			else
			{
				$content .= "<td bgcolor='#ff0000'>";//red cell
				$content .= "</td>\n"; 
			}
		}
		$content .= "</tr>\n";
		
		// Phase activities : stages[]
		//what activities does this phase include for each stage?
		$already_included = array();
		foreach($stages as $s)
		{
			$activity_array = &$stage_phase_activities[$s->nid][$phase->nid];
			if(is_array($activity_array))
			{
				if(count($activity_array)>0)
				{
					foreach($activity_array as $activity)
					{
						// If it's already shown in the table so don't add a new row
						if(!in_array($activity, $already_included))
						{
							$content .= "<tr>\n";
							$activity_up_link = "piauthoring/activities/11/" . $activity . "/";
							$activity_up_link .= $s->nid . "/" . $phase->nid . "/";
							$activity_up_link .= $inquiry->nid . "/" . $_GET['q'];
							$activity_down_link = "piauthoring/activities/12/" . $activity . "/";
							$activity_down_link .= $s->nid . "/" . $phase->nid . "/";
							$activity_down_link .= $inquiry->nid . "/" . $_GET['q'];
							$content .= '<td> -> ' . get_name_of_activity($activity) . '    ' . l("(+",$activity_up_link) . '  ' . l("-)",$activity_down_link) . "</td>\n";
							$stages_repeat_3 = db_query($stages_query);
							foreach($stages as $st)
							{
								if($st->nid == $s->nid){
									$content .= "<td bgcolor='#00ff00'>"; //green cell
									$link = get_activity_link($view_type, $activity, $inquiry->nid);
									if($link != ''){
										$content .= l('edit', $link);
									}
									else if($view_type == 'add'){
										//HERE
										$delete_link = "piauthoring/activities/13/" . $activity;
										$content .= l("delete", $delete_link);
									}
									$content .= "</td>\n";
								}
								else{
									$temp_array = $array[$st->nid][$phase->nid];
									if($temp_array == 'NULL'){
										// stage is not included in this phase so no activities
										$content .= '<td bgcolor="#ff0000"></td>'; //red cell
									}
									else if((count($temp_array)==0)){
										// stage is included in phase but has no activties
										$link = get_to_include_link($view_type,
										$phase->nid,
										$st->nid,
										$activity);
										$content .= '<td bgcolor="#ff9900">'; //amber cell
										if($link != ''){
											$content .= l('include?',$link);
										}
										$content .= '</td>';
									}
									else{
										//stage is included in phase and has activities
										if(in_array($activity, $temp_array)){
											//activity is in this stage as well
											$content .= '<td bgcolor="#00ff00">';
											if($view_type == 'add'){
												//HERE
												$uninclude_link = "piauthoring/activities/14/" . $st->nid;
												$uninclude_link .= "/" . $phase->nid . "/" . $activity;
												$uninclude_link .= "/" . $inquiry->nid;
												$content .= l("un-include", $uninclude_link);
											}
											$content .= '</td>'; //green cell
										}
										else{
											//activity not in this stage
											$link = get_to_include_link($view_type,
											$phase->nid,
											$st->nid,
											$activity);
											$content .= '<td bgcolor="#ff9900">';//amber cell
											if($link != ''){
												$content .= l('include?',$link);
											}
											$content .= '</td>';
										}
									}
								}
							}
							$content .= '</tr>';
							$already_included[] = $activity;
						}
					}
				}
				//end foreach				
			}
		}
	}
	
	$content .= "</table>";
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $activity_id
 * @return string
 */
function get_name_of_activity($activity_id){
	$query = "SELECT * FROM pi_activity WHERE activity_id = '" . $activity_id . "'";
	$result = db_fetch_object(db_query($query));
	return $result->name;
}

/**
 * MISSING
 * 
 * @param unknown_type $view_type
 * @param unknown_type $phase
 * @param unknown_type $stage
 * @param unknown_type $activity
 * @return string
 */
function get_to_include_link($view_type, $phase, $stage, $activity){
	$link = '';
	if($view_type != 'view' & $view_type != 'edit'){
		$link .= "piauthoring/activities/6/" . arg(2) . "/" . arg(3) . "/" . $phase . "/" . $stage . "/" . $activity;
	}
	return $link;
}

/**
 * Return the end of the url to link to pi authoring for the given stage_nid and phase_nid in an inquiry
 * @param $view_type
 * @param $inquiry_nid
 * @param $stage_nid
 * @param $phase_nid
 * @return unknown_type
 */
function get_stage_phase_link($view_type, $inquiry_nid, $stage_nid, $phase_nid){
	$link = '';
	if($view_type != 'view' & $view_type != 'edit'){
		$query = "SELECT * FROM pi_stage_phase WHERE phase_id = %d AND stage_id = %d"; 
		$result = db_query($query, $phase_nid, $stage_nid);
		$row = db_fetch_object($result);
		firep($row);
		if($row)
		{
			$link .= "piauthoring/activities/4/" . $inquiry_nid . "/" . $row->psp_id;
		}
		else
		{
			drupal_set_message("Couldn't find stage a match for stage '$stage_nid' and phase '$phase_nid'", 'warning');
		}
	}
	return $link;
}

/**
 * MISSING
 * 
 * @param unknown_type $view_type
 * @param unknown_type $activity_id
 * @param unknown_type $inquiry_id
 * @return string
 */
function get_activity_link($view_type, $activity_id, $inquiry_id){
	$link = '';
	if($view_type != 'view' & $view_type != 'add'){
		$link .= 'piauthoring/activities/5/' . $activity_id . "/" . $inquiry_id;
	}
	return $link;
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function move_stage_up_one_position(){
	//piauthoring/activities/7
	//the last element in the path is the stage_id
	$stage_id = arg(3);
	$inquiry_id = arg(4);
	//get the stage and find its position
	$query = "SELECT * FROM pi_inquiry_stage WHERE";
	$query .= " stage_id = '" . $stage_id . "'";
	$query .= " AND inquiry_id = '" . $inquiry_id . "'";
	$object = db_fetch_object(db_query($query));
	$start_pos = $object->position;
	//get the next stage based on its position
	$query2 = "SELECT * FROM pi_inquiry_stage WHERE";
	$query2 .= " inquiry_id = '" . $inquiry_id . "'";
	$query2 .= " AND position > '" . $start_pos . "'";
	$query2 .= " ORDER BY position ASC";
	//should be the first in the items returned if not then it is the last stage so can't be moved up one
	$object2 = db_fetch_object(db_query($query2));
	$end_pos = $object2->position;
	//swap these position values
	if($object2){
		//update the tables with the new position values
		$query3 = "UPDATE pi_inquiry_stage SET position = '" . $end_pos . "'";
		$query3 .= "WHERE pis_id = '" . $object->pis_id . "'";
		db_query($query3);
		$query4 = "UPDATE pi_inquiry_stage SET position = '" . $start_pos . "'";
		$query4 .= "WHERE pis_id = '" . $object2->pis_id . "'";
		db_query($query4);
	}
	//return to the relevant page -> last element in the path
	$return_path = arg(5) . "/" . arg(6) . "/" . arg(7) . "/" .  arg(8);
	drupal_goto($return_path);	
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function move_stage_down_one_position(){
	//piauthoring/activities/8
	//the last element in the path is the stage_id
	$stage_id = arg(3);
	$inquiry_id = arg(4);
	//get the stage and find its position
	$query = "SELECT * FROM pi_inquiry_stage WHERE";
	$query .= " stage_id = '" . $stage_id . "'";
	$query .= " AND inquiry_id = '" . $inquiry_id . "'";
	$object = db_fetch_object(db_query($query));
	$start_pos = $object->position;
	//get the previous stage based on its position
	$query2 = "SELECT * FROM pi_inquiry_stage WHERE";
	$query2 .= " inquiry_id = '" . $inquiry_id . "'";
	$query2 .= " AND position < '" . $start_pos . "'";
	$query2 .= " ORDER BY position DESC";
	//should be the first in the items returned if not then it is the last stage so can't be moved up one
	$object2 = db_fetch_object(db_query($query2));
	$end_pos = $object2->position;
	//swap these position values
	if($object2){
		//update the tables with the new position values
		$query3 = "UPDATE pi_inquiry_stage SET position = '" . $end_pos . "'";
		$query3 .= "WHERE pis_id = '" . $object->pis_id . "'";
		db_query($query3);
		$query4 = "UPDATE pi_inquiry_stage SET position = '" . $start_pos . "'";
		$query4 .= "WHERE pis_id = '" . $object2->pis_id . "'";
		db_query($query4);
	}
	//return to the relevant page -> last element in the path
	$return_path = arg(5) . "/" . arg(6) . "/" . arg(7) . "/" .  arg(8);
	drupal_goto($return_path);
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function move_phase_up_one_position(){
	//piauthoring/activities/9
	//the last element in the path is the phase_id
	$phase_id = arg(3);
	$inquiry_id = arg(4);
	//get the phase and find its position
	$query = "SELECT * FROM pi_inquiry_phase WHERE";
	$query .= " phase_id = '" . $phase_id . "'";
	$query .= " AND inquiry_id = '" . $inquiry_id . "'";
	$object = db_fetch_object(db_query($query));
	$start_pos = $object->position;
	//get the next phase based on its position
	$query2 = "SELECT * FROM pi_inquiry_phase WHERE";
	$query2 .= " inquiry_id = '" . $inquiry_id . "'";
	$query2 .= " AND position > '" . $start_pos . "'";
	$query2 .= " ORDER BY position ASC";
	//should be the first in the items returned if not then it is the last stage so can't be moved up one
	$object2 = db_fetch_object(db_query($query2));
	$end_pos = $object2->position;
	//swap these position values
	if($object2){
		//update the tables with the new position values
		$query3 = "UPDATE pi_inquiry_phase SET position = '" . $end_pos . "'";
		$query3 .= "WHERE pip_id = '" . $object->pip_id . "'";
		db_query($query3);
		$query4 = "UPDATE pi_inquiry_phase SET position = '" . $start_pos . "'";
		$query4 .= "WHERE pip_id = '" . $object2->pip_id . "'";
		db_query($query4);
	}
	//return to the relevant page -> last element in the path
	$return_path = arg(5) . "/" . arg(6) . "/" . arg(7) . "/" .  arg(8);
	drupal_goto($return_path);	
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function move_phase_down_one_position(){
	//piauthoring/activities/10
	//the last element in the path is the phase_id
	$phase_id = arg(3);
	$inquiry_id = arg(4);
	//get the phase and find its position
	$query = "SELECT * FROM pi_inquiry_phase WHERE";
	$query .= " phase_id = '" . $phase_id . "'";
	$query .= " AND inquiry_id = '" . $inquiry_id . "'";
	$object = db_fetch_object(db_query($query));
	$start_pos = $object->position;
	//get the next phase based on its position
	$query2 = "SELECT * FROM pi_inquiry_phase WHERE";
	$query2 .= " inquiry_id = '" . $inquiry_id . "'";
	$query2 .= " AND position < '" . $start_pos . "'";
	$query2 .= " ORDER BY position DESC";
	//should be the first in the items returned if not then it is the last stage so can't be moved up one
	$object2 = db_fetch_object(db_query($query2));
	$end_pos = $object2->position;
	//swap these position values
	if($object2){
		//update the tables with the new position values
		$query3 = "UPDATE pi_inquiry_phase SET position = '" . $end_pos . "'";
		$query3 .= "WHERE pip_id = '" . $object->pip_id . "'";
		db_query($query3);
		$query4 = "UPDATE pi_inquiry_phase SET position = '" . $start_pos . "'";
		$query4 .= "WHERE pip_id = '" . $object2->pip_id . "'";
		db_query($query4);
	}
	//return to the relevant page -> last element in the path
	$return_path = arg(5) . "/" . arg(6) . "/" . arg(7) . "/" .  arg(8);
	drupal_goto($return_path);
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function move_activity_up_one_position(){
	//piauthoring/activities/11
	//the last element in the path is the stage_id
	$activity_id = arg(3);
	$stage_id = arg(4);
	$phase_id = arg(5);
	$inquiry_id = arg(6);
	//get the pi_stage_phase
	$query = "SELECT * FROM pi_stage_phase WHERE";
	$query .= " stage_id = '" . $stage_id . "'";
	$query .= " AND phase_id = '" . $phase_id . "'";
	$object = db_fetch_object(db_query($query));
	if($object){
		//echo $object->psp_id . "; ";
		//get the activity and find its position
		$query2 = "SELECT * FROM pi_stage_phase_activity WHERE";
		$query2 .= " psp_id = '" . $object->psp_id . "'";
		$query2 .= " AND activity_id = '" . $activity_id . "'";
		$object2 = db_fetch_object(db_query($query2));
		$start_pos = $object2->position;
		//get the next stage based on its position
		$query3 = "SELECT * FROM pi_stage_phase_activity WHERE";
		$query3 .= " psp_id = '" . $object->psp_id . "'";
		$query3 .= " AND position < '" . $start_pos . "'";
		$query3 .= " ORDER BY position DESC";
		//should be the first in the items returned if not then it is the last stage so can't be moved up one
		$object3 = db_fetch_object(db_query($query3));
		$end_pos = $object3->position;
		//swap these position values
		if($object3){
			//echo "... " . $object2->pspa_id . ", " . $end_pos . "; " . $object3->pspa_id . ", " . $start_pos;
			//update the tables with the new position values
			$query4 = "UPDATE pi_stage_phase_activity SET position = '" . $end_pos . "'";
			$query4 .= " WHERE pspa_id = '" . $object2->pspa_id . "'";
			db_query($query4);
			$query5 = "UPDATE pi_stage_phase_activity SET position = '" . $start_pos . "'";
			$query5 .= " WHERE pspa_id = '" . $object3->pspa_id . "'";
			db_query($query5);
		}
	}
	//return to the relevant page -> last element in the path
	$return_path = arg(7) . "/" . arg(8) . "/" . arg(9) . "/" .  arg(10);
	drupal_goto($return_path);
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function move_activity_down_one_position(){
	//piauthoring/activities/12
	//the last element in the path is the stage_id
	$activity_id = arg(3);
	$stage_id = arg(4);
	$phase_id = arg(5);
	$inquiry_id = arg(6);
	//get the pi_stage_phase
	$query = "SELECT * FROM pi_stage_phase WHERE";
	$query .= " stage_id = '" . $stage_id . "'";
	$query .= " AND phase_id = '" . $phase_id . "'";
	$object = db_fetch_object(db_query($query));
	if($object){
		//echo $object->psp_id . "; ";
		//get the activity and find its position
		$query2 = "SELECT * FROM pi_stage_phase_activity WHERE";
		$query2 .= " psp_id = '" . $object->psp_id . "'";
		$query2 .= " AND activity_id = '" . $activity_id . "'";
		$object2 = db_fetch_object(db_query($query2));
		$start_pos = $object2->position;
		//get the next stage based on its position
		$query3 = "SELECT * FROM pi_stage_phase_activity WHERE";
		$query3 .= " psp_id = '" . $object->psp_id . "'";
		$query3 .= " AND position > '" . $start_pos . "'";
		$query3 .= " ORDER BY position ASC";
		//should be the first in the items returned if not then it is the last stage so can't be moved up one
		$object3 = db_fetch_object(db_query($query3));
		$end_pos = $object3->position;
		//swap these position values
		if($object3){
			//echo "... " . $object2->pspa_id . ", " . $end_pos . "; " . $object3->pspa_id . ", " . $start_pos;
			//update the tables with the new position values
			$query4 = "UPDATE pi_stage_phase_activity SET position = '" . $end_pos . "'";
			$query4 .= " WHERE pspa_id = '" . $object2->pspa_id . "'";
			db_query($query4);
			$query5 = "UPDATE pi_stage_phase_activity SET position = '" . $start_pos . "'";
			$query5 .= " WHERE pspa_id = '" . $object3->pspa_id . "'";
			db_query($query5);
		}
	}
	//return to the relevant page -> last element in the path
	$return_path = arg(7) . "/" . arg(8) . "/" . arg(9) . "/" .  arg(10);
	drupal_goto($return_path);
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function delete_activity_link(){
	$activity_id = arg(3);
	$inquiry_id = arg(4);
	//deletes the activity from the inquiry
	//uses a pi function and this removes the activity from all tables
	delete_activity($activity_id);
	drupal_goto("piauthoring/activities/1/" . $inquiry_id);
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function uninclude_activity_link(){
	//unincludes the activity from the stage and phase
	$stage_id = arg(3);
	$phase_id = arg(4);
	$activity_id = arg(5);
	$inquiry_id = arg(6);
	//echo $stage_id . ", " . $phase_id . ", " . $activity_id . ", " . $inquiry_id;
	$query = "SELECT * FROM pi_stage_phase WHERE";
	$query .= " stage_id = '" . $stage_id . "'";
	$query .= " AND phase_id = '" . $phase_id . "'";
	$object = db_fetch_object(db_query($query));
	if($object){
		//echo 'here';
		$query2 = "DELETE FROM pi_stage_phase_activity WHERE";
		$query2 .= " psp_id = '" . $object->psp_id . "'";
		$query2 .= " AND activity_id = '" . $activity_id . "'";
		db_query($query2);
	}
	drupal_goto("piauthoring/activities/1/" . $inquiry_id);
}

//-------------------------------------------------------------------------------------------------------------------
//------------------------------------------------End : Table View of Inquiry----------------------------------------
//-------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------Forms for section 1 of the menu-------------------------------------
//-------------------------------------------------------------------------------------------------------------------

/**
 * This generates the page to allow the adding of phases and stages to an inquiry
 * @param uint $inquiry_id is a valid inquiry id.  Invalid inquiry_ids generate error message and
 *  redirect back to /piauthoring/.
 */
function pi_authoring_inquiry_phases($inquiry) {
	// Use this to apply module specific css
	$output .= "<div id='pi_authoring'>\n";
	
	//set the page title to be the inquiry name
	drupal_set_title("Editing " .  t($inquiry->title));
	$output .="<p class='inquiry_description'>" . t($inquiry->body) . "</p>\n";
	
	// Query for inquiry phases and list them if there are any, otherwise show 
	// placeholder text
	$phase_nids = pi_phase_load_nids($inquiry->nid);

	$output .="<h2>Phases of this inquiry</h2>\n";
	$header = array(
        t("Phase name"),
        t("Description")
    );

    $rows = array();
	if(!empty($phase_nids))
	{
		$output .= drupal_get_form('pi_authoring_order_phases_form', $phase_nids);
	}
	else
	{
		// Display a warning message to the user as there are no phases yet defined 
		drupal_set_message("No phases added so far in this inquiry, to add phases.", 'warning', FALSE);

		// Also display some boilerplate text about defining inquiries
		$output .="<div class='help'>\n";
		$output .= "<p>Each activity in an inquiry is allocated to a phase.  ";
		$output .= "A phase is a conceptual part of the inquiry model, for example, ";
		$output .= " <em>Find My Topic</em>, <em>Data Collection</em> and <em>Reflect</em> can all ";
		$output .= "be phases in an inquiry.</p>\n";
		$output .= "</div>\n"; // #help
		
	}
	//$output .= drupal_get_form('pi_authoring_inquiry_add_phase_form', $inquiry);
	//global $user;
	//$new_phase_node = array('uid' =>  $user->uid, 'name' => $user->name, 'type' => 'pi_phase');
	//$new_phase_form = drupal_retrieve_form('pi_phase_node_form', $new_phase_form_state, $new_phase_node);
    //drupal_prepare_form('pi_phase_node_form', $new_phase_form, $new_phase_form_state);
    //drupal_redirect_form($new_phase_form, url('nQuire/inquiry/' . $inquiry->nid));
	//$outout .= drupal_render_form('pi_phase_node_form', $new_phase_form);
	$output .= "</div>\n"; // #pi_authoring
	
	return $output;
}

/**
 * This function creates the form for draggable phase ordering on the edit inquiry page
 * @param $phases array of each of the phases in the inquiry created from db_fetch_object
 * @param db_result_object $inquiry the inquiry these phases belong to used to redirect user back to 
 *  inquiry phases page
 * @return array describing a form in drupal api format
 */
function pi_authoring_order_phases_form(&$form_state, $phases) {
	$form = array();
	$form['#theme'] = 'pi_authoring_order_phases_form';
	$form['#title'] = 'Inquiry Phases';
	
	$form['order_phases_phases'] = array(
		'#tree' => TRUE
	);
	
	$position = 0;
	foreach($phases as $phase_nid)
	{
		$phase = node_load($phase_nid);
		$form['order_phases_phases'][$phase->nid]['title'] =
		 	array(
		 		'#value' => $phase->title
		 	);
		$form['order_phases_phases'][$phase->nid]['body'] = 
			array(
				'#value' => $phase->body
			);
		$form['order_phases_phases'][$phase->nid]['weight'] = 
			array(
	            '#type'          => 'weight',
	            '#delta'         => count($phases),
	            '#default_value' => $position
	        );
        
        $position++;
	}
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
  	);
  	//firep($form);
	return $form;	
}

/**
 * This handles the data from the inquiry phase ordering form, it does not take the actual order
 * numbers provided by the form, but reorders them from 0..(n-1) so that the position data in the 
 * table is always consistant and not surceptable to wrrors introduced by bad post data.
 * @todo this currently displays a diagnostic message using firebug for drupal and redirects to inquiry phases 
 * @param array $form drupal api form data
 * @param array $form_state drupal api submitted form data
 */
function pi_authoring_order_phases_form_submit($form, &$form_state)
{
	firep($form_state['values']['order_phases_phases'], "Form data");
	$phase_order = array();
	
	//put all the phases in an array
	foreach($form_state['values']['order_phases_phases'] as $inquiry_pip_id => $new_order)
	{
		$phase_order[$inquiry_pip_id] = $new_order; 
	}
	//sort the elements by the new order
	asort($phase_order);
	//firep(var_dump($phase_order), "New order");
	
	// Now reorder from 0..n based on this order
	$count = 0;
	foreach($phase_order as $phase_nid => $order)
	{
		$phase_order[$phase_nid] = $count++;		
	}
	//firep(var_dump($phase_order), "New order");
	foreach($phase_order as $phase_nid => $weight)
	{
		if($phase = node_load($phase_nid))
		{
			$phase->weight = $weight;
			node_save($phase);
		}
		else
		{
			drupal_set_error(t("Can't find Phase $phase_nid"), 'error');
		}
	}
}


/**
 * This creates the layout for the order inquiries form, with draggable elelemts 
 * @param array $form description of a form based on drupal api
 * @return string html output for the form
 */
function theme_pi_authoring_order_inquiries_form($form) {
  drupal_add_tabledrag('pi-authoring-order-inquiries-sort', 'order', 'sibling', 'pi-authoring-order-inquiries-element');
  $header = array(array('data' => '', 'width' => '29'), 'Inquiry', 'Description', '', 'Position');
  
  $rows = array();
  foreach (element_children($form['order_inquiries_inquiries']) as $key)
  {
    // Add class to group weight fields for drag and drop.
    $form['order_inquiries_inquiries'][$key]['weight']['#attributes']['class'] = 'pi-authoring-order-inquiries-element';

    $row = array('');
    $row[] = drupal_render($form['order_inquiries_inquiries'][$key]['title']);
    $row[] = drupal_render($form['order_inquiries_inquiries'][$key]['body']);
    $row[] = drupal_render($form['order_inquiries_inquiries'][$key]['delete']);
    $row[] = drupal_render($form['order_inquiries_inquiries'][$key]['weight']);
    
    $rows[] = array('data' => $row, 'class' => 'draggable');
  }
  $output = theme('table', $header, $rows, array('id' => 'pi-authoring-order-inquiries-sort'));
  $output .= drupal_render($form);
  return $output;
}


/**
 * This creates the layout for the order phases form, with draggable elelemts 
 * @param array $form description of a form based on drupal api
 * @return string html output for the form
 */
function theme_pi_authoring_order_phases_form($form) {
  drupal_add_tabledrag('pi-authoring-order-phases-sort', 'order', 'sibling', 'pi-authoring-order-phases-element');
  $header = array(array('data' => '', 'width' => '29'), 'Phase', 'Description', 'Position');
  
  $rows = array();
  foreach (element_children($form['order_phases_phases']) as $key)
  {
    // Add class to group weight fields for drag and drop.
    $form['order_phases_phases'][$key]['weight']['#attributes']['class'] = 'pi-authoring-order-phases-element';

    $row = array('');
    $row[] = drupal_render($form['order_phases_phases'][$key]['title']);
    $row[] = drupal_render($form['order_phases_phases'][$key]['body']);
    $row[] = drupal_render($form['order_phases_phases'][$key]['weight']);
    
    $rows[] = array('data' => $row, 'class' => 'draggable');
  }
  $output = theme('table', $header, $rows, array('id' => 'pi-authoring-order-phases-sort'));
  $output .= drupal_render($form);
  return $output;
}

/**
 * This provides the form to include in the piauthoring/edit/% page to allow adding
 * phases to an inquiry.
 * 
 * @param unknown_type $form_state
 * @param db_result_object inquiry the db result for for the inquiry
 * @return array Form description according to the drupal forms api
 */
function pi_authoring_inquiry_add_phase_form(&$form_state, $inquiry){
	$form['add'] = array(
		'#type' => 'fieldset',
		'#title' => t('Add A New Phase'),
		'#tree' => TRUE,
	);
	
	$form['add']['inquiry_id'] = array(
		'#type' => 'hidden',
		'#value' => $inquiry->inquiry_id,
	);

	$form['add']['name'] = array(
		'#title' => t('Phase Name'),
		'#default_value' => '',
		'#type' => 'textfield',
		'#size' => '20',
	);

	$form['add']['description'] = array(
		'#title' => t('Description of this phase'),
		'#default_value' => '',
		'#type' => 'textarea',
		'#rows' => 3,
		'#resizable' => TRUE
	);

	$form['add']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add'),
	);

	return $form;
}






/**
 * This generates the page to allow the adding of phases and stages to an inquiry
 */
function pi_authoring_new_inquiry() {
	$content = "<p>For each new inquiry you need to give it a name and to define the phases and stages.";
	$content .= "  Each new inquiry needs to include a new set of phases and stages.</p>";
	$content .= "<p><strong>Phase:</strong>  A phase is a part of the inquiry model.  For example, ";
	$content .= " Find My Topic, Data Collection and Reflect.</p>";
	$content .= "<p><strong>Stage:</strong> A stage is a temporal element.  This could be a lesson or ";
	$content .= "homework or just a group of phases and activities that should be done before another set.";  
	$content .= "Location is another aspect of a stage as where the activities are to be carried out should"; 
	$content .= "influence the grouping of phases and activities in the stage.  For example, data collection";
	$content .= " activities in the Data Collection phase should take into account whether it is taking place ";
	$content .= "in the classroom, home or on a field trip.</p>";
	
	//warning about the remove links
	$content .= "<p><strong>The remove links below remove entries from pi_stage and pi_phase along with the";
	$content .= " corresponding entries in _actor, _stage_phase and _stage_phase_activity</strong></p>";
	
	//table of stages and phases
	$stages = db_query("SELECT * FROM pi_stage");
	$phases = db_query("SELECT * FROM pi_phase");
	//table of stages
	$content .= "<table>";
	$content .= "<tr><td><strong>Stages</strong></td><td></td></tr>";
	while($object = db_fetch_object($stages)){
		$content .= "<tr>";
		$content .= "<td width=100>" . $object->name . "</td>";
		$link = "piauthoring/newinquiry/1/stage/" . $object->stage_id;
		$content .= "<td>" . l("remove", $link) . "</td>";
		$content .= "</tr>";
	}
	$content .= "</table>";
	//table of phases
	$content .= "<table>";
	$content .= "<tr><td><strong>Phases</strong></td><td></td></tr>";
	while($object = db_fetch_object($phases)){
		$content .= "<tr>";
		$content .= "<td width=100>" . $object->name . "</td>";
		$link = "piauthoring/newinquiry/1/phase/" . $object->phase_id;
		$content .= "<td>" . l("remove", $link) . "</td>";
		$content .= "</tr>";
	}
	$content .= "</table>";
	
	return t($content);
}

/** 
 * Provides the confirmation page to delete an inquiry
 * @param $inquiry_id the id of the inquiry to be deleted
 * @return null
 */
function pi_authoring_delete_inquiry_confirm(&$form_state, $inquiry) {
	$return_data = array();
	
	$form['_inquiry'] = array (
		'#type' => 'value',
		'#value' => $inquiry,
	);
	$return_data = confirm_form($form,
	   	t('Are you sure you want to delete ' . t($inquiry->name) . '?'),
    	isset($_GET['destination']) ? $_GET['destination'] : 'piauthoring',
    	t('This action cannot be undone.'),
    	t('Delete'),
    	t('Cancel')
    );
    return $return_data;
}


/**
 * Handles the respose to the depete inquiry confirmation page, deletes whole inquiry and
 *  associated stages, phases and activities.
 *  @todo make this database function work
 *  @todo fatm database operation out to pi.module.
 * @param array $form druypal form definition as specifiod by drupal api
 * @param array $form_state drupal form response from http post
 * @return null
 */
function pi_authoring_delete_inquiry_confirm_submit($form, &$form_state)
{
	$form_values = $form_state['values'];
 
	if ($form_state['values']['confirm'])
	{
		$inquiry_id = $form_state['values']['_inquiry_id'];
 		pi_inquiry_delete($form_state['values'], $inquiry->inquiry_id);			
 
		drupal_set_message(t('Inquiry has been deleted.'));
  	}
	drupal_goto("/piauthoring");
}

/**
 * Redirects to the inquiry editing form page
 */
function pi_authoring_inquiry_edit($node)
{
	require_once(drupal_get_path('module', 'node') . '/node.pages.inc');    
	return node_page_edit($node);
}

/**
 * Deletes an inquiry with a given inquiry id and retuens the database result or error on doing so.
 * It will also delete the associuated content in the database: phases, stages and activities, etc.
 * If the inquiry id is not valid it will return false, like a database query error
 * @param uint $inquiry_id the id of the inquiry to be deleted.
 * @todo write this function and move it to pi.module
 */
function pi_authoring_inquiry_delete($inquiry_id)
{
	
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function pi_authoring_new_inquiry_remove(){
	$what = arg(3); //stage or phase - if you want to remove an inquiry then you should do something different
	$id = arg(4);
	
	if($what == 'stage'){
		//if stage then remove from pi_stage, pi_stage_actor, pi_stage_phase and pi_stage_phase_activity
		$query = "DELETE FROM pi_stage WHERE";
		$query .= " stage_id = '" . $id . "'";
		db_query($query);
		$query1 = "DELETE FROM pi_stage_actor WHERE";
		$query1 .= " stage_id = '" . $id . "'";
		db_query($query1);
		//pi_stage_phase -> get psp_id
		$query2 = "SELECT * FROM pi_stage_phase WHERE stage_id = '" . $id . "'";
		$results = db_query($query2);
		while($object = db_fetch_object($results)){
			$psp_id = $object->psp_id;
			$query3 = "DELETE FROM pi_stage_phase WHERE psp_id = '" . $psp_id . "'";
			db_query($query3);
			$query4 = "DELETE FROM pi_stage_phase_activity WHERE psp_id = '" . $psp_id . "'";
			db_query($query4);
		}
	}
	else if($what == 'phase'){
		//if phase then remove from pi_phase, pi_phase_actor, pi_stage_phase and pi_stage_phase_activity
		$query = "DELETE FROM pi_phase WHERE";
		$query .= " phase_id = '" . $id . "'";
		db_query($query);
		$query1 = "DELETE FROM pi_phase_actor WHERE";
		$query1 .= " phase_id = '" . $id . "'";
		db_query($query1);
		//pi_stage_phase -> get psp_id
		$query2 = "SELECT * FROM pi_stage_phase WHERE phase_id = '" . $id . "'";
		$results = db_query($query2);
		while($object = db_fetch_object($results)){
			$psp_id = $object->psp_id;
			$query3 = "DELETE FROM pi_stage_phase WHERE psp_id = '" . $psp_id . "'";
			db_query($query3);
			$query4 = "DELETE FROM pi_stage_phase_activity WHERE psp_id = '" . $psp_id . "'";
			db_query($query4);
		}
	}
	drupal_set_message(t("Done"));
	drupal_goto("piauthoring/newinquiry");
}

/**
 * pi_authoring_new_inquiry_inquiry: define new inquiry
 */
function pi_authoring_new_inquiry_inquiry(){
	$page_content = '<p>Create A New Inquiry</p>';
	$page_content .= drupal_get_form('pi_authoring_new_inquiry_inquiry_form', $node);
	return $page_content;
}

/**
 * This provides the form to enter the details of a new inquiry as part of the pi_authoring module
 * 
 * @param $form_state
 * @return array describing the form according to drupal forms api 
 */
function pi_authoring_new_inquiry_inquiry_form(&$node, $inquiry){

	$form = array(
		'#type' => 'fieldset',
		'#title' => t('Add A New Inquiry'),
	);

	$form['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Inquiry Name'),
		'#default_value' => $inquiry->name,
	);

	$form['description'] = array(
		'#title' => t('Inquiry Description'),
		'#default_value' => $inquiry->description,
		'#type' => 'textarea',
		'#rows' => 3,
	);

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add'),
	);
firep($form);
	return $form;
}

/**
 * This deals with the submitted pi_authoring_new_inquiry_inquiry_form and it redirects to
 * piauthoring/edit/% for the newly created id, or piauthoring/edit/ on errror.
 * 
 * @param array $form the form structure
 * @param array pointer &$form_state the posted values
 * @return null
 */
function pi_authoring_new_inquiry_inquiry_form_submit($form, &$form_state){
	$query = "INSERT INTO `pi_inquiry` SET ";
	$query .= "name='" . db_escape_string($form_state['values']['name']) . "' ";
	$query .= ", description='" . db_escape_string($form_state['values']['description']) . "'";
	$result = db_query($query);
	if($result)
	{
		$inquiry_id = db_last_insert_id('pi_inquiry', 'inquiry_id');
		$text = 'New Inquiry "' . t($form_state['values']['name']) . '" has been added';
		drupal_set_message($text, 'status');
	}
	else
	{
		$inquiry_id ="";
		drupal_set_message("There was problem creating this inquiry: " . t(db_error()), 'error');
	}
	// Redirect to phase adding page, setting "new flag" to suppress the 'no phases' warning message.
	drupal_goto("piauthoring/edit/" . $inquiry_id, array('new_flag'=>TRUE));
}

/**
 * pi_authoring_new_inquiry_phases: define new phase
 */
function pi_authoring_new_inquiry_phases(){
	$page_content = '<p>Create A New Phase For An Inquiry</p>';
	$page_content .= drupal_get_form('pi_authoring_new_inquiry_phases_form', $node);
	return $page_content;
}

/**
 * This provides the single page form to adding a phase to an inquiry
 * @todo this should be removed and merged into 'inquiry_edit' page
 * 
 * @param unknown_type $form_state
 * @return array desvribing the form according to the drupal forms api 
 */
function pi_authoring_new_inquiry_phases_form($form_state){
	$form['add'] = array(
		'#type' => 'fieldset',
		'#title' => t('Add A New Phase'),
		'#tree' => TRUE,
	);
	
	//get all inquiries to add to an option array
	$query = "SELECT * FROM pi_inquiry";
	$results = db_query($query);
	$options = array();
	while ($r = db_fetch_object($results)) {
		$options[$r->inquiry_id] = $r->inquiry_id . " : " . $r->name;
	}

	$form['add']['inquiry_id'] = array(
		'#type' => 'select',
		'#vlaue' => t('Phase Belongs to Which Inquiry?'),
		'#options' => $options,
	);

	$form['add']['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Phase Name'),
		'#default_value' => '',
	);

	$form['add']['description'] = array(
		'#type' => 'textfield',
		'#title' => t('Phase Description'),
		'#default_value' => '',
	);

	$form['add']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add'),
	);

	return $form;
}

/**
 * MISSING
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_authoring_new_inquiry_phases_form_submit($form, &$form_state){
	//insert phase in to pi_phase
	$query = "INSERT INTO pi_phase SET ";
	$query .= "name = '" . $form_state['values']['add']['name'] . "'";
	$query .= ", description = '" . $form_state['values']['add']['description'] . "'";
	db_query($query);

	//get the newly added phase id
	$query2 = "SELECT MAX(pi_phase.phase_id) FROM pi_phase";
	$phase_id = db_result(db_query($query2));

	//get the max position the last added phase
	$query3 = "SELECT MAX(pi_inquiry_phase.position) FROM pi_inquiry_phase";
	$position = db_result(db_query($query3));

	//add inquiry and phase to the pi_inquiry_phase table
	$query4 = "INSERT INTO pi_inquiry_phase SET ";
	$query4 .= "inquiry_id = '" . $form_state['values']['add']['inquiry_id'] . "'";
	$query4 .= ", phase_id = '" . $phase_id . "'";
	$query4 .= ", position = '" . ($position+1) . "'";
	db_query($query4);

	$text = "New Phase " . $form_state['values']['add']['name'];
	$text .= " Added: " . $form_state['values']['add']['description'];
	$text .= "<br> If you have finished adding Phases move on to 1.3. to define Stages";
	drupal_set_message(t($text));
	drupal_goto("piauthoring/newinquiry/phases");
}

/**
 * pi_authoring_new_inquiry_stages: define new stage
 */
function pi_authoring_new_inquiry_stages(){
	$page_content = '<p>Create A New Stage For An Inquiry</p>';
	$page_content .= drupal_get_form('pi_authoring_new_inquiry_stages_form', $node);
	return $page_content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_authoring_new_inquiry_stages_form($form_state){
	$form['add'] = array(
		'#type' => 'fieldset',
		'#title' => t('Add A New Stage'),
		'#tree' => TRUE,
	);
	
	//get all inquiries to add to an option array
	$query = "SELECT * FROM pi_inquiry";
	$results = db_query($query);
	$options = array();
	while ($r = db_fetch_object($results)) {
		$options[$r->inquiry_id] = $r->inquiry_id . " : " . $r->name;
	}

	$form['add']['inquiry_id'] = array(
		'#type' => 'select',
		'#title' => t('Stage Belongs to Which Inquiry?'),
		'#options' => $options,
	);

	$form['add']['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Stage Name'),
		'#default_value' => '',
	);

	$form['add']['description'] = array(
		'#type' => 'textfield',
		'#title' => t('Stage Description'),
		'#default_value' => '',
	);

	$form['add']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add'),
	);

	return $form;
}

/**
 * Insert phase in to pi_phase
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_authoring_new_inquiry_stages_form_submit($form, &$form_state){

	$query = "INSERT INTO pi_stage SET ";
	$query .= "name = '" . $form_state['values']['add']['name'] . "'";
	$query .= ", description = '" . $form_state['values']['add']['description'] . "'";
	db_query($query);

	//get the newly added phase id
	$query2 = "SELECT MAX(pi_stage.stage_id) FROM pi_stage";
	$stage_id = db_result(db_query($query2));

	//get the max position the last added phase
	$query3 = "SELECT MAX(pi_inquiry_stage.position) FROM pi_inquiry_stage";
	$position = db_result(db_query($query3));

	//add inquiry and phase to the pi_inquiry_phase table
	$query4 = "INSERT INTO pi_inquiry_stage SET ";
	$query4 .= "inquiry_id = '" . $form_state['values']['add']['inquiry_id'] . "'";
	$query4 .= ", stage_id = '" . $stage_id . "'";
	$query4 .= ", position = '" . ($position+1) . "'";
	db_query($query4);

	$text = "New Stage " . $form_state['values']['add']['name'];
	$text .= " Added: " . $form_state['values']['add']['description'];
	$text .= "<br> If you have finished adding Stage move on to Section 2. to define which Phases are in Stages";
	drupal_set_message(t($text));
	drupal_goto("piauthoring/newinquiry/stages");
}

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------End : Forms for section 1 of the menu-------------------------------
//-------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------Forms for section 2 of the menu-------------------------------------
//-------------------------------------------------------------------------------------------------------------------

/**
 * MISSING
 * 
 * @return string
 */
function pi_authoring_new_inquiry_first_organisation(){
	$content = '<p>First Organisation of Content:  You now need to specify which phases belong to which stages</p>';
	$query = "SELECT * FROM pi_inquiry";
	$inquiries = db_query($query);
	while($inquiry = db_fetch_object($inquiries)){
		//name of inquiry
		$content .= "<strong>" . $inquiry->name . "</strong><br>";
		$content .= "<strong>!!remove will delete entry for pi_stage_phase as well as from pi_stage_phase_activity!!</strong><br><br>";
		$query2 = "SELECT * FROM pi_inquiry_stage ";
		$query2 .= "LEFT JOIN pi_stage ON pi_stage.stage_id = pi_inquiry_stage.stage_id ";
		$query2 .= "WHERE inquiry_id = '" . $inquiry->inquiry_id . "'";
		$query2 .= "ORDER BY pi_inquiry_stage.stage_id";
		$stages = db_query($query2);
		while($stage = db_fetch_object($stages)){
			$content .= "<strong>" . $stage->stage_id . " : " . $stage->name . "</strong>";
			$query3 = "SELECT * FROM pi_stage_phase ";
			$query3 .= "LEFT JOIN pi_phase ON pi_phase.phase_id = pi_stage_phase.phase_id ";
			$query3 .= "WHERE stage_id = '" . $stage->stage_id ."'";
			$stagephases = db_query($query3);
			$content .= "<table>";
			while($stagephase = db_fetch_object($stagephases)){
				$content .= "<tr><td width=100>" . $stagephase->name . "</td>";
				$remove_link = 'piauthoring/firstorganisation/1/' . $stagephase->psp_id;
				$content .= "<td width=100>" . l("remove",$remove_link) . "</td></tr>";
			}
			$content .= "</table>";
		}
	}
	return $content;
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function pi_authoring_new_inquiry_first_organisation_remove(){
	$query = "DELETE FROM pi_stage_phase WHERE psp_id = '" . arg(3) . "'";
	db_query($query);
	//check to see if this stage phase has entries in pi_stage_phase_activity which need removing
	$query2 - "DELETE FROM pi_stage_phase_activity WHERE psp_id = '" . arg(3) . "'";
	db_query($query2);
	drupal_set_message(t("Done"));
	drupal_goto("piauthoring/firstorganisation");
}

/**
 * MISSING
 * 
 * @return unknown
 */
function pi_authoring_new_inquiry_first_organisation_stagesphases(){
	$page_content = '<p>Sort Phases into Stages</p>';
	$page_content .= drupal_get_form('pi_authoring_new_inquiry_first_organisation_stagesphases_form', $node);
	return $page_content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_authoring_new_inquiry_first_organisation_stagesphases_form($form_state){
	//declare $form
	$form = array();

	//ahah helper bit that gets all the inquiries and puts it into a dropdown box
	//selecting a inquiry from the list will set the varialbe $usage_default_value
	//which you can use in the rest of the form
	ahah_helper_register($form, $form_state);
	//default value
	if (!isset($form_state['storage']['inquiry_id']['which'])) {
		$usage_default_value = 'none';
	}
	else {
		$usage_default_value =  $form_state['storage']['inquiry_id']['which'];
	}
	//ahah form
	$query = "SELECT * FROM pi_inquiry";
	$inquiries = db_query($query);
	$options = array();
	$options['none'] = 'none';
	while($inquiry = db_fetch_object($inquiries)){
		$options[$inquiry->inquiry_id] = $inquiry->inquiry_id . " : " . $inquiry->name;
	}
	$form['inquiry_id'] = array(
	    '#type'   => 'fieldset',
	    '#title'  => t('Which Inquiry'),
	    '#prefix' => '<div id="inquiry-wrapper">', // This is our wrapper div.
	    '#suffix' => '</div>',
	    '#tree'   => TRUE, // Don't forget to set #tree!
	);
	$form['inquiry_id']['which'] = array(
	    '#type' => 'select',
	    '#title' => t('Inquiry ID'),
	    '#options' => $options,
	    '#default_value' => $usage_default_value,
	    '#ahah' => array(
	      'event'   => 'change',
	// This is the "magical path". Note that the parameter is an array of
	// the parents of the form item of the wrapper div!
	      'path'    => ahah_helper_path(array('inquiry_id')),
	      'wrapper' => 'inquiry-wrapper',
	),
	);
	$form['inquiry_id']['update_usage'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Update Inquiry'),
	// Note that we can simply use the generic submit callback provided by the
	// ahah_helper module here!
	// All it does, is set $form_state['rebuild'] = TRUE.
	    '#submit' => array('ahah_helper_generic_submit'),
	// We set the 'no-js' class, which means this submit button will be hidden
	// automatically by Drupal if JS is enabled.
	    '#attributes' => array('class' => 'no-js'),
	);
	
	if($usage_default_value != 'none'){
		//main form bits that use the inquiry_id in the above ahah helper bit
		$query2 = "SELECT * FROM pi_inquiry_stage ";
		$query2 .= "LEFT JOIN pi_stage ON pi_stage.stage_id = pi_inquiry_stage.stage_id ";
		$query2 .= "WHERE pi_inquiry_stage.inquiry_id = '" . $usage_default_value . "'";
		$query2 .= " ORDER BY pi_inquiry_stage.position";
		$all_stages = db_query($query2);
	
		$query3 = "SELECT * FROM pi_inquiry_phase ";
		$query3 .= "LEFT JOIN pi_phase ON pi_phase.phase_id = pi_inquiry_phase.phase_id ";
		$query3 .= "WHERE pi_inquiry_phase.inquiry_id = '"  . $usage_default_value . "'";
		$query3 .= " ORDER BY pi_inquiry_phase.position";
		$all_phases = db_query($query3);
		$options2 = array();
		while($phase = db_fetch_object($all_phases)){
			//echo $phase->name;
			$options2[$phase->phase_id] = $phase->phase_id . " : " . $phase->name;
		}
		$collapsed = FALSE;
		while($stage = db_fetch_object($all_stages)){
			$form['inquiry_id']['include'][$stage->stage_id] = array(
				'#type' => 'fieldset',
				'#title' => t($stage->name),
				'#tree' => TRUE,
				'#collapsible' => FALSE,
	    		//'#collapsed' => $collapsed,
			);
			$form['inquiry_id']['include'][$stage->stage_id]['what'] = array(
				'#type' => 'checkboxes',
				'#title' => t('Select Phase To Include In This Stage'),
				'#options' => $options2,
			);
			$collapsed = TRUE;
		}
	
		$form['inquiry_id']['include']['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Add'),
		);
	}

	return $form;
}

/**
 * MISSING
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_authoring_new_inquiry_first_organisation_stagesphases_form_submit($form, &$form_state){
	$query = "SELECT * FROM pi_stage ORDER BY stage_id";
	$all_stages = db_query($query);

	while($stage = db_fetch_object($all_stages)){
		$array = $form_state['values']['inquiry_id']['include'][$stage->stage_id]['what'];
		if($array != NULL & $array != 0){
			$content = array_filter($array);
			foreach($content as $c){
				$query2 = "INSERT INTO pi_stage_phase SET ";
				$query2 .= "stage_id = '" . $stage->stage_id . "' ";
				$query2 .= ", phase_id = '" . $c . "'";
				db_query($query2);
			}
		}
	}
	$text = "Added Phases to Stages.  If you have finished then move on to Section 3";
	drupal_set_message(t($text));
}

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------End: Forms for section 2 of the menu--------------------------------
//-------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------Forms for section 3 of the menu-------------------------------------
//-------------------------------------------------------------------------------------------------------------------

/**
 * MISSING
 * 
 * @return string
 */
function pi_authoring_new_inquiry_users_and_groups(){
	$content = "<p>Section 3 is all about your users and the groups they are in.  What you need to do is to";
	$content .= " create accounts for your users (i.e. students).  If you have authored an inquiry before then ";
	$content .= "you might already have users set up.  Check the table in 3.1 to view all of your users. </p>";
	$content .= "<p>You will also need to define in Organic Groups the groups you need for this inquiry.  Again ";
	$content .= "if you have authored an inquiry before some of these groups will be there.  Section 3.2. shows ";
	$content .= "you a list of groups.  (NB in section 3.1. groups user belong to are also shown)</p>";
	$content .= "<p>Groups are used in order to allocate content to a user.  For example, if a user is a member of ";
	$content .= "Year 9, Class A and Group A they will have different properties to  Year 9, Class A and Group B.";
	$content .= "  The difference might only be the members of the group and who can see the information submitted";
	$content .= " by that group but it could be something more such as having two different activities at a particular ";
	$content .= "phase and stage of the inquiry e.g. one group collected survey data whilst the other collects sensor data.</p>";
	return $content;
}

/**
 * MISSING
 * 
 * @return string
 */
function pi_authoring_new_inquiry_add_new_users(){
	$content = "<p>You now need to use the Drupal Admin ";
	$content .= "pages to create your users.  If you have done this before there is a list of current users below</p><br>";
	//current users
	$query = "SELECT * FROM users";
	$all_users = db_query($query);
	$page_content1_header .= "<strong>Current Users</strong>";
	$content .= "<table>";
	$content .= '<tr bgcolor="#EEEEEE"><td>User Name</td><td>OG Group Membership</td></tr>';
	while($user = db_fetch_object($all_users)){
		$content .= "<tr>";
		$content .= "<td>" . $user->name . "</td>";
		$content .= "<td>" . getusersgroups($user->uid) . "</td>";
		$content .= "</tr>";
	}
	$content .= "</table>";
	return $content;
}


/**
 * Helper function to get all og groups for a uid
 * 
 * @param unknown_type $uid
 * @return string
 */
function getusersgroups($uid){
	$query = "SELECT * FROM og_uid ";
	$query .= "LEFT JOIN og ON og.nid = og_uid.nid ";
	$query .= "WHERE og_uid.uid = '" . $uid . "'";
	$groups = db_query($query);
	$groups_list = "";
	while($group = db_fetch_object($groups)){
		$groups_list .= $group->og_description . ", ";
	}
	return $groups_list;
}

/**
 * MISSING
 * 
 * @return string
 */
function pi_authoring_new_inquiry_add_new_groups(){
	$content = "<p>You now need to use the Drupal Admin ";
	$content .= "pages to create you Organic Groups and to add your users to these Organic Group";
	$content .= " Below is a list of Organic Groups and members</p><br>";
	
	//current og groups
	$query = "SELECT * FROM og";
	$all_og = db_query($query);
	$content .= "<table>";
	$content .= '<tr bgcolor="#EEEEEE"><td>OG Group Name</td><td>Membership</td></tr>';
	while($groups = db_fetch_object($all_og)){
		$content .= "<tr>";
		$content .= "<td>" . $groups->og_description . "</td>";
		$content .= "<td>" . getgroupsusers($groups->nid) . "</td>";
		$content .= "</tr>";
	}
	$content .= "</table>";
	return $content;
}


/**
 * Helper function to get all the users who are member of an og group
 * 
 * @param unknown_type $og
 * @return string
 */
function getgroupsusers($og){
	$query = "SELECT * FROM og_uid ";
	$query .= "LEFT JOIN users ON users.uid = og_uid.uid ";
	$query .= "WHERE og_uid.nid = '" . $og . "'";
	$users = db_query($query);
	$user_list = "";
	while($user = db_fetch_object($users)){
		$user_list .= $user->name . ", ";
	}
	return $user_list;
}

/**
 * MISSING
 * 
 * @return unknown
 */
function pi_authoring_new_inquiry_define_group_type(){
	$page_content = "<p>You now need to define what types the groups are (group, class or multiclass)</p><br>";
	$page_content .= drupal_get_form('pi_authoring_new_inquiry_define_group_type_form', $node);
	return $page_content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_authoring_new_inquiry_define_group_type_form($form_state){
	$options = array('group'=>'group','class'=>'class','mulitclass'=>'multiclass',);

	$query2 = "SELECT * FROM og";
	$all_og = db_query($query2);
	while($group = db_fetch_object($all_og)){
		$form[$group->nid] = array(
			'#type' => 'fieldset',
			'#title' => t($group->og_description),
			'#tree' => TRUE,
		);
		$form[$group->nid]['what'] = array(
			'#type' => 'select',
			'#title' => t('Select What This Group Type Is'),
			'#options' => $options,
		);
	}
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add'),
	);

	return $form;
}

/**
 * MISSING
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_authoring_new_inquiry_define_group_type_form_submit($form, &$form_state){
	$query1 = "SELECT * FROM og";
	$all_og = db_query($query1);
	while($group = db_fetch_object($all_og)){
		$query2 = "INSERT INTO pi_group_type SET ";
		$query2 .= "gid = '" . $group->nid . "' ";
		$query2 .= ", type = '" . $form_state['values'][$group->nid]['what'] . "'";
		db_query($query2);
	}
	$text = "Defined Groups.  If you have finished then move on to Stage 4";
	drupal_set_message(t($text));
}



//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------End: Forms for section 3 of the menu--------------------------------
//-------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------Forms for section 4 of the menu-------------------------------------
//-------------------------------------------------------------------------------------------------------------------

/**
 * MISSING
 * 
 * @return string
 */
function pi_authoring_new_inquiry_define_inquiry_phases_stages(){
	$content = "<p>Section 4 is all about who will be able to see each phase and stage of the inquiry.  In most cases";
	$content .= "each of the phases and stages will be visible to the whole class (NB different groups seeing different";
	$content .= " activities is specified later on when you author the activities).  However, it might be the case that";
	$content .= " you only want the top set to see particular stages or a particular group of students to see a more ";
	$content .= "complex phase of the inquiry cycle.";
	return $content;
}

/**
 * MISSING
 * 
 * @return unknown
 */
function pi_authoring_new_inquiry_define_inquiry_phases_stages_actors(){
	$content = "<p>You now need to define the actors for the inquiry, phases and stages<br>";
	$content .= "(NB the group for the inquiry also defines the defaul pi_grouping)</p><br>";
	$content .= drupal_get_form('pi_authoring_new_inquiry_define_inquiry_phases_stages_actors_form', $node);
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_authoring_new_inquiry_define_inquiry_phases_stages_actors_form($form_state){
	$form = array();
	//ahah_helper stuff to filter the phases and stages based on the inquiry_id
	ahah_helper_register($form, $form_state);
	//default value
	if (!isset($form_state['storage']['inquiry_id']['which'])) {
		$usage_default_value = 'none';
	}
	else {
		$usage_default_value =  $form_state['storage']['inquiry_id']['which'];
	}
	//ahah form
	$query = "SELECT * FROM pi_inquiry";
	$inquiries = db_query($query);
	$options = array();
	$options['none'] = 'none';
	while($inquiry = db_fetch_object($inquiries)){
		$options[$inquiry->inquiry_id] = $inquiry->inquiry_id . " : " . $inquiry->name;
	}
	$form['inquiry_id'] = array(
	    '#type'   => 'fieldset',
	    '#title'  => t('Which Inquiry'),
	    '#prefix' => '<div id="inquiry-wrapper">', // This is our wrapper div.
	    '#suffix' => '</div>',
	    '#tree'   => TRUE, // Don't forget to set #tree!
	);
	$form['inquiry_id']['which'] = array(
	    '#type' => 'select',
	    '#title' => t('Inquiry ID'),
	    '#options' => $options,
	    '#default_value' => $usage_default_value,
	    '#ahah' => array(
	      'event'   => 'change',
	// This is the "magical path". Note that the parameter is an array of
	// the parents of the form item of the wrapper div!
	      'path'    => ahah_helper_path(array('inquiry_id')),
	      'wrapper' => 'inquiry-wrapper',
	),
	);
	$form['inquiry_id']['update_usage'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Update Inquiry'),
	// Note that we can simply use the generic submit callback provided by the
	// ahah_helper module here!
	// All it does, is set $form_state['rebuild'] = TRUE.
	    '#submit' => array('ahah_helper_generic_submit'),
	// We set the 'no-js' class, which means this submit button will be hidden
	// automatically by Drupal if JS is enabled.
	    '#attributes' => array('class' => 'no-js'),
	);

	//get all groups as an options
	$group_options = array();
	$query2 = "SELECT * FROM og";
	$all_og = db_query($query2);
	while($group = db_fetch_object($all_og)){
		$group_options[$group->nid] = $group->nid . " : " . $group->og_description;
	}

	//so now based on the selection above we can display the correct stages and phases
	if($usage_default_value != 'none'){
		//actor for inquiry
		$form['inquiry_id']['inquiry']['group'] = array(
			'#type' => 'select',
			'#title' => t('Select Actor For This Inquiry: '),
			'#options' => $group_options,
		);

		//stages and phases
		$query2 = "SELECT * ";
		$query2 .= "FROM pi_inquiry_phase ";
		$query2 .= "LEFT JOIN pi_phase ON pi_phase.phase_id = pi_inquiry_phase.phase_id ";
		$query2 .= "WHERE pi_inquiry_phase.inquiry_id = '" . $usage_default_value . "' ";
		$query2 .= "ORDER BY pi_inquiry_phase.position";
		$phases = db_query($query2);

		$form['inquiry_id']['phase'] = array(
			'#type' => 'fieldset',
			'#title' => t('Select Actors for Each Phase Listed Below'),
			'#collapsible' => TRUE,
			'#tree' => TRUE,
		);
		while($phase = db_fetch_object($phases)){
			$form['inquiry_id']['phase'][$phase->phase_id] = array(
				'#type' => 'select',
				'#title' => t('Select Actor For This Phase: ' . $phase->name),
				'#options' => $group_options,
			);
		}

		$query3 = "SELECT * ";
		$query3 .= "FROM pi_inquiry_stage ";
		$query3 .= "LEFT JOIN pi_stage ON pi_stage.stage_id = pi_inquiry_stage.stage_id ";
		$query3 .= "WHERE pi_inquiry_stage.inquiry_id = '" . $usage_default_value . "' ";
		$query3 .= "ORDER BY pi_inquiry_stage.position";
		$stages = db_query($query3);

		$form['inquiry_id']['stage'] = array(
			'#type' => 'fieldset',
			'#title' => t('Select Actors for Each Stage Listed Below'),
			'#collapsible' => TRUE,
			'#tree' => TRUE,
		);
		while($stage = db_fetch_object($stages)){
			$form['inquiry_id']['stage'][$stage->stage_id] = array(
				'#type' => 'select',
				'#title' => t('Select Actor For This Stage: ' . $stage->name),
				'#options' => $group_options,
			);
		}
	}

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add'),
	);

	return $form;
}

/**
 * MISSING
 * 
 * @param array $form Drupal forms API form definition
 * @param array $form_state Drupal forms API form post data
 * @return unknown_type
 */
function pi_authoring_new_inquiry_define_inquiry_phases_stages_actors_form_submit($form, &$form_state){
	$inquiry_id = $form_state['values']['inquiry_id']['which'];
	$inquiry_id_group = $form_state['values']['inquiry_id']['inquiry']['group'];

	//set inquiry actor and default grouping
	$query = "INSERT INTO pi_inquiry_actor SET ";
	$query .= "inquiry_id = %d, gid = %d";
	db_query($query, $inquiry_id, $inquiry_id_group);

	$query2 = "INSERT INTO pi_grouping SET ";
	$query2 .= "name = 'default', description = 'default'";
	db_query($query2);

	//new grouping id
	$query3 = "SELECT MAX(pi_grouping.grouping_id) FROM pi_grouping";
	$group_id = db_result(db_query($query3));

	$query4 = "INSERT INTO pi_group_hierarchy SET gid = %d";
	db_query($query4, $inquiry_id_group);

	$query5 = "INSERT INTO pi_grouping_group SET ";
	$query5 .= "grouping_id = '" . $group_id ."'";
	$query5 .= ", gid = '" . $inquiry_id_group . "'";
	db_query($query5);

	$query6 = "INSERT INTO pi_inquiry_grouping SET ";
	$query6 .= "inquiry_id = '" . $inquiry_id . "'";
	$query6 .= ", grouping_id = '" . $group_id . "'";
	db_query($query6);

	//now for the stages and phases

	//stages
	$stage_nids = pi_stage_load_nids($inquiry_id);
	foreach($stage_nids as $stage_nid)
	{
		$selected_group = $form_state['values']['inquiry_id']['stage'][$stage_nid];
		$query8 = "INSERT INTO pi_stage_actor SET ";
		$query8 .= "inquiry_id = %d, stage_id = %d, gid = %d";
		db_query($query8, $inquiry_id, $stage_nid, $selected_group);
	}

	//phases
	$phase_nids = pi_phase_load_nids($inquiry_id);
	foreach($phase_nids as $phase_nid)
	{
		$selected_group = $form_state['values']['inquiry_id']['phase'][$phase_nid];
		$query10 = "INSERT INTO pi_phase_actor SET ";
		$query10 .= "inquiry_id = %d, phase_id = %d, gid = %d";
		db_query($query10, $inquiry_id, $phase_nid, $selected_group);
	}

	$text = "Done";
	drupal_set_message(t($text));
}

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------End: Forms for section 4 of the menu--------------------------------
//-------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------Forms for section 5 of the menu-------------------------------------
//-------------------------------------------------------------------------------------------------------------------

	/*
	 * Authoring of activities is going to be a 2 stage process.
	 *
	 * Stage 1 is to use activity_placeholder.module to place dummy content into the system so that in the authoring
	 * interface you are able to quickly generate the inquiry.
	 *
	 * Stage 2 is to replace these dummy activities with the real activities.  The user will have to install the
	 * relevent modules and update the activitiy place holder with the correct information
	 */

/**
 * Theis page is the starting point for adding activities to inquiries
 * @return string HTML data for page
 */
function pi_authoring_new_activities(){
	$content = "<p>Authoring of activities is a 2 part process.</p>";
	$content .= "<p><strong>Part 1</strong> is to use section 5.1 to place dummy content into the ";
	$content .= "system so that you are able to quickly generate activities in the inquiry.</p>";
	$content .= "<p><strong>Part 2</strong> is to replace these dummy activities with the real activities.  First you";
	$content .= " will have to install the relevent modules (link in 5.2) and then use 5.3 to update the activities with the correct information</p>";
	
	$content .= "<p>Below is a list of inquiries to choose from use this page to filter what you see in sections 5.1";
	$content .= " and 5.3 (default is to display all inquiries in these pages unless set by the links below</p><br>";
	
	//table of inquiries to choose from; two links one to placeholder and the other to real
	//if there are activities in placeholder then the text changes
	$inquiry_nids = pi_inquiry_load_nids();
	
	$content .= "<table>";
	$content .= '<tr bgcolor="#EEEEEE"><td>Inquiry Name</td><td>Place Holder</td><td>Real</td></tr>';
	foreach($inquiry_nids as $inquiry_nid) 
	{
		$inquiry = node_load($inquiry_nid);
		$content .= "<tr>";
		$content .= "<td>" . $inquiry->title . "</td>";
		$content .= "<td>" . l("add", "piauthoring/activities/1/" . $inquiry->nid) . "</td>";
		$content .= "<td>" . l("update", "piauthoring/activities/3/" . $inquiry->nid) . "</td>";
		$content .= "</tr>";
	}
	$content .= "</table>";
	return $content;
}


/**
 * Returns the content for authoring section 5.1, presenting the table of the inquiry and
 * links to add new placeholder activities.  If an inquiry is not passed as a parameter, a list of all will be shown.
 * @param $inquiry Inquiry node to show table for: this is loaded via the url menu auto load callback $node
 * @return string HTML content
 */
function pi_authoring_new_activities_placeholder($inquiry=NULL){
	$content = '';
	if(isset($inquiry))
	{
		$content .= draw_table($inquiry, 'add');
	}
	else
	{
		$inquiry_nids = pi_inquiry_load_nids();
		foreach($inquiry_nids as $inquiry_nid)
		{
			$content .= "<div>\n";
			$inquiry = node_load($inquiry_nid);
			$content .= draw_table($inquiry, 'add');
			$content .= "</div>\n\n";
		}
	}
	return $content;
}

/**
 * This renders the instructions for authoring section 5.2 
 * @return string  HTML content
 */
function pi_authoring_new_activities_modules(){
	return "<p> Now use the Admin pages to install the modules you need for the activies you have added placeholders for</p>";
}

/**
 * Returns the content for authoring section 5.3, presenting the table of the inquiry and
 * links to edit placeholder activities.  If an inquiry is not passed as a parameter, a list of all will be shown.
 * @param $inquiry Inquiry node to show table for: this is loaded via the url menu auto load callback $node
 * @return string HTML content
 */
function pi_authoring_new_activities_real($inquiry=NULL){
	$content = '';
	if(isset($inquiry))
		{
		$content .= draw_table($inquiry, 'edit');
	}
	else{
		$inquiry_nids = pi_inquiry_load_nids();
		foreach($inquiry_nids as $inquiry_nid)
		{
			$content .= "<div>\n";
			$inquiry = node_load($inquiry_nid);
			$content .= draw_table($inquiry, 'edit');
			$content .= "</div>\n\n";
		}
	}
	return $content;
}

/**
 * Constructs the page to show thew new placeholder activity form
 * 
 * @return string HTML content
 */
function pi_authoring_new_activities_placeholder_add($inquiry){
	$content = "<p>Add a new activity to this phase and stage.<br>";
	$content .= "(NB this is a place holder activity so you can quickly define";
	$content .= " the types of activities you want in your inquiry.  Simply put";
	$content .= "the name of the activity in, something meanlingful and you will";
	$content .= "go back later and edit it to the real activity)</p><br>";
	$content .= drupal_get_form('pi_authoring_new_activities_placeholder_add_form', $inquiry);
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_authoring_new_activities_placeholder_add_form($form_state, $inquiry){
	$form['add'] = array(
		'#type' => 'fieldset',
		'#title' => t('Add A New Stage'),
		'#tree' => TRUE,
	);

	$form['add']['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Activity Name'),
		'#default_value' => '',
	);

	$form['add']['description'] = array(
		'#type' => 'textfield',
		'#title' => t('Temporary Description'),
		'#default_value' => '',
	);

	//get all inquiries to add to an option array
	$group_options = array();
	$query2 = "SELECT * FROM og";
	$all_og = db_query($query2);
	while($group = db_fetch_object($all_og)){
		$group_options[$group->nid] = $group->nid . " : " . $group->og_description;
	}

	$form['add']['group'] = array(
		'#type' => 'select',
		'#title' => t('For Which Group?'),
		'#options' => $group_options,
	);

	$options = array('individual'=>'individual',
						'group'=>'group',
						'class'=>'class',
						'multiclass'=>'multiclass');

	$form['add']['audience'] = array(
		'#type' => 'select',
		'#title' => t('Audience'),
		'#options' => $options,
	);

	$form['add']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add'),
	);

	return $form;
}

/**
 * MISSING
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_authoring_new_activities_placeholder_add_form_submit($form, &$form_state){
	$inquiry_id = arg(3);
	$psp_id = arg(4);

	//echo $inquiry_id . " + " . $psp_id;

	//insert new activity (temp) //
	$query = "INSERT INTO pi_activity SET ";
	$query .= "name = '" . $form_state['values']['add']['name'] . "'";
	$query .= ", description = '" . $form_state['values']['add']['description'] . "'";
	$query .= ", activity_type = 'pi_authoring_activity'";
	$query .= ", node_type = 'pi_authoring_activity'";
	$query .= ", parameters = '" . $form_state['values']['add']['description'] . "'";
	$query .= ", destination = 'phase'";
	$query .= ", audience = '" . $form_state['values']['add']['audience'] . "'";
	db_query($query);

	//get new activity_id
	$query2 = "SELECT MAX(pi_activity.activity_id) FROM pi_activity";
	$activity_id = db_result(db_query($query2));

	//stage_phase_activity
	$query3 = "SELECT MAX(pi_stage_phase_activity.position) FROM pi_stage_phase_activity";
	$position = db_result(db_query($query3));
	$new_position = $position + 1;

	$query4 = "INSERT INTO pi_stage_phase_activity SET";
	$query4 .= " psp_id = '" . $psp_id . "'";
	$query4 .= ", activity_id = '" . $activity_id . "'";
	$query4 .= ", position = '" . $new_position . "'";
	db_query($query4);

	//activity_actor
	$query5 = "INSERT INTO pi_activity_actor SET";
	$query5 .= " inquiry_id = '" . $inquiry_id . "'";
	$query5 .= ", activity_id = '" . $activity_id . "'";
	$query5 .= ", gid = '" . $form_state['values']['add']['group'] . "'";
	db_query($query5);

	//activity_status //
	$query6 = "INSERT INTO pi_activity_status SET";
	$query6 .= " inquiry_id = '" . $inquiry_id . "'";
	$query6 .= ", activity_id = '" . $activity_id . "'";
	$query6 .= ", gid = '" . $form_state['values']['add']['group'] . "'";
	$query6 .= ", node_function = 'add'";
	$query6 .= ", visible_status = 'start'";
	db_query($query6);

	//done
	$text = "Added new placeholder activity";
	drupal_set_message(t($text));
	drupal_goto("piauthoring/activities/1/" . $inquiry_id);
}

/**
 * MISSING
 * 
 * @return unknown
 */
function pi_authoring_new_activities_real_edit(){
	$content = "<p>Edit an activity:.<br>";
	$content .= "</p><br>";
	$content .= drupal_get_form('pi_authoring_new_activities_real_edit_form', $node);
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_authoring_new_activities_real_edit_form($form_state){
	$activity_id = arg(3);
	
	/* construct form to edit the details of an activity
	 * inc. pi_activity, pi_activity_status, pi_activity_actor & pi_stage_phase_activity tables
	 */
	$form['edit'] = array(
		'#type' => 'fieldset',
		'#title' => t('Edit Activity'),
		'#tree' => TRUE,
	);
	
	//pi_activity table
	$query = "SELECT * FROM pi_activity WHERE activity_id = '" . $activity_id . "'";
	$result = db_fetch_object(db_query($query));

	$form['edit']['piactivity']['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Activity Name'),
		'#default_value' => $result->name,
	);
	
	$form['edit']['piactivity']['description'] = array(
		'#type' => 'textfield',
		'#title' => t('Activity Description'),
		'#default_value' => $result->description,
	);
	
	//activity and node type query
	$nt_query = "SELECT * FROM node_type";
	$node_type_query = db_query($nt_query);
	$node_type_options = array();
	while($nt = db_fetch_object($node_type_query)){
		$node_type_options[$nt->type] = $nt->name . ' (' . $nt->type . ')';
	}
	
	$form['edit']['piactivity']['activity_type'] = array(
		'#type' => 'select',
		'#title' => t('Activity Type'),
		'#options' => $node_type_options,
		'#default_value' => $result->activity_type,
	);
	
	$form['edit']['piactivity']['node_type'] = array(
		'#type' => 'select',
		'#title' => t('Node Type'),
		'#options' => $node_type_options,
		'#default_value' => $result->node_type,
	);
	
	$form['edit']['piactivity']['parameters'] = array(
		'#type' => 'textfield',
		'#title' => t('Parameters'),
		'#default_value' => $result->parameters,
	);
	
	$destination_option = array('phase'=>'phase','self'=>'self',);
	
	$form['edit']['piactivity']['destination'] = array(
		'#type' => 'select',
		'#title' => t('Destination After Completing the Activity (self or phase)'),
		'#options' => $destination_option,
		'#default_value' => $result->destination,
	);
	
	$group_options = array('individual'=>'individual',
						'group'=>'group',
						'class'=>'class',
						'multiclass'=>'multiclass');
	
	$form['edit']['piactivity']['audience'] = array(
		'#type' => 'select',
		'#title' => t('Activity Audience'),
		'#options' => $group_options,
		'#default_value' => $result->audience,
	);
	
	//pi_activity_status table
	$query2 = "SELECT * FROM pi_activity_status WHERE activity_id = '" . $activity_id . "'";
	$result2 = db_fetch_object(db_query($query2));
	
	$og_query = "SELECT * FROM og";
	$og_groups_query = db_query($og_query);
	$og_groups_options = array();
	while($og = db_fetch_object($og_groups_query)){
		$og_groups_options[$og->nid] = $og->og_description . ' (' . $og->nid . ')';
	}

	$form['edit']['piactivitystatus']['gid'] = array(
		'#type' => 'select',
		'#title' => t('Activity Group'),
		'#options' => $og_groups_options,
		'#default_value' => $result2->gid,
	);
	
	$node_function_options = array('add'=>'add','edit'=>'edit','view'=>'view',);
	
	$form['edit']['piactivitystatus']['node_function'] = array(
		'#type' => 'select',
		'#title' => t('Node Function'),
		'#options' => $node_function_options,
		'#default_value' => $result2->node_function,
	);
	
	$visible_status_options = array('start'=>'start','in_progress'=>'in_progress',
									'view'=>'view', 'unavailable'=>'unavailable');
	
	$form['edit']['piactivitystatus']['visible_status'] = array(
		'#type' => 'select',
		'#title' => t('Visible Status'),
		'#options' => $visible_status_options,
		'#default_value' => $result2->visible_status,
	);
	
	//nid options
	$query3 = "SELECT * FROM node";
	$result3 = db_query($query3);
	$node_options = array();
	//first is none -> is 0 as no nid is 0 they always start at 1
	$node_options[] = array(0=>'none');
	while($object3 = db_fetch_object($result3)){
		$node_options[$object3->nid] = $object3->title . "(" . $object3->type . ")";
	}
	
	$query4 = "SELECT * FROM pi_activity_node WHERE activity_id = '" . $activity_id . "'";
	$object4 = db_fetch_object(db_query($query4));
	
	$form['edit']['piactivitystatus']['existing_nid'] = array(
		'#type' => 'select',
		'#title' => t('Does The Activity Refer To An Existing Node? I.e. if you have selected view in view_type then to which node do you want to view?'),
		'#options' => $node_options,
		'#default_value' => $object4->nid,
	);
	
	$form['add']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Update'),
	);
	
	return $form;
}

/**
 * MISSING
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_authoring_new_activities_real_edit_form_submit($form, &$form_state){
	$activity_id = arg(3);
	$inquiry_id = arg(4);
	
	//update pi_activity table
	$query = "UPDATE pi_activity ";
	$query .= "SET name = '" . $form_state['values']['edit']['piactivity']['name'] . "'";
	$query .= ", description = '" . $form_state['values']['edit']['piactivity']['description'] . "'";
	$query .= ", activity_type = '" . $form_state['values']['edit']['piactivity']['activity_type'] . "'";
	$query .= ", node_type = '" . $form_state['values']['edit']['piactivity']['node_type'] . "'";
	$query .= ", parameters = '" . $form_state['values']['edit']['piactivity']['parameters'] . "'";
	$query .= ", destination = '" . $form_state['values']['edit']['piactivity']['destination'] . "'";
	$query .= ", audience = '" . $form_state['values']['edit']['piactivity']['audience'] . "'";
	$query .= " WHERE activity_id = '" . $activity_id ."'";
	db_query($query);
	
	//update pi_activity_status table
	$query2 = "UPDATE pi_activity_status ";
	$query2 .= "SET gid = '" . $form_state['values']['edit']['piactivitystatus']['gid'] . "'";
	$query2 .= ", node_function = '" . $form_state['values']['edit']['piactivitystatus']['node_function'] . "'";
	$query2 .= ", visible_status = '" . $form_state['values']['edit']['piactivitystatus']['visible_status'] . "'";
	$query2 .= " WHERE activity_id = '" . $activity_id . "'";
	$query2 .= " AND inquiry_id = '" . $inquiry_id ."'";
	db_query($query2);
	
	//update pi_activity_actor table - gid should be the same as in pi_activity_status (??)
	$query3 = "UPDATE pi_activity_actor SET gid = '" . $form_state['values']['edit']['piactivitystatus']['gid'] . "'";
	$query3 .= " WHERE activity_id ='" . $activity_id ."'";
	db_query($query3);
	
	//are we adding a nid reference?
	$existing_nid = $form_state['values']['edit']['piactivitystatus']['existing_nid'];
	if($existing_nid != 'none'){
		//insert or update?
		$query4 = "SELECT * FROM pi_activity_node WHERE";
		$query4 .= " activity_id = '" . $activity_id . "'";
		$query4 .= " AND inquiry_id = '" . $inquiry_id ."'";
		$object4 = db_fetch_object(db_query($query4));
		if($object4){
			//update
			//echo 'update';
			$query5 = "UPDATE pi_activity_node SET";
			$query5 .= " nid = '" . $existing_nid . "'";
			$query5 .= " WHERE pan_id = '" . $object4->pan_id . "'";
			db_query($query5);
 		}
		else{
			//insert
			//echo 'insert';
			$query6 = "INSERT INTO pi_activity_node SET";
			$query6 .= " inquiry_id = '" . $inquiry_id . "'";
			$query6 .= ", activity_id = '" . $activity_id . "'";
			$query6 .= ", nid = '" . $existing_nid . "'";
			db_query($query6);
		}
	}
	
	//done
	$text = "Updated activity";
	drupal_set_message(t($text));
	drupal_goto("piauthoring/activities/3/" . $inquiry_id);
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function pi_authoring_new_activities_include(){
	$phase = arg(5);
	$stage = arg(6);
	$activity = arg(7);
	
	//find psp_id
	$query = "SELECT * FROM pi_stage_phase WHERE ";
	$query .= "phase_id = '" . $phase . "'";
	$query .= " AND stage_id = '" . $stage . "'";
	$result = db_fetch_object(db_query($query));
	
	//include activity in this stage and phase
	$query2 = "INSERT INTO pi_stage_phase_activity SET ";
	$query2 .= "psp_id = '" . $result->psp_id . "'";
	$query2 .= ", activity_id = '" . $activity . "'";
	//position
	db_query($query2);
	
	//done
	$text = "Included activity";
	drupal_set_message(t($text));
	$link = "piauthoring/activities/" . arg(3) . "/" . arg(4);
	drupal_goto($link);
}


//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------End: Forms for section 5 of the menu--------------------------------
//-------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------Forms for section 6 of the menu-------------------------------------
//-------------------------------------------------------------------------------------------------------------------

/**
 * MISSING
 * 
 * @return string
 */
function pi_authoring_workflow(){
	$content = "<p>You have now authored the majority of the inquiry! Now you need to author the workflow rules ";
	$content .= "that will make the activity guide dynamic.";
	$content .= "</p><br>";
	return $content;
}

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------End: Forms for section 6 of the menu--------------------------------
//-------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------Forms for section 7 of the menu-------------------------------------
//-------------------------------------------------------------------------------------------------------------------

/**
 * MISSING
 * 
 * @return string
 */
function pi_authoring_advanced_groups(){
	$content = "<p>In this section you have the oportunity to author more advanced group configurations ";
	$content .= "for example, authoring jigsaw group configuration.</p>";
	$content .= "<p>To do this you need to,</p> ";
	$content .= "<p><strong>1</strong> create appropriate groups using Organic Group (info about groups in Section 7.1)</p> ";
	$content .= "<p><strong>2</strong> use section 7.2 to configure group allocation to a particular stage, ";
	$content .= "phase or activity.  Mostly this will be activities</p>";
	return $content;
}

/**
 * MISSING
 * 
 * @return string
 */
function pi_authoring_advanced_groups_og(){
	$content = "<p>In this section you will create a more advanced grouping of students into groups which";
	$content .= " will allow you to author such things as jigsaw activities.  Simply, you define a set of";
	$content .= " organic groups which you then add to a grouping.  This grouping is then used to allocate";
	$content .= " students to an activity so for example, you could have one set of students doing one activity";
	$content .= " and another set of students another activity and half way through a lesson they swap.</p>";
	$content .= "<p>Below is a list of current Organic Group and a List of current Groupings.</p>";
	$content .= "<p>If the Organic Groups you need are not listed below then you need to do this now.</p>";
	
	//current og groups
	$query = "SELECT * FROM og";
	$all_og = db_query($query);
	$content .= "<table>";
	$content .= '<tr bgcolor="#EEEEEE"><td>OG Group Name</td><td>Membership</td></tr>';
	while($groups = db_fetch_object($all_og)){
		$content .= "<tr>";
		$content .= "<td>" . $groups->og_description . "</td>";
		$content .= "<td>" . getgroupsusers($groups->nid) . "</td>";
		$content .= "</tr>";
	}
	$content .= "</table>";
	
	$content .= '<br>';
	
	//current groupings
	$query2 = "SELECT * FROM pi_grouping ";
	$query2 .= "LEFT JOIN pi_grouping_group ON pi_grouping_group.grouping_id = pi_grouping.grouping_id";
	$all_groupings = db_query($query2);
	$content .= "<table>";
	$content .= '<tr bgcolor="#EEEEEE"><td>Grouping Name</td><td>Description</td><td>OG Group</td></tr>';
	while($grouping = db_fetch_object($all_groupings)){
		$content .= "<tr>";
		$content .= "<td>" . $grouping->name . "</td>";
		$content .= "<td>" . $grouping->description . "</td>";
		$content .= "<td>" . get_og_group_name($grouping->gid) . "</td>";
		$content .= "</tr>";
	}
	$content .= "</table>";
	
	return $content;
}

/**
 * Helper function to get all the users who are member of an og group
 * 
 * @param unknown_type $og
 * @return unknown
 */
function get_og_group_name($og){
	$query = "SELECT * FROM og ";
	$query .= "WHERE og.nid = '" . $og . "'";
	$group = db_fetch_object(db_query($query));
	return $group->og_description;
}

/**
 * MISSING
 * 
 * @return unknown
 */
function pi_authoring_advanced_groups_create(){
	$content = "<p>You now need to define the Groupings you wish to use for a particular inquiry,";
	$content .= "stage, phase and activity.</p><br>";
	$content .= drupal_get_form('pi_authoring_advanced_groups_create_form', $node);
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_authoring_advanced_groups_create_form($form_state){
	$form = array();
	//register ahah helper
	ahah_helper_register($form, $form_state);
	
	$form['add'] = array(
		'#type' => 'fieldset',
		'#title' => t('Create New Grouping'),
		'#tree' => TRUE,
	);
	
	//ahah helper stuff to filter the content of the select boxes below based on selections
	//from other select boxes
	
	//set default values 
	//default values (inquiry)
	if (isset($form_state['storage']['add']['inquiry']['which'])) {
		$usage_inquiry_value = $form_state['storage']['add']['inquiry']['which'];
	}
	else {
		$usage_inquiry_value = 'none';
	}
	
	//default values (stage)
	if (isset($form_state['storage']['add']['stage']['which'])) {
		$usage_stage_value =  $form_state['storage']['add']['stage']['which'];
	}
	else{
		$usage_stage_value = 'none';
	}
	
	//default values (phase)
	if (isset($form_state['storage']['add']['phase']['which'])) {
		$usage_phase_value = $form_state['storage']['add']['phase']['which'];
	}
	else {
		$usage_phase_value = 'none';
	}
	
	//default values (activity)
	if (isset($form_state['storage']['add']['activity']['which'])) {
		$usage_activity_value = $form_state['storage']['add']['activity']['which'];
	}
	else {
		$usage_activity_value = 'none';
	}
	
	//inquiry select box
	$form['add']['inquiry'] = array(
	    '#type'   => 'fieldset',
	    '#title'  => t('Grouping Inquiry'),
	    '#prefix' => '<div id="inquiry-wrapper">', // This is our wrapper div.
	    '#suffix' => '</div>',
	    '#tree'   => TRUE, // Don't forget to set #tree!
	);
	
	//inquiry options
	$inquiry_query = "SELECT * FROM pi_inquiry";
	$inquiries = db_query($inquiry_query);
	$inquiry_options = array();
	$inquiry_options['none'] = 'none';
	while($inquiry = db_fetch_object($inquiries)){
		$inquiry_options[$inquiry->inquiry_id] = $inquiry->inquiry_id . " : " . $inquiry->name;
	}
	
	$form['add']['inquiry']['which'] = array(
	    '#type' => 'select',
	    '#title' => t('Grouping Applies To Which: Inquiry'),
	    '#options' => $inquiry_options,
	    '#default_value' => $usage_inquiry_value,
	    '#ahah' => array(
	      'event'   => 'change',
	      'path'    => ahah_helper_path(array('add','inquiry')),
	      'wrapper' => 'inquiry-wrapper',
	),
	);
	$form['add']['inquiry']['update_usage'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Filter'),
	    '#submit' => array('ahah_helper_generic_submit'),
	    '#attributes' => array('class' => 'js'),
	);
	
	//stage value - dependant on inquiry and phase
	$form['add']['stage'] = array(
	    '#type'   => 'fieldset',
	    '#title'  => t('Grouping Stage'),
	    '#prefix' => '<div id="stage-wrapper">', // This is our wrapper div.
	    '#suffix' => '</div>',
	    '#tree'   => TRUE, // Don't forget to set #tree!
	);
	
	//stage options - constrain on inquiry and phase if values have been selected!
	$stage_query = get_stage_query($usage_inquiry_value, $usage_phase_value);
	$stages = db_query($stage_query);
	$stage_options = array();
	$stage_options['none'] = 'none';
	while($stage = db_fetch_object($stages)){
		$stage_options[$stage->stage_id] = $stage->stage_id . " : " . $stage->name;
	}
	
	$form['add']['stage']['which'] = array(
	    '#type' => 'select',
	    '#title' => t('Grouping Applies To Which: Stage'),
	    '#options' => $stage_options,
	    '#default_value' => $usage_stage_value,
	    '#ahah' => array(
	      'event'   => 'change',
	      'path'    => ahah_helper_path(array('add','stage')),
	      'wrapper' => 'stage-wrapper',
	),
	);
	$form['add']['stage']['update_usage'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Filter'),
	    '#submit' => array('ahah_helper_generic_submit'),
	    '#attributes' => array('class' => 'js'),
	);
	
	//phase value - dependant on inquiry and stage
	$form['add']['phase'] = array(
	    '#type'   => 'fieldset',
	    '#title'  => t('Grouping Phase'),
	    '#prefix' => '<div id="phase-wrapper">', // This is our wrapper div.
	    '#suffix' => '</div>',
	    '#tree'   => TRUE, // Don't forget to set #tree!
	);
	
	//phase options
	$phase_query = get_phase_query($usage_inquiry_value, $usage_stage_value);
	$phases = db_query($phase_query);
	$phase_options = array();
	$phase_options['none'] = 'none';
	while($phase = db_fetch_object($phases)){
		$phase_options[$phase->phase_id] = $phase->phase_id . " : " . $phase->name;
	}
	
	$form['add']['phase']['which'] = array(
	    '#type' => 'select',
	    '#title' => t('Grouping Applies To Which: Phase'),
	    '#options' => $phase_options,
	    '#default_value' => $usage_phase_value,
	    '#ahah' => array(
	      'event'   => 'change',
	      'path'    => ahah_helper_path(array('add','phase')),
	      'wrapper' => 'phase-wrapper',
		),
	);
	$form['add']['phase']['update_usage'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Filter'),
	    '#submit' => array('ahah_helper_generic_submit'),
	    '#attributes' => array('class' => 'js'),
	);
	
	//activity value - dependant on inquiry and stage and phase
	$form['add']['activity'] = array(
	    '#type'   => 'fieldset',
	    '#title'  => t('Grouping Activity'),
	    '#prefix' => '<div id="activity-wrapper">', // This is our wrapper div.
	    '#suffix' => '</div>',
	    '#tree'   => TRUE, // Don't forget to set #tree!
	);
	
	//phase options
	$activity_query = get_activity_query($usage_phase_value, $usage_stage_value);
	$activities = db_query($activity_query);
	$activity_options = array();
	$activity_options['none'] = 'none';
	while($activity = db_fetch_object($activities)){
		$activity_options[$activity->activity_id] = $activity->activity_id . " : " . $activity->name;
	}
	
	$form['add']['activity']['which'] = array(
	    '#type' => 'select',
	    '#title' => t('Grouping Applies To Which: Activity'),
	    '#options' => $activity_options,
	    '#default_value' => $usage_activity_value,
	    '#ahah' => array(
	      'event'   => 'change',
	      'path'    => ahah_helper_path(array('add','activity')),
	      'wrapper' => 'activity-wrapper',
		),
	);
	$form['add']['activity']['update_usage'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Filter'),
	    '#submit' => array('ahah_helper_generic_submit'),
	    '#attributes' => array('class' => 'js'),
	);
	
	//after the filtering add in the grouping details
	
	$form['add']['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Grouping Name'),
		'#default_value' => '',
	);

	$form['add']['description'] = array(
		'#type' => 'textfield',
		'#title' => t('Grouping Description'),
		'#default_value' => '',
	);
	
	$og_query = "SELECT * FROM og";
	$og_groups_query = db_query($og_query);
	$og_groups_options = array();
	while($og = db_fetch_object($og_groups_query)){
		$og_groups_options[$og->nid] = $og->og_description . ' (' . $og->nid . ')';
	}
	
	$form['add']['gid'] = array(
		'#type' => 'select',
		'#title' => t('OG Group of Grouping'),
		'#options' => $og_groups_options,
		'#default_value' => '',
	);
	
	$form['add']['parent_gid'] = array(
		'#type' => 'select',
		'#title' => t('Parent OG Group of this New Grouping?'),
		'#options' => $og_groups_options,
		'#default_value' => '',
	);
	
	$form['add']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add'),
	);

	return $form;
}

/**
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_authoring_advanced_groups_create_form_submit($form, &$form_state){
	//pi_grouping
	$query = "INSERT INTO pi_grouping SET";
	$query .= " name = '" . $form_state['values']['add']['name'] . "'";
	$query .= ", description = '" . $form_state['values']['add']['description'] . "'";
	db_query($query);
	
	//get grouping_id
	$query1 = "SELECT MAX(pi_grouping.grouping_id) FROM pi_grouping";
	$grouping_id = db_result(db_query($query1));
	
	//pi_grouping_group
	$query2 = "INSERT INTO pi_grouping_group SET";
	$query2 .= " grouping_id = '" . $grouping_id . "'";
	$query2 .= ", gid = '" . $form_state['values']['add']['gid'] . "'";
	db_query($query2);
	
	//pi_group_hierarchy
	$query3 = "INSERT INTO pi_group_hierarchy SET";
	$query3 .= " gid = '" . $form_state['values']['add']['gid'] . "'";
	$query3 .= ", parent_gid = '" . $form_state['values']['add']['parent_gid'] . "'";
	db_query($query3);
	
	//pi_grouping_group
	$query4 = "INSERT INTO pi_inquiry_grouping SET";
	$query4 .= " grouping_id = '" . $grouping_id ."'";
	$query4 .= ", inquiry_id = '" . $form_state['values']['add']['inquiry']['which'] . "'";
	if($form_state['values']['add']['stage']['which'] != 'none'){
		$query4 .= ", stage_id = '" . $form_state['values']['add']['stage']['which'] . "'";
	}
	if($form_state['values']['add']['phase']['which'] != 'none'){
		$query4 .= ", phase_id = '" . $form_state['values']['add']['phase']['which'] . "'";
	}
	if($form_state['values']['add']['activity']['which'] != 'none'){
		$query4 .= ", activity_id = '" . $form_state['values']['add']['activity']['which'] . "'";
	}
	db_query($query4);
}

/**
 * Helper get stage query function
 * 
 * @param unknown_type $inquiry_value
 * @param unknown_type $phase_value
 * @return string
 */
function get_stage_query($inquiry_value, $phase_value){
	$stage_query = "SELECT * FROM pi_stage";
	//LEFT JOIN'S
	if($inquiry_value != 'none'){
		$stage_query .= " LEFT JOIN pi_inquiry_stage ON pi_inquiry_stage.stage_id = pi_stage.stage_id";
	}
	if($phase_value != 'none'){
		$stage_query .= " LEFT JOIN pi_stage_phase ON pi_stage_phase.stage_id = pi_stage.stage_id";
	}
	//WHERE'S
	if($inquiry_value != 'none'){
		$stage_query .= " WHERE pi_inquiry_stage.inquiry_id = '" . $inquiry_value . "'";
	}
	if($phase_value != 'none'){
		if($inquiry_value != 'none'){
			$stage_query .= " AND";
		}
		else{
			$stage_query .= " WHERE";
		}
		$stage_query .= " pi_stage_phase.phase_id = '" . $phase_value . "'";
	}
	return $stage_query;
}

/**
 * MISSING
 * 
 * @param unknown_type $inquiry_value
 * @param unknown_type $stage_value
 * @return string
 */
function get_phase_query($inquiry_value, $stage_value){
	$phase_query = "SELECT * FROM pi_phase";
	//LEFT JOIN'S
	if($inquiry_value != 'none'){
		$phase_query .= " LEFT JOIN pi_inquiry_phase ON pi_inquiry_phase.phase_id = pi_phase.phase_id";
	}
	if($stage_value != 'none'){
		$phase_query .= " LEFT JOIN pi_stage_phase ON pi_stage_phase.phase_id = pi_phase.phase_id";
	}
	//WHERE'S
	if($inquiry_value != 'none'){
		$phase_query .= " WHERE pi_inquiry_phase.inquiry_id = '" . $inquiry_value . "'";
	}
	if($stage_value != 'none'){
		if($inquiry_value != 'none'){
			$phase_query .= " AND";
		}
		else{
			$phase_query .= " WHERE";
		}
		$phase_query .= " pi_stage_phase.stage_id = '" . $stage_value . "'";
	}
	return $phase_query;
}

/**
 * MISSING
 * 
 * @param unknown_type $phase_value
 * @param unknown_type $stage_value
 * @return string
 */
function get_activity_query($phase_value, $stage_value){
	$activity_query = "SELECT * FROM pi_activity";
	$activity_query .= " LEFT JOIN pi_stage_phase_activity ON";
	$activity_query .= " pi_stage_phase_activity.activity_id = pi_activity.activity_id";
	$activity_query .= " LEFT JOIN pi_stage_phase ON pi_stage_phase.psp_id = pi_stage_phase_activity.psp_id";
	if($phase_value != 'none'){
		$activity_query .= " WHERE pi_stage_phase.phase_id = '" . $phase_value . "'";
	}
	if($stage_value != 'none'){
		if($phase_value != 'none'){
			$activity_query .= " AND";
		}
		else{
			$activity_query .= " WHERE";
		}
		$activity_query .= " pi_stage_phase.stage_id = '" . $stage_value . "'";
	}
	return $activity_query;
}

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------End: Forms for section 7 of the menu--------------------------------
//-------------------------------------------------------------------------------------------------------------------
