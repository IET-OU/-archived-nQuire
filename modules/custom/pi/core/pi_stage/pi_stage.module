<?php

// $Id: pi_stage.module,v 0.1 2010/03/17 MCP $

/**
 * @file  This module provides the implementation of the Inquiry Stage content type
 */

/**
 * Define the pi_stage node type
 */
function pi_stage_node_info() {
	return array(
			'pi_stage' => array(
					'name' => t('Inquiry Stage'), // Required.
					'module' => 'pi_stage', // Required.
					'description' => t('This is the Inquiry Stage content type for nQuire'), // Required.
					'has_title' => TRUE,
					'title_label' => t('Stage Name'),
					'has_body' => TRUE,
					'body_label' => t('Stage Description'),
					'min_word_count' => 1,
			)
	);
}

/**
 * Define permissions available for pi_inquiry module
 */
function pi_stage_perm() {
	return array('create inquiry', 'edit own inquiry', 'edit any inquiry', 'delete own inquiry', 'delete any inquiry');
}

/**
 * Work out if a user has permission to do something with an Inquiry
 */
function pi_stage_access($op, $node, $account) {
	$is_author = $account->uid == $node->uid;
	switch ($op) {
		case 'create':
			// Allow if user's role has 'create inquiry' permission.
			return user_access('create inquiry', $account);

		case 'update':
			// Allow if user's role has 'edit own inquiry' permission and user is
			// the author; or if the user's role has 'edit any inquiry' permission.
			return user_access('edit own inquiry', $account) && is_author ||
							user_access('edit any inquiry', $account);
		case 'delete':
			// Allow if user's role has 'delete own inquiry' permission and user is
			// the author; or if the user's role has 'delete any inquiry' permission.
			return user_access('delete own inquiry', $account) && $is_author ||
							user_access('delete any inquiry', $account);
	}
}

/**
 * The form for adding/editing a stage with ahah_helper to update inquiry and phase relationsips
 * @param $node
 * @param $form_state
 */
function pi_stage_form(&$node, $form_state) {
	$form = array();
	return $form;
}

/**
 * hook_insert() - INSERT command for a new inquiry stage, also creates links to phases
 */
function pi_stage_insert($node) {
	// Query the database first to set the weight to place the item at the end of lists.
	// If the query result is NULL then the the field will to default=0 since the weight
	// column is defined with NOT NULL DEFAULT 0
	$initial_weight = db_result(db_query("SELECT MAX(weight)+1 FROM {pi_stage} WHERE inquiry_nid=%d", $node->inquiry_nid));

	db_query("INSERT INTO {pi_stage} (nid, vid, inquiry_nid, weight) VALUES (%d, %d, %d, %d)", $node->nid, $node->vid, $node->inquiry_nid, $initial_weight);

	db_query('DELETE FROM {pi_stage_phase} WHERE (stage_id = %d)', $node->nid);

	foreach ($node->phases['phases'] as $phase_nid => $value) {
		db_query("INSERT INTO {pi_stage_phase} (stage_id, phase_id, access) VALUES (%d, %d, '%s')", $node->nid, $phase_nid, $value);
	}
}

/**
 * hook_update - UPDATE command for an existing inquiry stage,
 * also adds or removes the pi_stage_phase roes where appropriate
 */
function pi_stage_update($node) {
	if ($node->revision) {
		// New revision; treat it as a new record.
		pi_stage_insert($node);
	} else {
		db_query("UPDATE {pi_stage} SET inquiry_nid = %d, weight = %d WHERE vid = %d", $node->inquiry_nid, $node->weight, $node->vid);

		db_query('DELETE FROM {pi_stage_phase} WHERE (stage_id = %d)', $node->nid);

		$phase_query = "INSERT INTO {pi_stage_phase} (stage_id, phase_id, access) VALUES (%d, %d, '%s')";
		foreach ($node->phases['phases'] as $phase_nid => $value) {
			db_query($phase_query, $node->nid, $phase_nid, $value);
		}
	}
}

/**
 * hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function pi_stage_nodeapi(&$node, $op, $teaser, $page) {
	switch ($op) {
		case 'delete revision':
			// Notice that we're matching a single revision based on the node's vid.
			db_query('DELETE FROM {pi_stage} WHERE vid = %d', $node->vid);
			break;
			break;
	}
}

/**
 * hook_delete() DELETE command for an inquiry stage
 */
function pi_stage_delete(&$node) {
	// Delete the related information we were saving for this node.
	db_query('DELETE FROM {pi_stage} WHERE nid = %d', $node->nid);
	db_query('DELETE FROM {pi_stage_phase} WHERE stage_id = %d', $node->nid);
	db_query('DELETE FROM {pi_stage_current} WHERE stage_id = %d', $node->nid);
}

/**
 * Custom loader for pi_stage type called via node_load
 */
function pi_stage_load($node) {
	$data = db_fetch_object(db_query('SELECT inquiry_nid, weight FROM {pi_stage} WHERE vid = %d', $node->vid));
	$data->phases = $phases_nids = array();
	$result = db_query("SELECT phase_id, access FROM {pi_stage_phase} WHERE stage_id = %d", $node->nid);

	while ($row = db_fetch_array($result)) {
		$data->phases[$row['phase_id']] = $row['access'];
	}
	
	return $data;
}

/**
 * Returns array of stage_id, and name values for given inquiry_id
 */
function pi_stage_load_nids($inquiry_nid) {
	$query = "SELECT nid FROM {pi_stage} WHERE inquiry_nid = %d ORDER BY weight ASC";
	$result = db_query($query, $inquiry_nid);
	$nids = array();
	while ($row = db_fetch_array($result)) {
		$nids[] = $row['nid'];
	}
	return $nids;
}

/**
 * Queries the node database to provide a list of nids referring to stages in an
 * phase given by $phase_nid, with user a member of the stage actor groups
 * Use node_load($nid) to then access the stage details
 * @param uint $phase_nid the nid of the phase to load the stages for
 * @return array of nids referring to pi_stage nodes in the given inquiry
 */
function pi_stage_load_nids_for_phase($phase_nid) {
	$query = "SELECT DISTINCT {pi_stage}.nid AS nid FROM {pi_stage} AS pi_stage " .
					"LEFT JOIN {pi_stage_phase} AS pi_stage_phase ON pi_stage_phase.stage_id=pi_stage.nid " .
					"WHERE pi_stage_phase.phase_id = %d";
	$result = db_query($query, $phase_nid);
	$stage_nodes = array();
	while ($nid = db_result($result)) {
		$stage_nodes[] = $nid;
	}
	return $stage_nodes;
}

/**
 * Queries the node database to provide a list of nids referring to stages in an
 * inquiry given by $inquiry_nid, with user a member of the stage actor groups
 * Use node_load($nid) to then access the stage details
 * @param uint $inquiry_nid the nid of the inquiry to load the stages for
 * @param uint $unid The uid of the user to load the stages for
 * @return array of nids referring to pi_stage nodes in the given inquiry
 */
function pi_stage_load_nids_for_user($inquiry_nid, $uid) {
	$query = "SELECT DISTINCT {pi_stage}.nid AS nid FROM {pi_stage} AS pi_stage " .
					"LEFT JOIN {pi_stage_actor} AS pi_stage_actor ON pi_stage_actor.stage_id=pi_stage.nid " .
					"LEFT JOIN {og_uid} AS og_uid ON og_uid.nid = pi_stage_actor.gid " .
					"WHERE pi_stage.inquiry_nid = %d " .
					"AND og_uid.uid = %d";
	$result = db_query($query, $inquiry_nid, $uid);
	$stage_nodes = array();
	while ($nid = db_result($result)) {
		$stage_nodes[] = $nid;
	}
	return $stage_nodes;
}

/**
 * Returns an array containing the stage_nids of the inquiry for that user.
 * The stages are ordered by weight.
 */
function get_stages_of_inquiry_and_user($inquiry_id, $uid) {
	drupal_set_message('get_stages_of_inquiry_and_user($inquiry_id, $uid) should be replaced with pi_stage_load_nids_for_group($inquiry_id, $uid)', 'warning');
	return pi_stage_load_nids_for_user($inquiry_nid, $uid);
}

/**
 * Builds the view for the stage
 * @todo Add a detailed view to be used in the whole system
 */
function pi_stage_view($node, $teaser = FALSE, $page = FALSE) {
	// If $teaser is FALSE, the entire node is being displayed.
	if (!$teaser) {
		//Use Drupal's default node view.
		$node = node_prepare($node, $teaser);

		// render the phase activities using a theme function
		$node->content['activities'] = array(
				'#value' => theme('stage_activities', $node),
				'#weight' => 2,
		);
		// Add more involved phase layout here
	}

	// If $teaser is true, node is being displayed as a teaser,
	// in this case, just show the description and none of the rest of the inquiry stuff
	if ($teaser) {
		//Use Drupal's default node view.
		$node = node_prepare($node, $teaser);
	}
	return $node;
}

/**
 * Declare theme functions for pi_inquiry
 */
function pi_stage_theme() {
	return array(
			'stage_activities' => array(
					'arguments' => array('node'),
			),
	);
}

/**
 * Theme function to display the inquiry description
 * @param drupal node data $node Inquiry node details.
 */
function theme_stage_activities($node) {
	$output = '<div class="phase-activities">';
	$output .= "Stage activities";
	$output .= '</div>';
	return $output;
}
