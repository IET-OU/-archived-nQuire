<?php
// $Id: pi_stage.module,v 0.1 2010/03/17 MCP $

/**
 * @file  This module provides the implementation of the Inquiry Stage content type
 */

/**
 * Define the pi_stage node type
 */
function pi_stage_node_info() {
	return array(
		'pi_stage' => array(
			'name' => t('Inquiry Stage'), // Required.
			'module' => 'pi_stage',  // Required.
			'description' => t('This is the Inquiry Stage content type for nQuire'), // Required.
			'has_title' => TRUE,
			'title_label' => t('Stage Name'),
			'has_body' => TRUE,
			'body_label' => t('Stage Description'),
			'min_word_count' => 1,
		)
	);
}

/**
 * Define permissions available for pi_inquiry module
 */
function pi_stage_perm() {
	return array('create inquiry', 'edit own inquiry', 'edit any inquiry', 'delete own inquiry', 'delete any inquiry');
}

/**
 * Work out if a user has permission to do something with an Inquiry
 */
function pi_stage_access($op, $node, $account) {
  $is_author = $account->uid == $node->uid;
  switch ($op) {
    case 'create':
      // Allow if user's role has 'create inquiry' permission.
      return user_access('create inquiry', $account);

    case 'update':
      // Allow if user's role has 'edit own inquiry' permission and user is
      // the author; or if the user's role has 'edit any inquiry' permission.
      return user_access('edit own inquiry', $account) && is_author ||
        user_access('edit any inquiry', $account);
    case 'delete':
      // Allow if user's role has 'delete own inquiry' permission and user is
      // the author; or if the user's role has 'delete any inquiry' permission.
      return user_access('delete own inquiry', $account) && $is_author ||
        user_access('delete any inquiry', $account);
  }
}


/**
 * The form for adding/editing an Inquiry
 */
function pi_stage_form(&$node, $form_state) {
	// Get metadata for the node type which is defined in pi_stage_info()
	$type = node_get_types('type', $node);

	$form=array();
	
	if ($type->has_title)
	{
		$form['title'] = array(
			'#type' => 'textfield',
			'#title' => check_plain($type->title_label),
			'#weight' => 0,
			'#required' => TRUE,
			'#default_value' => $node->title,
		);
	}
	if ($type->has_body)
	{
		$form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
		$form['body_field']['body']['#rows'] = 6;
		$form['body_field']['teaser_include']['#access'] = FALSE;			
	}
	
	//Generate list of inquiry options from existing inquiries
	$inquiry_data = array();	
	// Add default value
	$inquiry_data['none'] = 'Select Inquiry...';
	
	$inquiry_nids = pi_inquiry_load_nids();
	foreach($inquiry_nids as $nid)
	{
		$inquiry = node_load($nid);
		if($inquiry)
		{
			$inquiry_data[$nid] = $inquiry->title;
		}
	} 
	if(count($inquiry_data)==0)
	{
		drupal_set_message(t('There are no inquiries defined, please create an inquiry before defining phases.'), 'error');		
	}
	
	//This section allows a dynamic list of stages to appear on the form to allow 
	// pi_stage_phase links to be created at the same time as a stage.
	// This uses the ahah_helper module
	
	ahah_helper_register($form, $form_state);
	
	// If there's no value in storage and the node has one set, then use that
	if(isset($node->inquiry_nid) && !isset($form_state['storage']['inquiry_nid']))
	{
		$inquiry_nid_default_value = $node->inquiry_nid;
	}
	else
	{
		//If there's a value in storage use that
		if(isset($form_state['storage']['inquiry_nid']))
		{
			$inquiry_nid_default_value =  $form_state['storage']['inquiry_nid'];
		}
		else
		{
			//Otherwise, use 'none'
			$inquiry_nid_default_value = 'none';
		}
	}
	
	$form['inquiry_nid'] = array(
		'#type' => 'select',
		'#title' => t('Inquiry for stage'),
		'#default_value' => $inquiry_nid_default_value,
		'#weight' => 2,
		'#options' => $inquiry_data,
		'#allowed_inquiry_nids' => $inquiry_nids,
		'#element_validate' => array('pi_stage_form_inquiry_nid_validate'),
		'#ahah' => array(
			'event'   => 'change',
			'path'    => ahah_helper_path(array('stage_phases')),
			'wrapper' => 'stage-phases-wrapper',
		),
	);	
	
	//This uses the generic submit callback provided by the ahah_helper module here
	// Is sets $form_state['rebuild'] = TRUE.
	// 'no-js' class is set so that the submit button will be shown if JS is enabled.
	$form['inquiry_nid']['update_usage'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Update phase list'),
	    '#weight' => 2,
		'#submit' => array('ahah_helper_generic_submit'),
	    '#attributes' => array('class' => 'no-js'),
	);
	
	// Based on the selection above generate the select boxes for phases
	$phase_select_boxes = array();
	if($usage_default_value != 'none')
	{
		$inquiry_phase_nids = pi_phase_load_nids($form_state['storage']['inquiry_nid']);
		foreach($inquiry_phase_nids as $nid)
		{
			$phase = node_load($nid);
			if($phase)
			{
				$phase_select_boxes[$phase->nid] = $phase->title;				
			}
		}
	}
		
	$form['stage_phases'] = array(
		'#type' => 'checkboxes',
		'#title'  => t('Select the phases to be included in this stage'),
	    '#weight' => 3,
		'#prefix' => '<div id="stage-phases-wrapper">', // This is wrapper div for ahah response to fill
	    '#suffix' => '</div>',
		'#options' => $phase_select_boxes,
	);	
	
	return $form;
}

/**
 * hook_form_alter - changes the form to change it from default node layout
 */
function pi_stage_form_alter(&$form, $form_state, $form_id) {
	// Stuff for this demo, best to keep it inside the house
	if($form_id == 'pi_stage_node_form')
	{
		ahah_helper_register($form, $form_state);
		$form['menu']['#weight'] = 4;

		// ISSUE 2: content cannot be saved by another user
		/**
		 * @TODO: Figure out the main cause why this happens. It has something
		 * to do with staying on the node form instead of redirecting to the view.
		 */
		$form['changed']['#default_value'] = $_SERVER['REQUEST_TIME'];

	}
}


/**
 * This is the validation function to make sure that pi_stage.inquiry_nid is a valid inquiry
 * @param unknown_type $element 
 * @param unknown_type $form_state
 */
function pi_stage_form_inquiry_nid_validate($element, $form_state)
{
	if(!in_array($form_state['values']['inquiry_nid'], $element['#allowed_inquiry_nids']))
	{
		form_error($element, t('The selected inquiry is not valid, please choose an existing inquiry.'));				
	}
}

/**
 * INSERT command for a new inquiry stage
 */
function pi_stage_insert($node) {
  db_query("INSERT INTO {pi_stage} (nid, vid, inquiry_nid) VALUES (%d, %d, %d)",
    $node->nid, $node->vid, $node->inquiry_nid);
}

/**
 * UPDATE command for an existing inquiry  stage
 */
function pi_stage_update($node) {
  if ($node->revision) {
    // New revision; treat it as a new record.
    pi_inquiry_insert($node);
  }
  else {
    db_query("UPDATE {pi_stage} SET inquiry_nid = %d WHERE vid = %d",
      $node->layout, $node->vid);
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function pi_stage_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {pi_stage} WHERE vid = %d', $node->vid);
      break;
  }
}

/**
 * DELETE command for an inquiry stage
 */
function pi_stage_delete(&$node) {
	// Delete the related information we were saving for this node.
	db_query('DELETE FROM {pi_stage} WHERE nid = %d', $node->nid);
}

/**
 * Custom loader for inquiry type (called when %inquiry is specified in a menu parameter)
 */
function pi_stage_load($node) {
	return db_fetch_object(db_query('SELECT inquiry_nid FROM {pi_stage} WHERE vid = %d', $node->vid));
}

/**
 * Builds the view for the inquiry
 * @todo Add a detailed inquiry view to be used in the whole system
 */
function pi_stage_view($node, $teaser = FALSE, $page = FALSE) {
	// If $teaser is FALSE, the entire node is being displayed.
	if (!$teaser)
	{
		//Use Drupal's default node view.
		$node = node_prepare($node, $teaser);
		
		// render the phase activities using a theme function
		$node->content['activities'] = array(
			'#value' => theme('stage_activities', $node),
			'#weight' => 2,
		);
		// Add more involved phase layout here
	}

	// If $teaser is true, node is being displayed as a teaser,
	// in this case, just show the description and none of the rest of the inquiry stuff
	if ($teaser) 
	{
		//Use Drupal's default node view.
		$node = node_prepare($node, $teaser);
	}
	return $node;
}

/**
 * Declare theme functions for pi_inquiry
 */
function pi_stage_theme() {
	return array(
  		'stage_activities' => array(
			'arguments' => array('node'),
		),
	);
}


/**
 * Theme function to display the inquiry description
 * @param drupal node data $node Inquiry node details.
 */
function theme_stage_activities($node) {
	$output = '<div class="phase-activities">';
	$output .= "Stage activities";
	$output .= '</div>';
	return $output;
}
