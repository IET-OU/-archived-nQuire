<?php

// $Id: pi_feedback.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "pi_feedback" node type
 */

/**
 * Implementation of hook_node_info().
 */
function pi_feedback_node_info() {

  return array(
      'pi_feedback' => array(
          'name' => t('Feedback'), // Required.
          'module' => 'pi_feedback', // Required.
          'description' => t('Inquiry content feedback'), // Required.
          'has_title' => FALSE,
          'has_body' => FALSE,
          'locked' => TRUE)
  );
}

/**
 * Implementation of hook_access().
 */
function pi_feedback_access($op, $node, $account) {
  return FALSE;
}

function pi_feedback_in_activity_form(&$form_state, $phase_nid, $content_nid) {
  $form = array();
  
  $feedback_node = pi_feedback_for_content($content_nid);

  $form['feedback'] = array(
      '#type' => 'textarea',
      '#required' => TRUE,
      '#default_value' => $feedback_node ? $feedback_node->feedback : '',
      '#description' => '',
      '#resizable' => TRUE,
      '#rows' => 8,
      '#cols' => 40,
      '#weight' => 0
  );

  //$form['feedback'] = filter_form(2);

  nquire_commons_create_form_save_cancel_buttons($form, 'pi_feedback_in_activity_form_submit', "phase/{$phase_nid}/shared");

  return $form;
}

function pi_feedback_in_activity_form_submit($form, $form_state) {
  global $user;

  $activity_nid = arg(1);
  $content_nid = arg(3);
  $feedback = $form_state['values']['feedback'];

  $inquiry_info = pi_info()->getInquiryInfoForActivity($activity_nid);
  $is_supervisor = $inquiry_info->userIsInquiryAdmin($user->uid);
  $content_manager = pi_info()->getContentManager();

  if ($is_supervisor && in_array($content_nid, $content_manager->getSharedContent($activity_nid, $user->uid, TRUE))) {
    $feedback_node = pi_feedback_for_content($content_nid);
    if ($feedback_node === NULL) {
      $feedback_node = new stdClass();
      $feedback_node->type = 'pi_feedback';
      $feedback_node->content_nid = $content_nid;
      $feedback_node->uid = $user->uid;
    } else {
      $feedback_node->revision = TRUE;
    }

    $feedback_node->feedback = $feedback;

    node_save($feedback_node);
  }

  nquire_commons_form_close($form, $form_state);
}

function pi_feedback_for_content($content_nid) {
  $query = "SELECT DISTINCT nid FROM {pi_feedback} WHERE content_nid='%d'";
  $result = db_fetch_array(db_query($query, $content_nid));
  return $result ? node_load($result['nid']) : NULL;
}

/**
 * Implementation of hook_insert().
 */
function pi_feedback_insert($node) {
  db_query("INSERT INTO {pi_feedback} (nid, vid, feedback, content_nid) VALUES ('%d', '%d', '%s', '%d')", $node->nid, $node->vid, $node->feedback, $node->content_nid);
}

/**
 * Implementation of hook_update().
 */
function pi_feedback_update($node) {
  if ($node->revision) {
    pi_feedback_insert($node);
  } else {
    db_query("UPDATE {pi_feedback} SET feedback = '%s' WHERE vid = %d", $node->feedback, $node->vid);
  }
}

/**
 * Implementation of hook_delete().
 */
function pi_feedback_delete(&$node) {
// Delete the related information we were saving for this node.
  db_query('DELETE FROM {pi_feedback} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function pi_feedback_load($node) {
  return db_fetch_object(db_query('SELECT * FROM {pi_feedback} WHERE vid = %d', $node->vid));
}

/**
 * Implementation of hook_view().
 */
function pi_feedback_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  return $node;
}
