<?php
// $Id: pi_data.module,v 1.2 2009/07/13 ou_mbg Exp $

/**
 * @file
 * Module for creating "pi_data" node type
 */

/**
 * Implementation of pi_data_node_info().
 */


function pi_data_node_info() {
  // We return an array since a module can define multiple node types.
  // We're only defining one node type, type 'pi_data'.
  return array(
    'pi_data' => array(
      'name' => t('Data'), // Required.
      'module' => 'pi_data',  // Required.
      'description' => t('What is your data?'), // Required.
      'has_title' => FALSE,
      'title_label' => t('Data'),
      'has_body' => TRUE,
      'body_label' => t('Data'),
      'locked' => TRUE
    )
  );
}

/**
 * Implementation of pi_data_perm().
 */
function pi_data_perm() {
}

/**
 * Implementation of pi_data_access().
 */
function pi_data_access($op, $node) {
	global $user;
	$details = get_inquiry_details_from_current_path();
	
  if ($op == 'create') {
  	return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
    //return (user_access('create pi_data'));
  }

  if ($op == 'update' || $op == 'delete') {
  	return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    //return (user_access('edit own pi_data'));
  }
}

/**
 * Implementation of pi_data_form().
 */
function pi_data_form(&$node) {
    
  // Get metadata for this node type
  // (we use it for labeling title and body fields).
  // We defined this in pi_data_node_info().
  $type = node_get_types('type', $node);
  
  $node_details = get_inquiry_details_from_current_path();
  
  $prefix_id = arg(7);
  $measures_param = arg(8);
  
  if (!($prefix_id)) {
    $prefix_id = 99;
  };
  
  $prefix_node = node_load($prefix_id);
  
  drupal_set_title(t($prefix_node->title));
  
//   if (!($measures_param)) {
//     $measures_param = 308;
//   };
  
  $weight_start = -10;
  
  $measures_array = array();
  if ($measures_param) {
  	$measures_node = node_load($measures_param);
  	$measures_array = $measures_node->measure_rows;
  }
  
  $prefix = "";
  
  $form_key_array = array();
  
    $form['title'] = array(
    '#type' => 'hidden',
    '#title' => t($prefix_node->title . " " . $type->title_label),
    '#required' => FALSE,
    '#default_value' => 'New interview',
  );
  
  if($measures_array) {
  foreach ($measures_array as $measure_row) {
  	
  	$form_key = t("k" . $measure_row->psm_id);
  	$form_key_array[] = $form_key;
  	
  	$query = "SELECT value FROM pi_collected_data WHERE psm_id = " . $measure_row->psm_id . " ";
  	$default_value = db_result(db_query($query));
  	
    if ($measure_row) {
     
  	  $measure = node_load($measure_row->measure_nid);
  
      // data_type == 0 ~ Type a number
      if ($measure->data_type == 0) {
        if (isset($measure->units_short) AND ($measure->units_short !='')) {
          $units = " (" . $measure->units_short . ")";
        }
        elseif (isset($measure->units) AND ($measure->units !='')) {
          $units = " (" . $measure->units . ")";
        }
        else {
          $units = "";
        };
      
      	$form['data'][$form_key] = array(
        	'#type' => 'textfield',
        	'#title' => t($measure->title . $units),
        	'#required' => TRUE,
        	'#default_value' => t($node->$form_key),
          	'#size' => 5,
        	'#weight' => $measure_row->weight
      	);
      }
      
      // data_type == 1 ~ Type text
      elseif ($measure->data_type == 1) {
      	$form['text'][$form_key] = array(
        	'#type' => 'textarea',
        	'#title' => t($measure->title),
        	'#required' => TRUE,
        	'#default_value' => ($node->$form_key),
          	'#resizable' => FALSE,
          	'#cols' => 50,
          	'#rows' => 3,
        	'#weight' => $measure_row->weight
      	);
      }
      
      // data_type == 2 ~ Select menu option
      elseif ($measure->data_type == 2) {
      	
        if ($measure->options) {
          $options = array();
          foreach (explode("\n",$measure->options) as $opt) {
            $options[] = substr($opt,0,16);
          };
        };
      
        if (isset($measure->units_short) AND ($measure->units_short !='')) {
          $units = " (" . $measure->units_short . ")";
        }
        elseif (isset($measure->units) AND ($measure->units !='')) {
          $units = " (" . $measure->units . ")";
        }
        else {
          $units = "";
        };
        
        
      	$form['menus'][$form_key] = array(
        	'#type' => 'radios',
        	'#title' => t($measure->title . $units),
        	'#required' => FALSE,
        	'#default_value' => t($node->$form_key),
          	'#options' => $options,
        	'#weight' => $measure_row->weight
      	);
      }
      
       // data_type == 3 ~ Checkboxes menu option
      elseif ($measure->data_type == 3) {
      	
        if ($measure->options) {
          $options = array();
          foreach (explode("\n",$measure->options) as $opt) {
            $options[] = substr($opt,0,16);
          };
        };
      
        if (isset($measure->units_short) AND ($measure->units_short !='')) {
          $units = " (" . $measure->units_short . ")";
        }
        elseif (isset($measure->units) AND ($measure->units !='')) {
          $units = " (" . $measure->units . ")";
        }
        else {
          $units = "";
        };
        
        
      	$form['menus'][$form_key] = array(
        	'#type' => 'checkboxes',
        	'#title' => t($measure->title . $units),
        	'#required' => FALSE,
        	'#default_value' => $node->$form_key,//get_measure_array($measure_row->psm_id),
          	'#options' => $options,
        	'#weight' => $measure_row->weight
      	);
      };
     
    };
    $count = $count + 1;

  }
  }
   	//the keys used in the form
	$form['form_keys'] = array(
      	'#type' => 'value',
      	'#value' => $form_key_array
    );
    
  //$prefix = "";
  
  $prefix .= "<p>" . $prefix_node->body . "</p>";
  $prefix .= "<div class='clear_both'>";
  if (isset($prefix_node->map_image_id) AND ($prefix_node->map_image_id != 0)) {
    $prefix .= '<img style="float: left; margin: 0 10px 10px 0;" src="' . url("image/view/" . $prefix_node->map_image_id . "/thumbnail") . '" />';
  };
  if (isset($prefix_node->image_id) AND ($prefix_node->image_id != 0)) {
    $prefix .= '<img style="float: left; margin: 0 10px 10px 0;" src="' . url("image/view/" . $prefix_node->image_id . "/thumbnail") . '" />';
  };
  $prefix .= "</div>";
  
  $form['#prefix'] = $prefix;

  return $form;
}

function get_measure_array($psm_id) {
	$query = "SELECT value FROM pi_collected_data WHERE psm_id = " . $psm_id . " ";
	$db_result = db_fetch_object(db_query($query));
	$db_result = $db_result->value;
	$array = explode(",", $db_result);
	return $array;
}


function theme_gps_location_layout($form) {
  $content = '<div class = "pi-gps-location">';
  $content .= '<div class = "pi-grid-square">';
  $content .= drupal_render($form['grid_square']);
  $content .= '</div>';
  $content .= '<div class = "pi-eastings">';
  $content .= drupal_render($form['eastings']);
  $content .= '</div>';
  $content .= '<div class = "pi-northings">';
  $content .= drupal_render($form['northings']);
  $content .= '</div>';
  $content .= '</div>';
  return $content;
}

function theme_data_values_layout ($form) {
  
  $values = array('value_1', 'value_2', 'value_3', 'value_4', 'value_5', 'value_6', 'value_7', 'value_8', 'value_9', 'value_10', 'value_11', 'value_12', 'value_13', 'value_14', 'value_15', 'value_16', 'value_17', 'value_19', 'value_20', 'value_21', 'value_22', 'value_23', 'value_24');
    
  $content = "";
  //$content .= '<div class="float_left" style="clear: none;">';
  foreach ($values as $value) {
    if (isset($form[$value])) {
      $content .= '<div class="number_data">' . drupal_render($form[$value]) .'</div>';
    };
  };
  //$content .= '</div>';  
  
  return $content;
}

function theme_menu_values_layout ($form) {
  
  $values = array('value_1', 'value_2', 'value_3', 'value_4', 'value_5', 'value_6', 'value_7', 'value_8', 'value_9', 'value_10', 'value_11', 'value_12', 'value_13', 'value_14', 'value_15', 'value_16', 'value_17', 'value_19', 'value_20', 'value_21', 'value_22', 'value_23', 'value_24');
    
  $content = "";
  //$content .= '<div class="float_left">';
  foreach ($values as $value) {
    if (isset($form[$value])) {
      $content .= '<div class="menu_data">' . drupal_render($form[$value]) .'</div>';
    };
  };
  //$content .= '</div>';  
  
  return $content;
}

function theme_text_values_layout ($form) {
  
  $values = array('value_1', 'value_2', 'value_3', 'value_4', 'value_5', 'value_6', 'value_7', 'value_8', 'value_9', 'value_10', 'value_11', 'value_12', 'value_13', 'value_14', 'value_15', 'value_16', 'value_17', 'value_19', 'value_20', 'value_21', 'value_22', 'value_23', 'value_24');
    
  $content = "";
  $content .= '<div class="clear_both">';
  foreach ($values as $value) {
    if (isset($form[$value])) {
      $content .= '<div class="text_data">' . drupal_render($form[$value]) .'</div>';
    };
  };
  $content .= '</div>';  
  
  return $content;
}

function theme_form_layout($form) {

  $content = "";

  $content .= '<div style="display: block; float: left; margin-top: -1em;">';
  $content .= drupal_render($form['place']);
  $content .= '</div>';  
  $content .= '<div class="clear_both"></div>';  
  $content .= '<div style="display: block; float: left; margin-right: 1em;">';
  $content .= drupal_render($form['data']);
  $content .= '</div>';
  $content .= '<div style="display: block; float: left; margin-right: 1em;">';
  $content .= drupal_render($form['menus']);
  $content .= '</div>';
  $content .= '<div style="display: block; clear: left; float: left;">';
  $content .= drupal_render($form['text']);
  $content .= '</div>';
  
  $content .= '<div class="clear_both"></div>';  
   
  $content .= drupal_render($form);
  return $content;
}


function pi_data_form_alter ($form_id, &$form) {
  
  unset ($form['preview']); 
  
  global $user;
  if (($user->uid != 1) AND (($form_id=="pi_hypothesis_node_form") OR ($form_id=="pi_selected_measures_node_form") 
        OR ($form_id=="pi_selected_locations_node_form") OR ($form_id=="pi_data_node_form"))) {
    unset ($form['delete']);
  };
}

/**
 * Implementation of hook_validate().
 */
function pi_data_validate($node) {
 /*
 	// check grid square
  if (!isset($node->grid_square)) {
	  form_set_error('grid_square', t('An Ordinance Survey grid square letter code must be specified (e.g. SP).'));
	}
  else {
    $grid_squares = array(t('AK'),t('HP'),t('HT'),t('HU'),t('HW'),t('HX'),t('HY'),t('HZ'),t('NA'),t('NB'),t('NC'),t('ND'),t('NF'),t('NG'),t('NH'),t('NJ'),t('NK'),t('NL'),t('NM'),t('NN'),t('NO'),t('NR'),t('NS'),t('NT'),t('NU'),t('NW'),t('NX'),t('NY'),t('NZ'),t('OV'),t('SC'),t('SD'),t('SE'),t('SH'),t('SJ'),t('SM'),t('SN'),t('SO'),t('SP'),t('SR'),t('SS'),t('ST'),t('SU'),t('SV'),t('SW'),t('SX'),t('SY'),t('SZ'),t('TA'),t('TF'),t('TG'),t('TL'),t('TM'),t('TQ'),t('TR'),t('TV'));
  	$member = false;
    foreach ($grid_squares as $item) {
      if ($item == $node->grid_square) {
        $member = true;
      };
    };
    if (!$member) {
  	  form_set_error('grid_square', t('A valid Ordinance Survey grid square letter code must be specified (e.g. SP).'));
  	};
  };
  
	// check eastings as a number
	if (!is_numeric ($node->eastings)) {
	  form_set_error('eastings', t('Easting must be a number.'));
	}
  elseif (($node->eastings < 0) || ($node->eastings > 99999)) {
	  form_set_error('eastings', t('Easting must be no more than five digits long.'));
  };
  
	// check northings as a number
	if (!is_numeric($node->northings)) {
	  form_set_error('northings', t('Northing must be a number.'));
	}
  elseif (($node->northings < 0) || ($node->northings > 99999)) {
	  form_set_error('northings', t('Northing must be no more than five digits long.'));
  };*/
  
}

/**
 * Implementation of pi_data_validate().
*
*function pi_data_validate($node) {
*
*}
 */

/**
 * Implementation of pi_data_insert().
 */
function pi_data_insert($node) {
	foreach($node->form_keys as $node_key) {
		$node_key_string = (string) $node_key;
		$psm_id = str_replace("k", "", $node_key_string);
		$value = $node->$node_key;
		if (is_array($value)) {
			$value = implode(",", $value);
		}
		$query = "INSERT INTO pi_collected_data (nid, psm_id, value) ";
		$query .= "VALUES ('" . $node->nid . "', '" . $psm_id . "', '" . $value . "') ";
		db_query($query);
	}
	
	/*  $query = "INSERT INTO {pi_data_values} SET ";
  $query .= "nid = " . $node->nid;
  $query .= ", vid = " . $node->vid;
  $query .= ", inquiry_id = " . $node->inquiry_id;
  for ($count = 1; $count <= 24; $count++) {
    $value = $node->{'value_' . $count};
    $value = str_replace("'", "\'", $value);
    $value = str_replace('"', '\"', $value);
    $query .= ", value_" . $count . " = '" . $value . "'";
  };
  db_query($query);
  
  $query = "INSERT INTO {pi_data_totals} SET ";
  $query .= "nid = " . $node->nid;
  $query .= ", vid = " . $node->vid;
  $query .= ", inquiry_id = " . $node->inquiry_id;
  for ($count = 1; $count <= 24; $count++) {
    if ($node->{'value_' . $count . '_data_type'} == 0) {
      $query .= ", total_" . $count . " = '" . array_sum(explode(",", str_replace(" ", "", $node->{'value_' . $count}))) . "'";
    }
    else {
      $query .= ", total_" . $count . " = ''";
    };
  };
  db_query($query);
  
  $query = "INSERT INTO {pi_data_averages} SET ";
  $query .= "nid = " . $node->nid;
  $query .= ", vid = " . $node->vid;
  $query .= ", inquiry_id = " . $node->inquiry_id;
  for ($count = 1; $count <= 24; $count++) {
    if ($node->{'value_' . $count . '_data_type'} == 0) {
      $values = explode(",", str_replace(" ", "", $node->{'value_' . $count}));
      $query .= ", average_" . $count . " = '" . array_sum($values) / count($values) . "'";
    }
    else {
      $query .= ", average_" . $count . " = ''";
    };
  };
  db_query($query);
  
  $query = "INSERT INTO {pi_data_locations} SET ";
  $query .= "nid = " . $node->nid;
  $query .= ", vid = " . $node->vid;
  $query .= ", grid_square = '" . $node->grid_square . "'";
  $query .= ", eastings = '" . $node->eastings . "'";
  $query .= ", northings = '" . $node->northings . "'";
  db_query($query);*/

}

/**
 * Implementation of hook_update().
 */
function pi_data_update($node) {
	$query = "DELETE FROM pi_collected_data WHERE nid = " . $node->nid . " ";
	db_query($query);
	pi_data_insert($node);


/*  if ($node->revision) {
    pi_available_data_insert($node);
  }
  else {  
    $query = "UPDATE {pi_data_values} SET ";
    $query .= " value_1 = '$node->value_1'";
    for ($count = 2; $count <= 24; $count++) {
      $value = $node->{'value_' . $count};
      $value = str_replace("'", "\'", $value);
      $value = str_replace('"', '\"', $value);
      $query .= ", value_" . $count . " = '" . $value . "'";
    };
    $query .= " WHERE vid = $node->vid";
    db_query($query);  
  
    $query = "UPDATE {pi_data_totals} SET ";
    if ($node->{'value_1_data_type'} == 0) {
      $query .= " total_1 = '" . array_sum(explode(",", str_replace(" ", "", $node->value_1))) . "'";
    }
    else {
      $query .= " total_1 = ''";
    };
    for ($count = 2; $count <= 24; $count++) {
      if ($node->{'value_' . $count . '_data_type'} == 0) {
        $query .= ", total_" . $count . " = '" . array_sum(explode(",", str_replace(" " , "", $node->{'value_' . $count}))) . "'";
      }
      else {
        $query .= ", total_" . $count . " = ''";
      };
    };
    $query .= " WHERE vid = $node->vid";
    db_query($query);
    
    $query = "UPDATE {pi_data_averages} SET ";
    if ($node->{'value_1_data_type'} == 0) {
      $values = explode(",", str_replace(" ", "", $node->value_1));
      $query .= " average_1 = '" . array_sum($values) / count($values) . "'";
    }
    else {
      $query .= " average_1 = ''";
    };
    for ($count = 2; $count <= 24; $count++) {
      if ($node->{'value_' . $count . '_data_type'} == 0) {
        $values = explode(",", str_replace(" ", "", $node->{'value_' . $count}));
        $query .= ", average_" . $count . " = '" . array_sum($values) / count($values) . "'";
      }
      else {
        $query .= ", average_" . $count . " = ''";
      };
    };
    $query .= " WHERE vid = $node->vid";
    db_query($query);
    
    $query = "UPDATE {pi_data_locations} SET ";
    $query .= "grid_square = '" . $node->grid_square . "'";
    $query .= ", eastings = '" . $node->eastings . "'";
    $query .= ", northings = '" . $node->northings . "'";
    $query .= " WHERE vid = $node->vid";
    db_query($query);
  }*/
}


/**
 * Implementation of pi_data_delete().
 */
function pi_data_delete(&$node) {
  db_query('DELETE FROM {pi_data_values} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {pi_data_totals} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {pi_data_averages} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {pi_data_locations} WHERE nid = %d', $node->nid);
}

function is_checkboxes_measure($id) {
	$query = "SELECT measure_nid FROM pi_selected_measures WHERE psm_id = " . $id . " ";
	$measure_nid = db_fetch_object(db_query($query));
	$measure_nid = $measure_nid->measure_nid;
	$measure = node_load($measure_nid);
	if ($measure->data_type) {
		return $measure->data_type == 3;
	}
	else {
		return FALSE;
	}
}

/**
 * Implementation of pi_data_load().
 */
function pi_data_load($node) {
	$result = new stdClass;
	$query = "SELECT * FROM pi_collected_data WHERE nid = " . $node->nid . " ";
	$db_result = db_query($query);
	
	while($row = db_fetch_object($db_result)) {
		$psm_id = t("k" . $row->psm_id);
		$value = $row->value;
		if (is_checkboxes_measure($row->psm_id)) {
			$value = explode(",", $value);
			//$value = get_measure_array($row->psm_id);
		}
		//$array_value = $row->array_value;
		//if ($array_value) {
		//	$value = explode(",", $array_value);
		//}
		$result->$psm_id = $value;
	}
	return $result;
  
  
  
 /* 
  $query = "SELECT v.*, ";
  $query .= "t.total_1, t.total_2, t.total_3, t.total_4, t.total_5, t.total_6, t.total_7, t.total_8, ";
  $query .= "t.total_9, t.total_10, t.total_11, t.total_12, t.total_13, t.total_14, t.total_15, t.total_16, ";
  $query .= "t.total_17, t.total_18, t.total_19, t.total_20, t.total_21, t.total_22, t.total_23, t.total_24, ";
  $query .= "a.average_1, a.average_2, a.average_3, a.average_4, a.average_5, a.average_6, a.average_7, a.average_8, ";
  $query .= "a.average_9, a.average_10, a.average_11, a.average_12, a.average_13, a.average_14, a.average_15, a.average_16, ";
  $query .= "a.average_17, a.average_18, a.average_19, a.average_20, a.average_21, a.average_22, a.average_23, a.average_24, ";
  $query .= "l.grid_square, l.eastings, l.northings ";
  $query .= "FROM pi_data_values AS v ";
  $query .= "LEFT JOIN pi_data_totals AS t ON v.nid = t.nid AND v.vid = t.vid ";
  $query .= "LEFT JOIN pi_data_averages AS a ON v.nid = a.nid AND v.vid = a.vid ";
  $query .= "LEFT JOIN pi_data_locations AS l ON v.nid = l.nid AND v.vid = l.vid ";
  $query .= "WHERE v.vid = " . $node->vid;
  return db_fetch_object(db_query($query));*/
}

/**
 * Implementation of pi_data_view().
 */
function pi_data_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);

    $node->content['pi_data'] = array(
      '#value' => theme('pi_data', $node),
      '#weight' => 2
      );
  }

  if ($teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }

  return $node;
}

function pi_data_theme() {
  return array(
    'pi_data' => array(
      'arguments' => array('node'),
    ),
  );
}

function theme_pi_data($node) {

  $output = '';
    
  if (!($prefix_id)) {
    $prefix_id = 99;
  };
  
  $prefix_node = node_load($prefix_id);
  
  drupal_set_title(t($prefix_node->title));
  
	$query = "SELECT node.title AS title, pi_collected_data.value AS value ";
	$query .= "FROM pi_collected_data ";
	$query .= "LEFT JOIN pi_selected_measures ON pi_collected_data.psm_id = pi_selected_measures.psm_id ";
	$query .= "LEFT JOIN node ON pi_selected_measures.measure_nid = node.nid ";
	$query .= "WHERE pi_collected_data.nid = " . $node->nid . " ";
	$query .= "ORDER BY pi_selected_measures.weight ASC";
	$db_result = db_query($query);
	
	while($row = db_fetch_object($db_result)) {

		$value = $row->value;
    $title = $row->title;
    
    if ($value == '0') {
      $output .= t('<p>' . $title . ': <b>Agree</b></p>');
    }
    elseif ($value == '1') {
      $output .= t('<p>' . $title . ': <b>Disagree</b></p>');
    }
    else {
      $output .= t('<p>' . $title . ': <b>' . $value . '</b></p>');
    };
    
  };
  
  $output .= '';
	
  return $output;
}

