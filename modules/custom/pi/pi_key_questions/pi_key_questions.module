<?php
// $Id: pi_key_questions.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "key questions" node type
 */


/**
 * Implementation of hook_node_info().
 */

function pi_key_questions_node_info() {
  return array(
	'pi_key_questions' => array(
      	 'name' => t('Inquiry key questions'), // Required.
	 'module' => 'pi_key_questions',  // Required.
	 'description' => t('What are the key questions of your inquiry?'), // Required.
	 'has_title' => FALSE,
	 'title_label' => t('Title'),
	 'has_body' => FALSE,
	 'body_label' => t('Key question'),
	 'locked' => TRUE
	)
   );
}


/**
 * Implementation of hook_perm().
 */

function pi_key_questions_perm() {
  return array('create pi_key_questions content', 'edit pi_key_questions');
}

/**
 * Implementation of hook_access().
 */
function pi_key_questions_access($op, $node) {
	global $user;
	$details = get_inquiry_details_from_current_path();
	
  if ($op == 'create') {
  	return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
    //return (user_access('create pi_key_questions'));
  }

  if ($op == 'update' || $op == 'delete') {
  	return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    //return (user_access('edit own pi_key_questions'));
  }
}

/**
 * Implementation of hook_form().
 */

function pi_key_questions_form(&$node) {

  $node_details = get_inquiry_details_from_current_path();
  $current_activity = load_activity($node_details->activity_id);
  
  drupal_set_title(t($current_activity->name));

  // Get metadata for this node type
  // (we use it for labeling title and body fields).
  // We defined this in pi_key_questions_node_info().
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'hidden',
    '#title' => check_plain($type->title_label),
    '#required' => FALSE,
    '#default_value' => check_plain($type->title_label),
    '#weight' => -5
  );

  $form['textarea_fieldset'] = array(
    '#type' => 'fieldset'
  );
  if ($node->inquiry_id) {
  	$inquiry_value = $node->inquiry_id;
  }
  else {
  	$inquiry_value = $node_details->inquiry_id;
  }
  $form['textarea_fieldset']['inquiry_id'] = array(
    '#type' => 'hidden',
    '#value' => $inquiry_value,
    '#weight' => 0
  );
  
  $form['textarea_fieldset']['short_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Short title'),
    '#required' => TRUE,
    '#default_value' => $node->short_title,
    '#resizable' => FALSE,
    '#weight' => 2
  );
  
  $form['textarea_fieldset']['key_question'] = array(
    '#type' => 'textarea',
    '#title' => t('My key question is '),
    '#required' => TRUE,
    '#default_value' => $node->key_question,
    '#resizable' => FALSE,
    '#rows' => 3,
    '#cols' => 40,
    '#weight' => 4
  );
  
  $form['textarea_fieldset']['weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight '),
    '#required' => FALSE,
    '#default_value' => $node->weight,
    '#resizable' => FALSE,
    '#weight' => 6
  );
  
  $prefix = "<p>A key question helps you break down your hypothesis into parts, so that you can devise a way for test your hypothesis.</p>";
  $prefix .= "<p>Providing a short title for your key question will help enable you to refer to each of your key questions.</p>";
 
  $form['#prefix'] = $prefix;
  
  return $form;

}

/**
 * Implementation of hook_insert().
 */

 
function pi_key_questions_insert($node) {
  db_query("INSERT INTO {pi_key_questions} (nid, vid, inquiry_id, short_title, key_question, weight) VALUES (%d, %d,'%d', '%s', '%s', '%d')",
    $node->nid, $node->vid, $node->inquiry_id, $node->short_title, $node->key_question, $node->weight);
}

/**
 * Implementation of hook_update().
 */

function pi_key_questions_update($node) {
  if ($node->revision) {
    pi_key_question_insert($node);
  }
  
  else {
    db_query("UPDATE {pi_key_questions} SET inquiry_id = '%d', short_title = '%s', key_question = '%s', weight = '%d' WHERE vid = '%d'", $node->inquiry_id, $node->short_title, $node->key_question, $node->weight, $node->vid);
  }
}

/**
 * Implementation of hook_delete().
 */

function pi_key_questions_delete(&$node) {
  // Delete the related information we were saving for this node.
  db_query('DELETE FROM {pi_key_questions} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */

function pi_key_questions_load($node) {
  return db_fetch_object(db_query('SELECT * FROM {pi_key_questions} WHERE vid = %d',
    $node->vid));
}

/**
 * Implementation of hook_view().
 */
function pi_key_questions_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);

    $node->content['pi_key_question'] = array(
    '#value' => theme('pi_key_question', $node),
    '#weight' => 2
    );
      
  }

  if ($teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }

  return $node;
}

function pi_key_question_theme() {
  return array(
    'pi_key_question' => array(
      'arguments' => array('node'),
    ),
  );
}


function theme_pi_key_question($node) {

  $output .= "<h3>" . $node->short_title . "</h3>";
  $output .= "<p><strong>Key question:</strong> " . $node->key_question . "</p>";
  $output .= "<p><strong>Weight:</strong> " . $node->weight . "</p>";
  
  return $output;
}

