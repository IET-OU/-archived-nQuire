<?php
// $Id: pi.module,v 0.1 2009/05/10 09:00:00 tdc5 $

/**
 * @file
 * Enables the use of the PI activity guide.
 */

/**
 * $path
 * ?q=node/nid/view (view is optional)
 * ?q=node/nid/edit
 * ?q=node/add/node_type
 * 
 * Following arguments are:
 * inquiry_id
 * stage_id
 * phase_id
 * activity_id
 * 
 * Following arguments are:
 * Parameter(s)
 * 
 * Following arguments are:
 * &destination=nid
 */

/**
 * Returns a keyed array. The keys are inquiry_id, stage_id, phase_id, 
 * activity_id, parameters, destination_nid
 */
 
function pi_menu() {

  $items = array();

  // Do not cache this menu item during the development of this module.
  
  $items['home'] = array(
    'title' => t('Home'),
    'page callback' => 'pi_home_view',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['phase'] = array(
    'title' => t('Phase'),
    'page callback' => 'pi_phase_view',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * get_nid_for_inquiry_activity_and_user
**/
function get_nid_for_inquiry_activity_and_user($inquiry_id, $activity_id, $uid) {
	//find if uid is author of the node
	$query1 = "SELECT pi_activity_node.nid FROM pi_activity_node, node";
	$query1 .= " WHERE  pi_activity_node.inquiry_id = " . $inquiry_id;
	$query1 .= " AND pi_activity_node.activity_id = " . $activity_id;
	$query1 .= " AND node.nid = pi_activity_node.nid";
	$query1 .= " AND node.uid = " . $uid;
	$query1 .= " ORDER BY pan_id DESC";
	$result = db_fetch_object(db_query($query1));
	
	if ($result->nid) {
		return $result->nid;
	}
	
	//find if uid is member of a group for the node
	$query2 = "SELECT pi_activity_node.nid FROM pi_activity_node, node_access, og_uid";
	$query2 .= " WHERE  pi_activity_node.inquiry_id = " . $inquiry_id;
	$query2 .= " AND pi_activity_node.activity_id = " . $activity_id;
	$query2 .= " AND node_access.nid = pi_activity_node.nid";
	$query2 .= " AND node_access.gid = gid";
	$query2 .= " AND node_access.gid = og_uid.nid";
	$query2 .= " AND og_uid.uid = " . $uid;
	
	$result = db_fetch_object(db_query($query2));
	return $result->nid;
}

/**
 * pi_home_view - Home page for PI
 */
 
function pi_home_view () {

  drupal_set_title('');
  
  $output = "";
  
  $image_path = "images/";
  global $user;
  $inquiry = get_inquiry_details_from_current_path();
  $view_by = arg(7);
  
  $stages = get_stages_of_inquiry_and_user($inquiry->inquiry_id, $user->uid);
  
  $output .= "<div style='display: block; margin: 0; vertical-align: top;'>";
  $output .= "<div style='display: block; clear: both; height: 0.5em;'> </div>";
  
  $current_stage = get_current_stage_of_inquiry_and_user ($inquiry->inquiry_id, $user->uid);
  $current_stage_id = $current_stage->stage_id;
  //print "csid:" .  t($current_stage_id);
  
  $count = 0;
  while ($result = db_fetch_object($stages)) {
    if ($count == 0) {
      $count++;
      if (!is_numeric($current_stage_id)) {
        $current_stage_id = $result->stage_id;
      };
    };
    $stage = load_stage($result->stage_id);
    
    if ($current_stage_id == $result->stage_id) {
	  $output .= "<div style='height: 1.5em; background-color:#aaaaaa; border: 1px solid #aaaaaa; padding: 0.4em; min-width: 5%; float: left;' title='" . $stage->description . "'>";
      $output .= "<b>" . $stage->name . "</b>";
	  $output .= "</div>";
	  $output .= "<div style='margin-right: 2%; float: left; font-size: 0px; line-height: 0%; width: 0px;
border-top: 18px solid #f6f6f6;
border-left: 36px solid #aaaaaa;
border-bottom: 16px solid #f6f6f6;'>&nbsp;</div>";
	  
    }
    else {
	  $output .= "<div style='height: 1.5em; background-color:#d2d2d2; border: 1px solid #d2d2d2; padding: 0.4em; min-width: 5%; float: left;' title='" . $stage->description . "'>";
      $output .= $stage->name;
	  $output .= "</div>";
	  $output .= "<div style='margin-right: 2%; float: left; font-size: 0px; line-height: 0%; width: 0px;
border-top: 18px solid #f6f6f6;
border-left: 36px solid #d2d2d2;
border-bottom: 16px solid #f6f6f6;'>&nbsp;</div>";
    };
    
  };

  $output .= "</div>";
  
  $output .= "<div style='display: block; clear: both; height: 0.5em;'> </div>";
  
  $current_stage = load_stage($current_stage_id);

  $output .= "<div style='display: block; clear: both;'>";
  //$output .= "<h2>" . $current_stage->name . "</h2>";
  $output .= "<p>" . $current_stage->description . "</p>";
  $output .= "</div>";
  
  $phases = get_phases_of_stage ($inquiry->inquiry_id, $current_stage_id);
  
  //while ($phase = db_fetch_object($phases)) {  
   // $phase_id = $phase->phase_id;
    
    $activities = get_activities_of_stage_phase_and_user ($inquiry->inquiry_id, $current_stage_id, NULL, $user->uid);
	
	if ($view_by == "status") {
		usort($activities, "compare_status");
	}
	else {
		usort($activities, "compare_phase");
	}	
	
	$home_link = t(build_home_link($inquiry->inquiry_id, $inquiry->stage_id, $inquiry->phase_id, $activity->activity_id));

	$output .= "<table class=\"home-table\">";

	if ($view_by == "status") {
		$output .= "<tr><td><b>Activity</b></td><td><b>Status";
		$output .= "<img src=\"" . $image_path . "arrow.png\"/>";
		$output .= "</b></td><td><b>";
		$output .= l("Phase", t($home_link . "/phase"), array());
		$output .= "</b></td><td><b>Description</b></td></tr>";
	}
	else {
		$output .= "<tr><td><b>Activity</b></td><td><b>";
		$output .= l("Status", t($home_link . "/status"), array());
		$output .= "</b></td><td><b>Phase";
		$output .= "<img src=\"" . $image_path . "arrow.png\"/>";
		$output .= "</b></td><td><b>Description</b></td></tr>";
	}
    foreach ($activities as $activity) { 
      $loaded_activity = load_activity($activity->activity_id); 
      $loaded_activity_status = load_activity_status ($inquiry->inquiry_id, $activity->activity_id, $user->uid);
	  
	  $loaded_phase = load_phase($activity->phase_id);
      $output .= "<tr>";
	   $output .= "<td>" .  build_activity_link($inquiry->inquiry_id, $inquiry->stage_id, $activity->phase_id, $activity->activity_id, $user->uid) . "</td>";
	  //$output .= "<td>" . $loaded_activity->name . "</td>";
	  //$output .= "<td>" . ucwords(t($activity->visible_status)) . "</td>";
	  $output .= "<td>" . ucwords(t($loaded_activity_status->visible_status)) . "</td>";
	  //$output .= "<td>" . $loaded_phase->name . "</td>";
	  $output .= "<td>" . $loaded_phase->name . "</td>";
      $output .= "<td>" . $loaded_activity->description . "</td>";
      $output .= "</tr>";

    };
	
	$output .= "</table>";
  //};
  
  return $output;
 
}

function compare_phase($a, $b) {
	$aposition = $a->position;
	$bposition = $b->position;
	$aphase = $a->phase_id;
	$bphase = $b->phase_id;
	if ($aphase == $bphase) {
		if ($aposition == $bposition) {
			return 0;
		};
		if ($aposition < $bposition) {
			return -1;
		};
		if ($aposition > $bposition) {
			return 1;
		};
	}
	else {
		if ($aphase < $bphase) {
			return -1;
		};
		if ($aphase > $bphase) {
			return 1;
		};		
	}
}

function compare_status($a, $b) {
	$aposition = $a->position;
	$bposition = $b->position;
	$status = array();
	$status["start"] = 0;
	$status["edit"] = 1;
	$status["view"] = 2;
	$status["unavailable"] = 3;
	$astatus = $status[$a->visible_status];
	$bstatus = $status[$b->visible_status];
	if ($astatus == $bstatus) {
		if ($aposition == $bposition) {
			return 0;
		};
		if ($aposition < $bposition) {
			return -1;
		};
		if ($aposition > $bposition) {
			return 1;
		};
	}
	else {
		if ($astatus < $bstatus) {
			return -1;
		};
		if ($astatus > $bstatus) {
			return 1;
		};		
	}
}

function pi_phase_view () {

  
  if (arg(0) == 'phase' && is_numeric(arg(1))) {
	  $phase_id = arg(1);
  }
  else {
    $phase_id = 1;
  };
  
  $phase = load_phase($phase_id);
  
  drupal_set_title($phase->name);
  
  $output = "";
   
  $output .= "<div style='display: block; clear: both;'>";
  // $output .= "<h2>" . $phase->name . "</h2>";
  $output .= "<p>" . $phase->description . "</p>";
  $output .= "</div>";

  global $user;
  $inquiry = get_inquiry_details_from_current_path();
  
  $activities = get_activities_of_stage_phase_and_user ($inquiry->inquiry_id, NULL, $phase_id, $user->uid);
  
  foreach ($activities as $activity) { 
    $loaded_activity = load_activity($activity->activity_id); 
    $loaded_activity_status = load_activity_status ($inquiry->inquiry_id, $activity->activity_id, $user->uid);
	
	$output .= "<dl>";
	
	$output .= "<dt>" . build_activity_link($inquiry->inquiry_id, $inquiry->stage_id, $inquiry->phase_id, $activity->activity_id, $user->uid) . "</dt>";
	
	$output .= "<dd>" .  "<span style='vertical-align: 10%;'>" . $loaded_activity->description . "</span>" . "</dd>";
	$output .= "</dl>";
		
  };
  
  return $output;
 
}
 

// ****************************************************************


function get_inquiry_details_from_current_path() {

	if (arg(0) == 'node' && (arg(1) == 'add' || arg(2) == 'edit' || arg(2) == 'view')) {
		$result->inquiry_id = arg(3);
		$result->stage_id = arg(4);
		$result->phase_id = arg(5);
		$result->activity_id = arg(6);
	}
	elseif (arg(0) == 'node' && is_numeric(arg(1)) && is_numeric(arg(2))) {
		$result->inquiry_id = arg(2);
		$result->stage_id = arg(3);
		$result->phase_id = arg(4);
		$result->activity_id = arg(5);	
	}
	else {
		$result->inquiry_id = arg(3);
		$result->stage_id = arg(4);
		$result->phase_id = arg(5);
		$result->activity_id = arg(6);
	}
	return $result;
}

function get_inquiry_details_of_node_path ($path) {

/**
 * Returns a keyed array. The keys are inquiry_id, stage_id, phase_id, 
 * activity_id, parameters, destination_nid
 */

  //$result = array();
  
  $split_pos = stripos($path, '&');
  
  $path_start = substr($path, 0, $split_pos);
  $path_end = substr($path, $split_pos);
  
  $arguments = explode('/', $path_end);
  
  $result->inquiry_id = $arguments[3];
  $result->stage_id = $arguments[4];
  $result->phase_id = $arguments[5];
  $result->activity_id = $arguments[6];
  $result->parameters = array_slice($arguments, 7);

  $result->destination_nid = substr($path_end, strlen('&destination=')); 
  
  return $result;
  
}

function get_activity_ids_for_activity_type ($inquiry_id, $activity_type, $uid) {

/**
 * Returns an array of activity_ids of the specified activity_type 
 * that are visible to that user according to pi_activity_actor. 
 * This uses pi_activity_actor and pi_activity tables.
 */
 
  $query = "SELECT pi_activity.activity_id ";
  $query .= "FROM pi_activity ";
  $query .= "LEFT JOIN pi_activity_actor ON pi_activity_actor.activity_id = pi_activity.activity_id ";
  $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
  $query .= "WHERE pi_activity_actor.inquiry_id = '" . $inquiry_id . "' ";
  $query .= "AND pi_activity.activity_type =  '" . $activity_type. "' ";
  $query .= "AND (pi_activity_actor.uid =  '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";
 
	$result = db_result(db_query($query));
	return $result;

}

function get_activity_type_of_node_path ($path) {

/**
 * Uses arguments from the path and the pi_activity_table to return the activity type.
 */

  $inquiry_details = get_inquiry_details_of_node_path ($path);
  
  $query = "SELECT activity_type FROM pi_activity WHERE activity_id = '" . $inquiry_details->inquiry_id . "'";
  $result = db_result(db_query($query));

	return $result ;
}

function check_activity_type_of_node_path ($path, $activity_type) {

/**
 * Returns FALSE if this is not the activity_type for the activity type 
 * associated with the node path, otherwise returns TRUE.
 */
 
	$temp = get_activity_type_of_node_path ($path);

  if ($temp == NULL) {
    $result = NULL;
  }
  elseif ($temp == $activity_type) {
    $result = TRUE;
	}
	else {
		$result = FALSE;
	};
  
  return $result;
  
}

function add_pi_activity_node ($inquiry_id, $activity_id, $nid) {

/**
 * Adds the specified data to the pi_activity_node table. 
 * This tracks that a node has been created for that particular activity.
 */
 
  $query = "INSERT INTO pi_activity_node ";
  $query .= "SET inquiry_id = '" . $inquiry_id . "'";
  $query .= ", activity_id = '" . $activity_id . "'";
  $query .= ", nid_id = '" . $nid_id . "'";
  
  db_query($query); 
 
}

// ------------------------------------------------------------------------------------

/**
 * Functions in this block are for visible_status and node_function. 
 * Primarily they refer to values of pi_activity_status.
 */

function get_visible_status_of_activity ($inquiry_id, $activity_id, $uid) {

/**
 * Returns visible_status from pi_activity_status (can be start, in_progress, view or unavailable).
 */ 
  
  $activity_status = load_activity_status ($inquiry_id, $activity_id, $uid);
  
  $result = $activity_status->visible_status;
  return $result ;

}

function check_visible_status_of_activity ($inquiry_id, $activity_id, $uid, $status) {

/**
 * $status can be either start, in_progress, view or unavailable.
 * Returns FALSE if that user does not have that permission for the 
 * specified activity, otherwise it returns TRUE.
 */

  $visible_status = get_visible_status_of_activity ($inquiry_id, $activity_id, $uid);
  
  if ($visible_status == $status) {
    $result = TRUE;
  }
  else {
    $result = FALSE;
  };
  
  return $result;

}

function set_visible_status_of_activity ($inquiry_id, $activity_id, $uid, $status) {

/**
 * $status can be either start, in_progress, view or unavailable.
 * Updates the existing visible_status to value $status.
 * This will set dependent on the audience in pi_activity.
 */
 
 $activity_status = load_activity_status ($inquiry_id, $activity_id, $uid);
 $activity_status->visible_status = $status;
 save_activity_status($activity_status);
 /*
  $query = "SELECT pi_activity_status.pas_id ";
  $query .= "FROM pi_activity_status ";
  $query .= "LEFT JOIN pi_activity_actor ";
  $query .= "ON pi_activity_actor.inquiry_id = pi_activity_status.inquiry_id ";
  $query .= "AND pi_activity_actor.activity_id = pi_activity_status.activity_id ";
  $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
  $query .= "WHERE pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
  $query .= "AND pi_activity_status.activity_id = '" . $activity_id . "' ";
  $query .= "AND (pi_activity_actor.uid = '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";
  
  $pas_id = db_result(db_query($query));
  
  $query = "UPDATE pi_activity_status ";
  $query .= "SET visible_status = '" . $status . "' ";
  $query .= "WHERE pas_id = '" . $pas_id . "'";
  
  db_query($query);*/
  
}

function set_visible_status_of_activity_type ($inquiry_id, $activity_type, $uid, $status) {

/**
 * Updates the visible status for all of the activities visible to that user of the specified type.
 * This will be set dependent on the audience in pi_activity.
 */

  $query = "SELECT pi_activity_status.pas_id ";
  $query .= "FROM pi_activity_status ";
  $query .= "LEFT JOIN pi_activity ON pi_activity_status.activity_id = pi_activity.activity_id ";
  $query .= "LEFT JOIN pi_activity_actor ";
  $query .= "ON pi_activity_actor.inquiry_id = pi_activity_status.inquiry_id ";
  $query .= "AND pi_activity_actor.activity_id = pi_activity_status.activity_id ";
  $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
  $query .= "WHERE pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
  $query .= "AND pi_activity_status.activity_id = '" . $activity_id . "' ";
  $query .= "AND pi_activity.activity_type = '" . $activity_type . "' ";
  $query .= "AND (pi_activity_actor.uid = '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";
  
  $items = db_query($query);
  
  while ($item = db_fetch_object($items)) {
  
    $query = "UPDATE pi_activity_status ";
    $query .= "SET visible_status = '" . $status . "' ";
    $query .= "WHERE pas_id = '" . $item->pas_id . "'";
    
    db_query($query);
  
  };
  
}

function get_node_function_of_activity ($inquiry_id, $activity_id, $uid) {

/**
 * Returns node_function from pi_activity_status (can be add, edit or view).
 */
 
  $activity_status = load_activity_status ($inquiry_id, $activity_id, $uid);
  $result = $activity_status->node_function;
  return $result ;
/*
  $query = "SELECT pi_activity_status.node_function ";
  $query .= "FROM pi_activity_status ";
  $query .= "LEFT JOIN pi_activity_actor ";
  $query .= "ON pi_activity_actor.inquiry_id = pi_activity_status.inquiry_id ";
  $query .= "AND pi_activity_actor.activity_id = pi_activity_status.activity_id ";
  $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
  $query .= "WHERE pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
  $query .= "AND pi_activity_status.activity_id = '" . $activity_id . "' ";
  $query .= "AND (pi_activity_actor.uid =  '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";
  
  $result = db_fetch_object(db_query($query));

  return $result->node_function;*/

}

function check_node_function_of_activity ($inquiry_id, $activity_id, $uid, $function) {

/**
 * $function can be either add, edit or view.
 * Returns FALSE if that node function for that activity and user is not the specified $function, otherwise it returns TRUE.
 */
 
  $node_function = get_node_function_of_activity ($inquiry_id, $activity_id, $uid);
  
  if ($node_function == $function) {
    $result = TRUE;
  }
  else {
    $result = FALSE;
  };
  
  return $result;
  
}

function set_node_function_of_activity ($inquiry_id, $activity_id, $uid, $function) {

/**
 * $function can be either add, edit or view.
 * Updates the exisitng node_function to the value of $function.
 * This will be set dependent on the audience in pi_activity.
 */
 
 $activity_status = load_activity_status ($inquiry_id, $activity_id, $uid);
 $activity_status->node_function = $function;
 save_activity_status($activity_status);
 
 /*
  $query = "SELECT pi_activity_status.pas_id ";
  $query .= "FROM pi_activity_status ";
  $query .= "LEFT JOIN pi_activity_actor ";
  $query .= "ON pi_activity_actor.inquiry_id = pi_activity_status.inquiry_id ";
  $query .= "AND pi_activity_actor.activity_id = pi_activity_status.activity_id ";
  $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
  $query .= "WHERE pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
  $query .= "AND pi_activity_status.activity_id = '" . $activity_id . "' ";
  $query .= "AND (pi_activity_actor.uid = '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";
  
  $pas_id = db_result(db_query($query));
  
  $query = "UPDATE pi_activity_status ";
  $query .= "SET node_function = '" . $function . "' ";
  $query .= "WHERE pas_id = '" . $pas_id . "'";
  
  db_query($query);*/
  
}

function set_node_function_of_activity_type ($inquiry_id, $activity_type, $uid, $function) {

/**
 * Updates the node function for all of the activities visible to that user of the specified type.
 * This will be set dependent on the audience in pi_activity.
 */

  $query = "SELECT pi_activity_status.pas_id ";
  $query .= "FROM pi_activity_status ";
  $query .= "LEFT JOIN pi_activity ON pi_activity_status.activity_id = pi_activity.activity_id ";
  $query .= "LEFT JOIN pi_activity_actor ";
  $query .= "ON pi_activity_actor.inquiry_id = pi_activity_status.inquiry_id ";
  $query .= "AND pi_activity_actor.activity_id = pi_activity_status.activity_id ";
  $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
  $query .= "WHERE pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
  $query .= "AND pi_activity_status.activity_id = '" . $activity_id . "' ";
  $query .= "AND pi_activity.activity_type = '" . $activity_type . "' ";
  $query .= "AND (pi_activity_actor.uid = '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";
  
  $items = db_query($query);
  
  while ($item = db_fetch_object($items)) {
  
    $query = "UPDATE pi_activity_status ";
    $query .= "SET node_function = '" . $function . "' ";
    $query .= "WHERE pas_id = '" . $item->pas_id . "'";
    
    db_query($query);
  
  };
  
}

// --------------------------------------------------------------------------- 

/**
 * Functions in this block are for adding, deleting and inspecting activities
 */

function load_activity ($activity_id) {

/**
 * Returns the activity_object from pi_activity table.
 */
 
	$query = "SELECT * FROM pi_activity WHERE activity_id = '" . $activity_id . "'";
	$items = db_fetch_object(db_query($query));

	return $items;
}

function save_activity ($activity_array) {

/**
 * This will insert or update depending on whether the activity_id is set in the array and 
 * exists in the pi_activity table. $activity_array is a keyed array comprising:
 * $activity_array->activity_id
 * $activity_array->name
 * $activity_array->description
 * $activity_array->activity_type
 * $activity_array->node_type
 * $activity_array->parameters
 * $activity_array->destination
 * $activity_array->audience
 */
 
	$set = "name = '" . $activity_array["name"] . "' ";
	$set .= ", description = '" . $activity_array["description"] . "' ";
	$set .= ", activity_type = '" . $activity_array["activity_type"] . "' ";
	$set .= ", node_type = '" . $activity_array["node_type"] . "' ";
	$set .= ", parameters = '" . $activity_array["parameters"] . "' ";
	$set .= ", destination = '" . $activity_array["destination"] . "' ";
	$set .= ", audience = '" . $activity_array["audience"] . "' ";
	
	$query = "";
	if ($activity_array["activity_id"] != NULL){
		//update
		$query = "UPDATE pi_activity SET ";
    	$query .= $set;
    	$query .= "WHERE pi_activity.activity_id = '" . $activity_array["activity_id"] . "'";
	}
	else{
		//insert
		$query .= "INSERT INTO pi_activity SET ";
		$query .= $set;
	}
	db_query($query);
}

function delete_activity ($activity_id) {

/**
 * Deletes an activity. Will delete from pi_activity, pi_activity_actor, 
 * pi_activity_status, pi_phase_activity, pi_activity_node 
 * where activity_id field = $activity_id.
 */
	//delete from pi_activity
	$query1 = "DELETE FROM pi_activity WHERE activity_id = '" . $activity_id . "'";
	db_query($query1);
	
	//delete from pi_activity_actor
	$query2 = "DELETE FROM pi_activity_actor WHERE activity_id = '" . $activity_id . "'";
	db_query($query2);
	
	//delete from pi_activity_status
	$query3 = "DELETE FROM pi_activity_status WHERE activity_id = '" . $activity_id . "'";
	db_query($query3);
	
	//delete from pi_phase_activity
	$query4 = "DELETE FROM pi_phase_activity WHERE activity_id = '" . $activity_id . "'";
	db_query($query4);
	
	//delete from pi_activity_node
	$query5 = "DELETE FROM pi_activity_node WHERE activity_id = '" . $activity_id . "'";
	db_query($query5);
}

function load_activity_actor ($inquiry_id, $activity_id = NULL, $uid = NULL, $gid = NULL) {

/**
 * Returns array from pi_activity_actor table.
 */
 
  $query = "SELECT * FROM pi_activity_actor WHERE inquiry_id = '" . $inquiry_id . "'";
  if ($activity_id) {
    $query .= " AND activity_id = '" . $activity_id . "'";
  };
  if ($uid) {
    $query .= " AND uid = '" . $uid . "'";
  };
  if ($gid) {
    $query .= " AND gid = '" . $gid . "'";
  };
  
  $items = db_query($query);
  
  $activities = array();
  
  while ($item = db_fetch_object($items)) {
  
    $activity = array();
    
    $activity["paa_id"] = $item->paa_id;
    $activity["inquiry_id"] = $item->inquiry_id;
    $activity["activity_id"] = $item->activity_id;
    $activity["uid"] = $item->uid;
    $activity["gid"] = $item->gid;
    
    $activities .= $activity;
	
  };

	return $activities;
	
}

function insert_activity_actor ($activity_actor_array) {

/**
 * This will insert. 
 * $activity_actor_array is a keyed array comprising:
 * $activity_actor_array ->inquiry_id
 * $activity_actor_array ->activity_id
 * $activity_actor_array ->uid
 * $activity_actor_array ->gid
 */
 
	$query = "INSET INTO pi_activity_actor SET ";
	$query .= "inquiry_id = '" . $activity_actor_array["inquiry_id"] . "' ";
	$query .= ", activity_id = '" . $activity_actor_array["activity_id"] . "' ";
	$query .= ", uid = '" . $activity_actor_array["uid"] . "' ";
	$query .= ", gid = '" . $activity_actor_array["gid"] . "' ";
	
	db_query($query);

}

function update_activity_actor ($paac_id, $activity_actor_array) {

/**
 * This will update. 
 * $activity_actor_array is a keyed array comprising:
 * $activity_actor_array ->inquiry_id
 * $activity_actor_array ->activity_id
 * $activity_actor_array ->uid
 * $activity_actor_array ->gid
 */
	$query = "UPDATE pi_activity_actor SET ";
	$query .= "inquiry_id = '" . $activity_actor_array["inquiry_id"] . "' ";
	$query .= ", activity_id = '" . $activity_actor_array["activity_id"] . "' ";
	$query .= ", uid = '" . $activity_actor_array["uid"] . "' ";
	$query .= ", gid = '" . $activity_actor_array["gid"] . "' ";
	$query .= "WHERE paac_id = '" . $activity_actor_array["paac_id"] . "'"; 
	
	db_query($query);

}

function load_activity_status ($inquiry_id, $activity_id = NULL, $uid = NULL) {

/**
 * Returns array from pi_activity_status table objects.
 */

  $query = "SELECT pi_activity_status.pas_id FROM pi_activity_status ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_status.gid ";
  $query .= "WHERE inquiry_id = '" . $inquiry_id . "' "; 
  if ($activity_id) {
    $query .= "AND activity_id = '" . $activity_id . "' ";
  };
  if ($uid) {
    $query .= "AND (pi_activity_status.uid = '" . $uid . "' OR og_uid.uid = " . $uid . ") ";
  };
  $query .= "ORDER BY pi_activity_status.pas_id DESC"; 
  
  $items = db_fetch_object(db_query($query));
  
  if ($items->pas_id) {
	$newquery = "SELECT * FROM pi_activity_status WHERE pas_id = " . $items->pas_id . ";";
	$newitems = db_fetch_object(db_query($newquery));
	return $newitems;
 }
 else {
	return 0;
	}
}

function save_activity_status ($activity_status) {

/**
 * $activity_status_array is a keyed array comprising:
 * $activity_status_array ->inquiry_id
 * $activity_status_array ->activity_id
 * $activity_status_array ->uid
 * $activity_status_array ->gid
 * $activity_status_array ->node_function
 * $activity_status_array ->visible_status
 */
	$set = "inquiry_id = '" . $activity_status->inquiry_id . "' ";
	$set .= ", activity_id = '" . $activity_status->activity_id . "' ";
	if ($activity_status->uid) {
		$set .= ", uid = '" . $activity_status->uid . "' ";
	}
	if ($activity_status->gid) {
		$set .= ", gid = '" . $activity_status->gid . "' ";
	}
	$set .= ", node_function = '" . $activity_status->node_function . "' ";
	$set .= ", visible_status = '" . $activity_status->visible_status . "' ";
	
	$query = "";
	if ($activity_status->pas_id != NULL){
		//update
		$query = "UPDATE pi_activity_status SET ";
    	$query .= $set;
    	$query .= "WHERE pi_activity_status.pas_id = '" . $activity_status->pas_id . "'";
	}
	else{
		//insert
		$query .= "INSERT INTO pi_activity_status SET ";
		$query .= $set;
		
	}

	db_query($query);

}

function delete_activity_type_for_user ($activity_type, $user) {

/**
 * Deletes all activities of that type that are visible to the specified user. 
 * Will delete from pi_activity, pi_activity_actor, pi_activity_status, 
 * pi_phase_activity, pi_activity_node where activity_id field = $activity_id. 
 * This will be dependent on the audience in pi_activity.
 */
	//get all activity id's for $activity_type
	$activity_ids = "SELECT * FROM pi_activity WHERE activity_type = '" . $activity_type . "'";
	$results = db_result(db_query($query));
	
	foreach($results as $r){
		$query1 = "DELETE FROM pi_activity WHERE activity_id = '" . $r->activity_id . "'";
		db_query($query1);
		
		//delete from pi_activity_actor
		$query2 = "DELETE FROM pi_activity_actor WHERE activity_id = '" . $r->activity_id . "'";
		db_query($query2);
		
		//delete from pi_activity_status
		$query3 = "DELETE FROM pi_activity_status WHERE activity_id = '" . $r->activity_id . "'";
		db_query($query3);
		
		//delete from pi_phase_activity
		$query4 = "DELETE FROM pi_phase_activity WHERE activity_id = '" . $r->activity_id . "'";
		db_query($query4);
		
		//delete from pi_activity_node
		$query5 = "DELETE FROM pi_activity_node WHERE activity_id = '" . $r->activity_id . "'";
		db_query($query5);
	}

}



// ----------------------------------------------------------------------------------

/**
 * Functions in this block are for loading stages and phases
 */
 
function load_stage ($stage_id) {

/**
 * Returns the stage_object from pi_stage table.
 */
 
	$query = "SELECT * FROM pi_stage WHERE stage_id = '" . $stage_id . "'";

	$items = db_fetch_object(db_query($query));

	return $items;
}

function load_phase ($phase_id) {

/**
 * Returns the phase_object from pi_phase table.
 */
 
	$query = "SELECT * FROM pi_phase WHERE phase_id = '" . $phase_id . "'";
	$items = db_fetch_object(db_query($query));
	
	return $items;
}

// ----------------------------------------------------------------------------------

/**
 * Functions in this block are for groups
 */

function get_group_of_type ($uid, $group_type, $inquiry_id, $stage_id = NULL, $phase_id = NULL, $activity_id = NULL) {

/**
 * Type can be group, class or multiclass.
 * Returns an array of gid values.
 */

  $query = "SELECT pi_group_type.gid FROM pi_group_type ";
  $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_group_type.gid ";
  $query .= "LEFT JOIN pi_grouping_group ON pi_grouping_group.gid = pi_group_type.gid ";
  $query .= "LEFT JOIN pi_inquiry_grouping ON pi_inquiry_grouping.grouping_id = pi_grouping_group.grouping_id ";
  $query .= "WHERE pi_group_type.type = '" . $group_type . "' ";
  $query .= "AND og_uid.uid =  '" . $uid . "' ";
  $query .= "AND (pi_inquiry_grouping.inquiry_id =  '" . $inquiry_id . "' OR pi_inquiry_grouping.inquiry_id IS NULL) ";
  $query .= "AND (pi_inquiry_grouping.stage_id =  '" . $stage_id . "' OR pi_inquiry_grouping.stage_id IS NULL) ";
  $query .= "AND (pi_inquiry_grouping.phase_id =  '" . $phase_id . "' OR pi_inquiry_grouping.phase_id IS NULL) ";
  $query .= "AND (pi_inquiry_grouping.activity_id =  '" . $activity_id . "' OR pi_inquiry_grouping.activity_id IS NULL) ";
	
	$result = db_result(db_query($query));
	return $result;

}

function get_members_of_group ($gid) {

/**
 * Returns an array containing the uids for the members of the group. 
 * The group could be a group, class or multiclass.
 */

  $query = "SELECT uid FROM og_uid ";
  $query .= "WHERE nid = '" . $gid . "'";
	
	$result = db_result(db_query($query));
	return $result;

}

function check_member_of_group ($gid, $uid) {

/**
 * Returns TRUE or FALSE depending on whether user is member of group.
 */

  $members = get_members_of_group ($gid);
  
  if ($members == NULL) {
    $result = NULL;
  }
  elseif (in_array($uid, $members)) {
    $result = TRUE;
	}
	else {
		$result = FALSE;
	};
  
  return $result;
  
}

function get_groups_from_grouping ($grouping_id) {

/**
 * Returns an array containing the gids for the groups of a grouping.
 */
 
	$query = "SELECT pi_grouping_group.gid FROM pi_grouping_group ";
	$query .= "WHERE pi_grouping_group.grouping_id = '" . $grouping_id ."'";
	
	$result = db_result(db_query($query));
	return $result;

}

function get_groups_of_user ($uid) {

/**
 * Returns all groups (student group, class, etc.) of which the user is a member.
 */

  $query = "SELECT nid FROM og_uid ";
  $query .= "WHERE uid = '" . $uid . "'";
	
	$result = db_result(db_query($query));
	return $result;

}

function get_grouping ($inquiry_id, $stage_id = NULL, $phase_id = NULL, $activity_id = NULL) {

/**
 * Returns a grouping_id.
 */
	$query = "SELECT pi_inquiry_grouping.grouping_id FROM pi_inquiry_grouping ";
	$query .= "WHERE pi_inquiry_grouping.inquiry_id = '" . $inquiry_id . "' ";
	if($stage_id != NULL){
		$query .= "AND pi_inquiry_grouping.stage_id ='" . $stage_id . "' ";
	}
	if($phase_id != NULL){
		$query .= "AND pi_inquiry_grouping.phase_id ='" . $phase_id . "' ";
	}
	if($activity_id != NULL){
		$query .= "AND pi_inquiry_grouping.activity_id ='" . $activity_id . "' ";
	}
	
	$result = db_result(db_query($query));
	return $result;
}

function add_grouping ($name, $description, $inquiry_id, $stage_id = NULL, $phase_id = NULL, $activity_id = NULL) {

/**
 * Returns the created grouping_id.
 */
	//insert pi_grouping
	$query1 = "INSERT INTO pi_grouping ";
	$query1 .= "SET name = '" . $name . "' ";
	$query1 .= ", description = '" . $description . "' ";
	db_query($query1);
	
	//grouping_id from abouve query is
	$query2 = "SELECT MAX(pi_grouping.grouping_id) FROM pi_grouping";
	$grouping_id = db_result(db_query($query2));
	
	//insert pi_grouping_group
	$query3 = "INSET INTO pi_inquiry_grouping ";
	$query3 .= "SET inquiry_id = '" . $inquiry_id . "' ";
	if($stage_id != NULL){
	  	$query3 .= ", stage_id = '" . $stage_id . "' ";
	}
	if($phase_id != NULL){
  		$query3 .= ", phase_id = '" . $phase_id . "' ";
	}
	if($activity_id != NULL){
  		$query3 .= ", activity_id = '" . $activity_id . "' ";
	}
	$query3 .= ", grouping_id = '" . $grouping_id . "' ";
	db_query($query3);

}

function add_group_to_grouping ($grouping_id, $gid) {

/**
 * adds a group to a grouping
 */
 
	$query = "INSERT INTO pi_grouping_group SET grouping_id = '" . $grouping_id . "', gid = '" . $gid . "'";
	db_query($query);

}

function add_group ($name, $uid_array, $parent_gid = NULL) {

/**
 * Returns the created gid.
 */

	$query = "SELECT MAX(og.nid) FROM og";
	$nid = db_result(db_query($query));

	$query = "INSERT INTO og SET ";
  $query .= "nid = '" . $nid . "', ";
  $query .= "selective = '0', ";
  $query .= "description = '" . $name . "', ";
  $query .= "theme = NULL, ";
  $query .= "register = '0', ";
  $query .= "directory = '1', ";
  $query .= "language = NULL, ";
  $query .= "private = '0'";
	db_query($query);

  // add admin user as active admin user
  $query = "INSERT INTO og_uid SET ";
  $query .= "nid = '" . $nid . "', ";
  $query .= "og_role = '0', ";
  $query .= "is_active = '1', ";
  $query .= "is_admin = '1', ";
  $query .= "uid = '1', ";
  $query .= "created = NOW(), ";
  $query .= "changed = NOW()";
	db_query($query);

  // add users as active users
  foreach ($uid_array as $uid) {
    $query = "INSERT INTO og_uid SET ";
    $query .= "og_role = '0', ";
    $query .= "is_active = '1', ";
    $query .= "is_admin = '0', ";
    $query .= "uid = '" . $uid . "', ";
    $query .= "created = NOW(), ";
    $query .= "changed = NOW()";
  	db_query($query);
  };

  // tdc5 - not too sure about this next bit - looks dodgy??
  $query = "INSERT INTO pi_group_hierarchy SET ";
  $query .= "gid = '" . $nid . "', ";
  if ($parent_gid == NULL) {
    $query .= "parent_gid = NULL";
  }
  else {
    $query .= "parent_gid = '" . $parent_gid . "'";
  };
	db_query($query);
  
  return $nid;
  
}

// --------------------------------------------------------------------------------------

/**
 * Functions in this block are interface where am I stuff
 */

function get_phases_of_inquiry_and_user ($inquiry_id, $uid) {

/**
 * Returns an array containing the phase_ids of the inquiry for that user. The phases are ordered by position.
 */
	$query = "SELECT DISTINCT pi_inquiry_phase.phase_id ";
	$query .= "FROM pi_inquiry_phase ";
	$query .= "LEFT JOIN pi_phase_actor ON pi_phase_actor.phase_id = pi_inquiry_phase.phase_id ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_phase_actor.gid ";
	$query .= "WHERE pi_phase_actor.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND (pi_phase_actor.uid =  '" . $uid. "' OR og_uid.uid =  '" . $uid . "') ";
	$query .= "ORDER BY pi_inquiry_phase.position";
 
	$result =  db_query($query);
	return $result;

}

function get_stages_of_inquiry_and_user ($inquiry_id, $uid) {

/**
 * Returns an array containing the stage_ids of the inquiry for that user. 
 * The stages are ordered by position.
 */
	$query = "SELECT DISTINCT pi_inquiry_stage.stage_id ";
	$query .= "FROM pi_inquiry_stage ";
	$query .= "LEFT JOIN pi_stage_actor ON pi_stage_actor.stage_id = pi_inquiry_stage.stage_id ";
	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_stage_actor.gid ";
	$query .= "WHERE (pi_stage_actor.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND pi_stage_actor.uid =  '" . $uid. "') ";
	$query .= "OR (pi_stage_actor.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND og_uid.uid =  '" . $uid . "') ";
	$query .= "ORDER BY pi_inquiry_stage.position";

	$result = db_query($query);

	return $result;

}


function get_activities_of_stage_phase_and_user ($inquiry_id, $stage_id, $phase_id, $uid) {

/**
 * Returns an array containing the activities of the phase in that stage for that user. 
 * The activities are ordered by position.
 */
	//get the phases and stages for this inquiry and user
	if (is_null($phase_id)) {
		$db_phases = get_phases_of_inquiry_and_user ($inquiry_id, $uid);
		$phases = array();
		while ($db_phase = db_fetch_object($db_phases)) {
			$phases[] = $db_phase->phase_id;
		}
	}
	else {
		$phases = array($phase_id);
	}
	/*
	if (is_null($stage_id)) {
		$db_stages = get_stages_of_inquiry_and_user ($inquiry_id, $uid);
		$stages = array();
		while ($db_stage = db_fetch_object($db_stages)) {
			$stages[] = $db_stage->stage_id;
		}
	}
	else {
		$stages = array($stage_id);
	}*/
	
	$temp = array();
	
	if (is_null($stage_id)) {
		foreach($phases as $p){
			$query = "SELECT pi_stage_phase.psp_id FROM pi_stage_phase ";
			$query .= "WHERE pi_stage_phase.phase_id = '" . $p . "'";
			$query_results = db_query($query);
			while ($query_result = db_fetch_object($query_results)) {
				$temp[] = $query_result->psp_id;
			}
		}
	}
	else {
		foreach($phases as $p){
			$query = "SELECT pi_stage_phase.psp_id FROM pi_stage_phase ";
			$query .= "WHERE pi_stage_phase.stage_id = '" . $stage_id . "' AND ";
			$query .= "pi_stage_phase.phase_id = '" . $p . "'";
			$temp[] = db_result(db_query($query));
		}
	}
	
	//for each of these stages nd phases get the pi_stage_phase psp_id and put it in an array
	/*$temp = array();
	
	foreach($phases as $p){
		foreach($stages as $s){
			$query = "SELECT pi_stage_phase.psp_id FROM pi_stage_phase ";
			$query .= "WHERE pi_stage_phase.stage_id = '" . $s . "' AND ";
			$query .= "pi_stage_phase.phase_id = '" . $p . "'";
			$temp[] = db_result(db_query($query));
		}
	}*/
	
	//for each of these psp_id's add the activity_id from pi_stage_phase_activity
	$activities = array();
	foreach($temp as $t){
	/*
		$query2 = "SELECT * FROM pi_stage_phase_activity ";
		$query2 .= "WHERE pi_stage_phase_activity.psp_id = '" . $t . "'";*/
		
		$query2 = "SELECT * FROM pi_stage_phase_activity ";
		$query2 .= "LEFT JOIN pi_activity ON pi_stage_phase_activity.activity_id = pi_activity.activity_id ";
		$query2 .= "LEFT JOIN pi_activity_actor ON pi_activity.activity_id = pi_activity_actor.activity_id ";
		$query2 .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
		$query2 .= "WHERE pi_stage_phase_activity.psp_id = '" . $t . "' ";
		$query2 .= "AND (og_uid.uid = '" . $uid . "' OR pi_activity_actor.uid = '" . $uid . "') ";
		
		//activities are ordered in the array by the position
		$answer2 = db_query($query2);
		while ($result2 = db_fetch_object($answer2)) {
			//added in the phase to help with interface listing
			$phase_of_activity = db_fetch_object(db_query("SELECT pi_stage_phase.phase_id  FROM pi_stage_phase, pi_stage_phase_activity WHERE pi_stage_phase_activity.activity_id = %d AND pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id", $result2->activity_id));
			$result2->phase_id = $phase_of_activity->phase_id;
			//added in the visible status to help with interface listing
			$loaded_activity_status = load_activity_status ($inquiry_id, $result2->activity_id, $uid);
			load_activity_status($result2->activity_id);
			$result2->visible_status = $loaded_activity_status->visible_status;
			$activities[] = $result2;
		}
	}
	
	return get_unique_activities($activities);
	//return array_unique($activities);
}

//helper function to filter out duplicate activities
function get_unique_activities($activities){
	$unique = array();
	$temp = array();
	foreach($activities as $activity){
		$activity_id = $activity->activity_id;
		if(!(in_array($activity_id,$temp))){
			$temp[] = $activity_id;
			$unique[] = $activity;
		}
	}
	return $unique;
}

function get_current_stage_of_inquiry_and_user ($inquiry_id, $uid) {

/**
 * Returns current stage_id
 */
	
  // user's current stage
	$query = "SELECT pi_current_stage.stage_id, pi_current_stage.pcs_id ";
	$query .= "FROM pi_current_stage ";
	$query .= "WHERE pi_current_stage.inquiry_id = '" . $inquiry_id . "' ";
	$query .= "AND pi_current_stage.uid =  " . $uid. " ";
 
	$result = db_fetch_object(db_query($query));

  //user's group's current stage
  if (isset($result) AND ($result == NULL)) {
    $query = "SELECT pi_current_stage.stage_id, pi_current_stage.pcs_id ";
  	$query .= "FROM pi_current_stage ";
  	$query .= "LEFT JOIN og_uid ON og_uid.nid = pi_current_stage.gid ";
  	$query .= "WHERE pi_current_stage.inquiry_id = '" . $inquiry_id . "' ";
  	$query .= "AND og_uid.uid =  " . $uid . " ";
  
  	$result = db_fetch_object(db_query($query));
  };
  
  return $result;
  
}

function get_phases_of_stage ($inquiry_id, $stage_id) {

/**
 * Returns array containing phase_id list. 
 * Uses pi_inquiry_stage and pi_stage_phase to indentify the phases.
 */
	$query = "SELECT pi_stage_phase.phase_id FROM pi_stage_phase ";
	$query .= "LEFT JOIN pi_inquiry_phase ON pi_inquiry_phase.phase_id = pi_stage_phase.phase_id ";
	$query .= "WHERE pi_inquiry_phase.inquiry_id = '" . $inquiry_id ."' ";
	$query .= "AND pi_stage_phase.stage_id = '" . $stage_id . "'";

	$result = db_query($query);

	return $result;

}

function get_stages_of_phase($inquiry_id, $phase_id) {

/**
 * Returns array containing stage_id list. 
 * Uses pi_inquiry_phase and pi_stage_phase to indentify the stages.
 */
 
	$query = "SELECT pi_stage_phase.stage_id FROM pi_stage_phase ";
	$query .= "LEFT JOIN pi_inquiry_stage ON pi_inquiry_stage.stage_id = pi_stage_phase.stage_id ";
	$query .= "WHERE pi_inquiry_phase.inquiry_id = '" . $inquiry_id ."' ";
	$query .= "AND pi_stage_phase.phase_id = '" . $phase_id . "'";

	$result = db_result(db_query($query));
	return $result;

}

function previous_activity_for_stage_phase_and_uid ($inquiry_id, $stage_id, $phase_id, $uid) {

/**
 * By previous we mean the started activity with the largest postion value.
 * Returns the started activity in the phase visible to that user with the 
 * largest position value in the phase.
 */

	$query = "SELECT pi_activity_node.nid FROM pi_activity_node ";
	$query .= "LEFT JOIN pi_stage_phase_activity ";
	$query .= "ON pi_stage_phase_activity.activity_id = pi_activity_node.nid ";
	$query .= "LEFT JOIN pi_stage_phase ";
	$query .= "ON pi_stage_phase.psp_id = pi_stage_phase_activity.psp_id ";
	$query .= "LEFT JOIN pi_activity_actor ";
	$query .= "ON (pi_activity_actor.inquiry_id = pi_activity_node.inquiry_id ";
	$query .= "AND pi_activity_actor.activity_id = pi_activity_node.activity_id) ";
	$query .= "LEFT JOIN pi_activity_status ";
	$query .= "ON (pi_activity_status.inquiry_id = pi_activity_node.inquiry_id ";
	$query .= "AND pi_activity_status.activity_id = pi_activity_node.activity_id) ";
  $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	$query .= "WHERE pi_activity_node.inquiry_id = '" . $inquiry_id ."' ";
	$query .= "AND pi_stage_phase.stage_id = '" . $stage_id . "' ";
	$query .= "AND pi_stage_phase.phase_id = '" . $phase_id . "' ";
	$query .= "AND (pi_activity_actor.uid = '" . $uid . "' ";
	$query .= "OR og_uid.uid = '" . $uid . "') ";
	$query .= "AND (pi_activity_status.visible_status = 'in_progress' ";
	$query .= "OR pi_activity_status.visible_status = 'view') ";
	$query .= "ORDER BY pi_stage_phase_activity.position DESC LIMIT 1)";

	$result = db_result(db_query($query));
	return $result;

}

function next_activity_for_stage_phase_and_uid ($inquiry_id, $stage_id, $phase_id, $uid) {

/**
 * By next we mean the startable activity with the smallest postion value.
 * Returns the not started activity in the phase visible to that user with 
 * the smallest position value in the phase.
 */

	$query = "SELECT pi_activity_node.nid FROM pi_activity_node ";
	$query .= "LEFT JOIN pi_stage_phase_activity ";
	$query .= "ON pi_stage_phase_activity.activity_id = pi_activity_node.nid ";
	$query .= "LEFT JOIN pi_stage_phase ";
	$query .= "ON pi_stage_phase.psp_id = pi_stage_phase_activity.psp_id ";
	$query .= "LEFT JOIN pi_activity_actor ";
	$query .= "ON (pi_activity_actor.inquiry_id = pi_activity_node.inquiry_id ";
	$query .= "AND pi_activity_actor.activity_id = pi_activity_node.activity_id) ";
	$query .= "LEFT JOIN pi_activity_status ";
	$query .= "ON (pi_activity_status.inquiry_id = pi_activity_node.inquiry_id ";
	$query .= "AND pi_activity_status.activity_id = pi_activity_node.activity_id) ";
  $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	$query .= "WHERE pi_activity_node.inquiry_id = '" . $inquiry_id ."' ";
	$query .= "AND pi_stage_phase.stage_id = '" . $stage_id . "' ";
	$query .= "AND pi_stage_phase.phase_id = '" . $phase_id . "' ";
	$query .= "AND (pi_activity_actor.uid = '" . $uid . "' ";
	$query .= "OR og_uid.uid = '" . $uid . "') ";
	$query .= "AND pi_activity_status.visible_status = 'start' ";
	$query .= "ORDER BY pi_stage_phase_activity.position ASC LIMIT 1)";

	$result = db_result(db_query($query));
	return $result;

}


