<?php
// $Id: pi_sort_data.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

function pi_sort_data_node_info() {
    return array(
	    'pi_sort_data' => array(
	    'name' => t('Data sort data'), // Required.
	    'module' => 'pi_sort_data',  // Required.
	    'description' => t('Data sort'), // Required.
	    'has_title' => TRUE,
	    'title_label' => t(''),
	    'has_body' => TRUE,
	    'body_label' => t('Sort of collected data'),
	    'locked' => TRUE,
	    'add_node_type' => 'pi_data')
    );

}

function pi_sort_data_perm() {
}

function pi_sort_data_access($op, $node) {
    global $user;
    $details = get_inquiry_details_from_current_path();

    if ($op == 'create') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
    }

    if ($op == 'update') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    }
}


/**
 * Implementation of hook_theme().
 */
function pi_sort_data_theme() {
    return array(
    'pi_sort_data_node_form' => array(
    'arguments' => array('form'),
    ),
    'pi_sort_data' => array(
    'arguments' => array('node','teaser'),
    ),
    );
}


/**
 * hook_form() for pi_sort_data which provides draggable sorting for pi_data nodes in an inquiry
 * @param $node the pi_sort_data node if it is to be edited, as per drupal 6 API
 */
function pi_sort_data_form(&$node) {
	global $user;
	$node_details = get_inquiry_details_from_current_path();
  	if (is_numeric($node_details->activity_id))
  	{
  		$current_activity = load_activity($node_details->activity_id);
  	}
  	
  	if ($current_activity->name)
  	{
  		$users_group = get_group_of_type($user->uid, $current_activity->audience, 
  		$node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id); 
  		if($users_group!=false)
  		{
  			$group = node_load($users_group);
  			$sort_for = $group->title;
		}
  		else
  		{
  			$sort_for = $user->name;
  		}
  		$node_title = check_plain(t('Data for ') . $sort_for);
  		drupal_set_title($node_title);
  	}
  	else
  	{
  		$type = node_get_types('type', $node);
  		$node_title = $type->name;
  	}
  	
  	// Build the form
    $form = array();

    $form['title'] = array (
        '#type' => 'hidden',
        '#value' => $node_title,
    );
		
    // onepageprofile_categories and tree used for draggable menu items
    $form['onepageprofile_categories'] = array(
        '#tree'   => TRUE,
    );

    // Add the categories of existing nodes and the options list for new nodes
    if(isset($node->nid)) {
        $node_categories = $node->categories;
    }
    else {
        $node_categories = array();
    }
		
		$option_categories = pi_sort_data_get_options();

		foreach ($option_categories as $key => $category) {
			$categories[$key]['#title'] = $category['#title'];
			
			//get weight direct from navigation order in case it has changed
			$data_activity_id = get_activity_id_for_nid($key);
			$data_phase_id = get_phase_id_for_activity_id($data_activity_id);
			$pos_result = db_result(db_query("SELECT pi_stage_phase_activity.position FROM pi_stage_phase_activity, pi_stage_phase WHERE pi_stage_phase.phase_id = '" . $data_phase_id . "' AND pi_stage_phase.psp_id = pi_stage_phase_activity.psp_id AND pi_stage_phase_activity.activity_id = '" . $data_activity_id . "' LIMIT 1"));
			
			$categories[$key]['#weight'] = $pos_result;//$node_categories[$key]['#weight'];
		}
		
		if(count($categories) > 2) {
			uasort($categories, "my_weight_compare");
		}
		
    // set $tree to point to the above $form['onepageprofile_categories'] object
    $tree = &$form['onepageprofile_categories'];
    
    if (count($categories) < 1) {
    	return;
    }
    
    foreach ($categories as $key => $category) {

        $measure = node_load($key);
        $new_title = $category['#title'];
        if (strlen($category['#title']) > 3) {
					if (substr($category['#title'], 0, 3) == 'D: ') {
						$new_title = substr($category['#title'], 3);
					}
				}
        // add $tree entries for current category (i.e. $key)
        $tree[$key]['title'] = array(
            '#value' => t($new_title),
        );

        $tree[$key]['weight'] = array(
            '#type'          => 'weight',
            '#delta'         => max(10, count($categories)),
            '#default_value' => $node_categories[$key]['#weight'],
        );

    }
    
    return $form;
}

function pi_sort_data_insert($node) {
	$details  = get_inquiry_details_from_current_path();
    while ($measure = current($node->onepageprofile_categories)) {

        db_query("INSERT INTO pi_sort_data (nid, vid, data, weight) VALUES ('" . $node->nid . "', '" . $node->vid . "', '" . key($node->onepageprofile_categories) . "', '" . $measure['weight'] . "')");
        
        update_activity_weight_from_node(key($node->onepageprofile_categories), $measure['weight'], $details);

        next($node->onepageprofile_categories);
    }
    reset($node->onepageprofile_categories);
}

function pi_sort_data_update($node) {
// if this is a new node or we're adding a new revision,
    if ($node->revision) {
        pi_sort_data_insert($node);
    }
    else {
        db_query("DELETE FROM pi_sort_data WHERE vid = '" . $node->vid . "' ");
        pi_sort_data_insert($node);
    }
}

function pi_sort_data_delete(&$node) {
    db_query("DELETE FROM pi_sort_data WHERE nid = '" . $node->nid . "' ");
}


function pi_sort_data_load($node) {
    $result = new stdClass;
    $result->categories = pi_sort_data_get_choice($node);
    return $result;
}


function pi_sort_data_view($node, $teaser, $page = FALSE) {
        $node = node_prepare($node, $teaser);

        $node->content['pi_sort_data'] = array(
            '#value' => theme('pi_sort_data', $node, $teaser),
            '#weight' => 2
        );

    return $node;
}

function theme_pi_sort_data($node,$teaser) {

	global $user;
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
  	if (is_numeric($details->activity_id)) {
  		$current_activity = load_activity($details->activity_id);
  	}
  	
  	if ($current_activity->name) {
  		drupal_set_title(t($current_activity->name));
  	}
  	
    $output = "";
    
    
    // Add the categories of existing nodes and the options list for new nodes
    if(isset($node->nid)) {
        $node_categories = $node->categories;
    }
    else {
        $node_categories = array();
    }
		
		$option_categories = pi_sort_data_get_options();

		foreach ($option_categories as $key => $category) {
			$categories[$key]['#title'] = $category['#title'];
			
			//get weight direct from navigation order in case it has changed
			$data_activity_id = get_activity_id_for_nid($key);
			$data_phase_id = get_phase_id_for_activity_id($data_activity_id);
			$pos_result = db_result(db_query("SELECT pi_stage_phase_activity.position FROM pi_stage_phase_activity, pi_stage_phase WHERE pi_stage_phase.phase_id = '" . $data_phase_id . "' AND pi_stage_phase.psp_id = pi_stage_phase_activity.psp_id AND pi_stage_phase_activity.activity_id = '" . $data_activity_id . "' LIMIT 1"));
			
			$categories[$key]['#weight'] = $pos_result;//$node_categories[$key]['#weight'];
		}
		
		if(count($categories) > 2) {
			uasort($categories, "my_weight_compare");
		}


/*    if ($current_activity->description) {
    	$output  .= '<p>' . t($current_activity->description) . '</p>';
    }
    else {
    	$output  .= '<p>' . t('Order your key questions.') . '</p>';
    }*/

    $header = array(
        t("Data")
    );

    $rows = array();
    
    

    if (is_array($categories)) {
    	foreach($categories as $key => $category) {
            $row_activity_id = get_activity_id_for_nid($key);
			if ($row_activity_id) {
		        $row = array();
		        //$row[] = build_activity_link($details->inquiry_id, $details->stage_id, $details->phase_id, $row_activity_id, $uid);
		        //$rows[] = array('data' => $row);
		        
		        $loaded_activity = load_activity($row_activity_id);
		        $loaded_node = node_load($key);
		        //$rows[] = pi_activity_teaser($loaded_node, $loaded_activity, 'view');
		        $activity_link = build_activity_link($details->inquiry_id, $details->stage_id, $details->phase_id, $row_activity_id, $uid);
		        $activity_teaser = pi_activity_teaser($loaded_node, $loaded_activity, 'view');
		        
		        $rows[] = $activity_link['data'] . $activity_teaser;
            };
        }
    }
		
		if(count($rows) > 0) {
    		$output .= '<div><strong>You have collected this data:</strong></div>';
    		$output .= theme('item_list', $rows, NULL, 'ol', array('style' => 'list-style-type:none'));

				//$output .= theme('table', $header, $rows);
		}
		else {
			$output .= 'No data entries are available';
		}
    return $output;
}



/**
 * Theme admin settings form
 */
function theme_pi_sort_data_node_form($form) {
	global $user;
	$uid = $user->uid;
		$details = get_inquiry_details_from_current_path();
  	if (is_numeric($details->activity_id)) {
  		$current_activity = load_activity($details->activity_id);
  	}
  	
  	if ($current_activity->name) {
  		drupal_set_title(t($current_activity->name));
  	}
	
    drupal_add_tabledrag('onepageprofile-categories', 'order', 'sibling', 'onepageprofile-element');

    // Header
    $header = array(
        t('Data'),
        t('Weight')
    );

    // Rows for the tabledrag
    $rows = array();

    $tree = &$form['onepageprofile_categories'];
    foreach (element_children($tree) as $key) {
        $tree[$key]['weight']['#attributes']['class'] = 'onepageprofile-element';
				
        $row = array();
        $row[] = drupal_render($tree[$key]['title']);
        $row[] = drupal_render($tree[$key]['weight']);

        $rows[] = array('data' => $row, 'class' => 'draggable');
    }

    // Build the output
    if ($current_activity->description) {
    	$output  .= '<p>' . t($current_activity->description) . '</p>';
    }
    else {
    	$output  .= '<p>' . t('Order your data.') . '</p>';
    }
    
    if (count($rows) > 0) {
    	$output .= theme('table', $header, $rows, array('id' => 'onepageprofile-categories'));
   		$output .= drupal_render($form);
		}
		else {
   		$output .= "<p>No data is available.</p>";
   	}
    return $output;
}

/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_sort_data_get_choice($node) {

    global $user;
    $categories = array();

    $result = db_query("SELECT * FROM pi_sort_data WHERE pi_sort_data.nid = '" . $node->nid . "' AND pi_sort_data.vid = '" . $node->vid . "'");

    while ($row = db_fetch_object($result)) {
       	$activity_id = get_activity_id_for_nid($row->data);
    		$activity = load_activity($activity_id);
        $categories[$row->data] = array(
            '#weight' => $row->weight,
            '#title'  => t($activity->name)
        );
    }

    uasort($categories, "my_weight_compare");

    return $categories;
}


/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_sort_data_get_options() {
    global $user;
    $details = get_inquiry_details_from_current_path();
    $categories = array();

    $result = db_query("SELECT DISTINCT node.nid FROM node LEFT JOIN node_access ON node.nid = node_access.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid LEFT JOIN pi_activity_node ON pi_activity_node.nid =  node.nid WHERE TYPE = 'pi_data' AND STATUS = '1' AND (node_access.realm =  'all' OR og_uid.uid =  '" . $user->uid . "') AND pi_activity_node.inquiry_id = '" . $details->inquiry_id . "' ORDER BY nid ASC");

    while ($row = db_fetch_object($result)) {
    	$activity_id = get_activity_id_for_nid($row->nid);
    	$activity = load_activity($activity_id);
			$categories[$row->nid] = array(
				'#weight' => 1,
				'#title'  => t($activity->name)
			);
    }
    return $categories;
}
