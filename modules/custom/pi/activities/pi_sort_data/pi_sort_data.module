<?php
// $Id: pi_sort_data.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

function pi_sort_data_node_info() {
	return array(
	    'pi_sort_data' => array(
		    'name' => t('Data sort data'), // Required.
		    'module' => 'pi_sort_data',  // Required.
		    'description' => t('Data sort'), // Required.
		    'has_title' => FALSE,
		    'title_label' => t('Sorted data'),
		    'has_body' => TRUE,
		    'body_label' => t('Sort of collected data'),
		    'locked' => TRUE,
		    'add_node_type' => 'pi_data'
		)
	);

}

function pi_sort_data_perm() {
}

function pi_sort_data_access($op, $node) {
	global $user;
	$details = get_inquiry_details_from_current_path();

	if ($op == 'create') {
		return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
	}

	if ($op == 'update') {
		return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
	}
}


/**
 * Implementation of hook_theme().
 */
function pi_sort_data_theme() {
	return array(
	    'pi_sort_data_node_form' => array(
	    	'arguments' => array('form'),
		),
	    'pi_sort_data' => array(
	   		'arguments' => array('node', 'teaser', 'data_items_to_show'),
		),
	);
}


/**
 * hook_form() for pi_sort_data which provides draggable sorting for pi_data nodes in an inquiry
 * @param $node the pi_sort_data node if it is to be edited, as per drupal 6 API
 */
function pi_sort_data_form(&$node) {
	global $user;
	$node_details = get_inquiry_details_from_current_path();
	
	$current_activity = NULL;	
	if (is_numeric($node_details->activity_id))
	{
		$current_activity = load_activity($node_details->activity_id);
	}
	 
	if ($current_activity->name)
	{
		$users_group = get_group_of_type($user->uid, $current_activity->audience,
					$node_details->inquiry_id, $node_details->stage_id, 
					$node_details->phase_id, $node_details->activity_id);
		if($users_group!=false)
		{
			$group = node_load($users_group);
			$sort_for = $group->title;
		}
		else
		{
			$sort_for = $user->name;
		}
		$node_title = check_plain(t('Data for ') . $sort_for);
	}
	else
	{
		$type = node_get_types('type', $node);
		$node_title = $type->name;
	}
	 
	// Build the form
	$form = array();
	if($current_activity->description)
	{
		$form['#prefix'] = $current_activity->description;
	}
		
	$form['title'] = array (
        '#type' => 'hidden',
        '#value' => $node_title,
	);

	// onepageprofile_categories and tree used for draggable menu items
	$form['onepageprofile_categories'] = array(
        '#tree'   => TRUE,
	);

	// Add the sorted data for this node and the unsorted ones to the end
	if(isset($node->nid))
	{
		$sorted_collected_data = $node->categories;
	}
	else
	{
		$sorted_collected_data = array();
	}

	$all_collected_data = pi_sort_data_get_options();
	
	$data_to_show = pi_merge_content_item_lists($sorted_collected_data, $all_collected_data);
	
	// set $tree to point to the above $form['onepageprofile_categories'] object
	$tree = &$form['onepageprofile_categories'];
	foreach($data_to_show as $data_nid => $data_item)
	{
		// if data item doesn't exist anymore, the don't add it to the form!
		$data_item_node = node_load($data_nid);
		if($data_item_node)
		{
			$new_title = $data_item['#title'];
			if (strlen($data_item['#title']) > 3)
			{
				if (substr($data_item['#title'], 0, 3) == 'D: ')
				{
					$new_title = substr(trim($data_item['#title']), 3);
				}
			}
			// add $tree entries for current category (i.e. $key)
			$tree[$data_nid]['title'] = array(
	            '#value' => check_plain($new_title),
			);
			
			$tree[$data_nid]['description'] = array(
				'#value' => node_view($data_item_node, TRUE, TRUE),
			);
			
			$tree[$data_nid]['weight'] = array(
	            '#type'          => 'weight',
	            '#delta'         =>count($data_to_show),
	            '#default_value' => $data_to_show[$data_nid]['#weight'],
			);
		}
	}
	return $form;
}

function pi_sort_data_insert($node) {
	foreach($node->onepageprofile_categories as $key => $measure)
	{
		db_query("INSERT INTO pi_sort_data (nid, vid, data, weight) VALUES (%d, %d, '%s', %d)",
			$node->nid, $node->vid, $key, $measure['weight']);
		pi_activity_update_weight_from_node($key, $measure['weight']);
	}
}

function pi_sort_data_update($node) {
	// if this is a new node or we're adding a new revision,
	if ($node->revision)
	{
		pi_sort_data_insert($node);
	}
	else
	{
		db_query("DELETE FROM pi_sort_data WHERE vid = %d", $node->vid);
		pi_sort_data_insert($node);
	}
}

function pi_sort_data_delete(&$node) {
	db_query("DELETE FROM pi_sort_data WHERE nid = %d", $node->nid);
}


function pi_sort_data_load($node) {
	$result = new stdClass;
	$result->categories = pi_sort_data_get_choice($node);
	return $result;
}


function pi_sort_data_view($node, $teaser, $page = FALSE) {
	global $user;
	$node_details = get_inquiry_details_from_current_path();
	
	$node = node_prepare($node, $teaser);
	
	if (is_numeric($node_details->activity_id))
	{
		$current_activity = load_activity($node_details->activity_id);
		if ($current_activity->name)
		{
			drupal_set_title(check_plain($current_activity->name));
		}
	}
	
	// Assemble an array of key questions in the output format (build_activity_link makes this a link with icon)
	$already_sorted_data_items = $node->categories;
	$unsorted_data_items = pi_sort_data_get_options();
    $sorted_data_items = pi_merge_content_item_lists($already_sorted_data_items, $unsorted_data_items);
	$data_items_to_show = array();
	foreach(array_keys($sorted_data_items) as $sorted_data_items_nid)
	{
		$data_item_activity_id = get_activity_id_for_nid($sorted_data_items_nid);
		if ($data_item_activity_id)
		{
			$data_item_node = node_load($sorted_data_items_nid);
			$data_item_activity = pi_activity_load($data_item_activity_id);
			$activity_link = build_activity_link($node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $data_item_activity_id, $user->uid);
			$activity_teaser = pi_activity_teaser($data_item_node, $data_item_activity, 'view');
			$data_items_to_show[] = array(
				'title' => $activity_link['data'],
				'description' => $activity_teaser			
			);
		}
	}
	
	if($teaser && count($data_items_to_show)>0)
	{
		//Link to add a new key question
		//cannot get activity id from $node_details when viewing a list of activity teasers
		$activity_id_for_this_node = get_activity_id_for_nid($node->nid);
		$link_output = make_add_activity_link($node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $activity_id_for_this_node, $user->uid);
		$node->content['pi_sort_data_add_link'] =  array(
            '#value' =>$link_output,
            '#weight' => -3
		);
	}	
	
	
	
	
	$node->content['pi_sort_data'] = array(
            '#value' => theme('pi_sort_data', $node, $teaser, $data_items_to_show),
            '#weight' => 2
	);

	return $node;
}

function theme_pi_sort_data($node, $teaser, $data_items_to_show) {
	global $user;
	 
	$output = '';

	$header = array(
		t("Data")
	);

	$rows = array();
	if (is_array($data_items_to_show))
	{
		foreach($data_items_to_show as $data_item)
		{
			$title_for_row = $data_item['title'];
			$description_for_row =  str_replace(
				array('<div', '</div', 'class="submitted"'), 
				array('<span', '</span', 'class="submitted" style="display:none"'),  
				$data_item['description']);
			
			$rows[] =	'<div style="padding-left:40px; text-indent: -40px;margin-bottom:6px;"><span style="font-size:115%;font-weight:bold;padding-right:10px;">' . $title_for_row . '</span>' .
							'<span>' . $description_for_row . '</span>' .
						'</div>';
		}
	}

	if(count($rows) > 0)
	{
		$output .= '<h3>You have collected this data:</h3>';
		$output .= theme('item_list', $rows, NULL, 'ul', array('style' => 'list-style-type:none'));

		//$output .= theme('table', $header, $rows);
	}
	else {
		$output .= '<p>No data entries are available</p>';
	}
	return $output;
}



/**
 * Theme for sort data form
 */
function theme_pi_sort_data_node_form($form) {
	$output = '';
	
	drupal_add_tabledrag('onepageprofile-categories', 'order', 'sibling', 'onepageprofile-element');

/*	// Header
	$header = array(
		t('Data'),
		t('Weight')
	);
*/
	// Rows for the tabledrag
	$rows = array();

	$tree = &$form['onepageprofile_categories'];
	foreach (element_children($tree) as $key) {
		$tree[$key]['weight']['#attributes']['class'] = 'onepageprofile-element';

		$row = array();
		$tree[$key]['title']['#prefix'] = '<span style="white-space:nowrap;font-size:130%;font-weight:bold;margin-right:15px;">';
		$tree[$key]['title']['#suffix'] =  '</span>';
		
		$tree[$key]['description']['#prefix'] = '<span style="font-size:90%;">';
		$tree[$key]['description']['#suffix'] = '</span>';
		
		$modified_description = str_replace(array('<div', '</div', 'class="submitted"'), 
			array('<span', '</span', 'class="submitted" style="display:none"'),  
		$tree[$key]['description']['#value']);
		$tree[$key]['description']['#value'] = $modified_description;

		$row[] = array('data' => drupal_render($tree[$key]['title']), 
					'style' => 'white-space:nowrap;'
			);
		$row[] = drupal_render($tree[$key]['description']);
		$row[] = drupal_render($tree[$key]['weight']);

		$rows[] = array('data' => $row, 'class' => 'draggable');
	}

	// Build the output
	if ($current_activity->description)
	{
		$output  .= '<p>' . $current_activity->description . '</p>';
	}
	else
	{
		$output  .= '<p>' . t('Order your data.') . '</p>';
	}

	if (count($rows) == 0)
	{
		$output .= "<p>No data is available.</p>";
	}
	else
	{
		$output .= theme('table', NULL, $rows, array('id' => 'onepageprofile-categories'));
		$output .= drupal_render($form);
	}
	return $output;
}

/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_sort_data_get_choice($node) {
	$categories = array();
	$result = db_query("SELECT * FROM {pi_sort_data} WHERE " .
		"pi_sort_data.nid = %d " .
		"AND pi_sort_data.vid = %d " .
		"ORDER BY weight ASC", $node->nid, $node->vid );
	while ($row = db_fetch_object($result))
	{
		$activity_id = get_activity_id_for_nid($row->data);
		$activity = load_activity($activity_id);
		$categories[$row->data] = array(
            '#weight' => count($categories),
            '#title'  => check_plain($activity->name)
		);
	}
	return $categories;
}


/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_sort_data_get_options() {
	global $user;
	$details = get_inquiry_details_from_current_path();

	//	$result = db_query("SELECT DISTINCT node.nid FROM node LEFT JOIN node_access ON node.nid = node_access.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid LEFT JOIN pi_activity_node ON pi_activity_node.nid =  node.nid WHERE TYPE = 'pi_data' AND STATUS = '1' AND (node_access.realm =  'all' OR og_uid.uid =  '" . $user->uid . "') AND pi_activity_node.inquiry_id = '" . $details->inquiry_id . "' ORDER BY nid ASC");
	$query = "SELECT DISTINCT node.nid FROM {node} " .
		"LEFT JOIN {node_access} ON node.nid = node_access.nid " .
		"LEFT JOIN {og_uid} ON node_access.gid = og_uid.nid " .
		"LEFT JOIN {pi_activity_node} ON pi_activity_node.nid =  node.nid  " .
		"WHERE TYPE = 'pi_data'  AND pi_activity_node.inquiry_id = %d " .
		"AND STATUS = '1' AND ((node.uid = %d) OR (og_uid.uid = %d) )";
	$result = db_query($query, $details->inquiry_id, $user->uid, $user->uid);

	$categories = array();
	while ($row = db_fetch_object($result))
	{
		$activity_id = get_activity_id_for_nid($row->nid);
		$activity = load_activity($activity_id);
		$categories[$row->nid] = array(
			'#weight' => 1,
			'#title'  => check_plain($activity->name)
		);
	}
	return $categories;
}
