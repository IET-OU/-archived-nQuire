<?php
// $Id$ maw

/**
 * @file
 * Ask Expert data collection module
 */

/**
 * Implementation of pi_ask_expert_node_info().
 */
function pi_ask_expert_node_info() {
  // We return an array since a module can define multiple node types.
  // We're only defining one node type, type 'pi_ask_expert'.
  return array(
    'pi_ask_expert' => array(
      'name' => t('Questions To Ask An Expert'), // Required.
      'module' => 'pi_ask_expert',  // Required.
      'description' => t('Questions To Ask An Expert.'), // Required.
      'has_title' => TRUE,
      'title_label' => t('Ask Expert'),
      'has_body' => TRUE,
      'body_label' => t('Questions To Ask An Expert'),
      'locked' => '1',
    )
  );
}

/**
 * Implementation of pi_ask_expert_perm().
 */
function pi_ask_expert_perm() {
  return array('create pi_ask_expert', 'edit own pi_ask_expert');
}

/**
 * Implementation of pi_ask_expert_access().
 */
function pi_ask_expert_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return (user_access('create pi_ask_expert'));
  }

  if ($op == 'update' || $op == 'delete') {
    return (user_access('edit own pi_ask_expert'));
  }
}


/**
 * Implementation of pi_ask_expert_form().
 */
function pi_ask_expert_form(&$node) {

  drupal_set_title(t('Questions To Ask Expert'));
  
  global $user;
  // Get metadata for this node type
  // (we use it for labeling title and body fields).
  // We defined this in pi_ask_expert_node_info().
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'hidden',
    '#title' => check_plain($type->title_label),
    '#required' => FALSE,
    '#default_value' => check_plain($type->title_label),
    '#weight' => -5
  );
  
  $form['askexpert'] = array(
    '#type' => 'fieldset'
  );
  
  $form['askexpert']['question'] = array(
    '#type' => 'textarea',
    '#title' => t('My question to ask the expert... '),
    '#required' => TRUE,
    '#default_value' => $node->question,
    '#resizable' => FALSE,
    '#rows' => 2,
    '#cols' => 40,
    '#weight' => 2
  );
  
  $form['askexpert']['answer'] = array(
    '#type' => 'textarea',
    '#title' => t('Answer from the expert... '),
    '#required' => FALSE,
    '#default_value' => $node->answer,
    '#resizable' => FALSE,
    '#rows' => 2,
    '#cols' => 40,
    '#weight' => 2
  );
  
  $prefix = "What are the questions you would like to ask and expert?  Remember they should be about your inquiry";
  $prefix .= " and be something that you do not already know but would like to know to help you in your planning.<br>";
  $prefix .= " Use the Answer textbox to record the answers you get from the expert and any comments you want to make.";
    
  $form['#prefix'] = $prefix;
  
  unset($form['delete']);

  return $form;
}

/**
 * Implementation of pi_ask_expert_validate().
 */
function pi_ask_expert_validate($node) {
  
}

/**
 * Implementation of pi_ask_expert_insert().
 */
function pi_ask_expert_insert($node) {
	global $user;
	$insert = "INSERT INTO pi_ask_expert SET";
	$insert .= " nid = '" . $node->nid . "'";
	$insert .= ", vid = '" . $node->vid . "'";
	$insert .= ", question = '" . $node->question . "'";
	$insert .= ", answer = '" . $user->answer . "'";
	db_query($insert);
}

/**
 * Implementation of pi_ask_expert_update().
 */
function pi_ask_expert_update($node) {
  if ($node->revision) {
    pi_ask_expert_insert($node);
  }
  else {
  	$update = "UPDATE pi_ask_expert SET";
  	$update .= " question = '" . $node->question . "'";
  	$update .= ", answer = '" . $node->answer . "'";
  	$update .= " WHERE vid = '" . $node->vid . "'";
  	db_query($update);
  }
}

/**
 * Implementation of pi_ask_expert_delete().
 */
function pi_ask_expert_delete(&$node) {
	$delete = "DELETE FROM pi_ask_expert WHERE nid = '" . $node->nid . "'";
  	db_query($delete);
}

/**
 * Implementation of pi_ask_expert_load().
 */
function pi_ask_expert_load($node) {
	$load = "SELECT * FROM pi_ask_expert WHERE vid = '" . $node->vid . "'";
  	return db_fetch_object(db_query($load));
}

/**
 * Implementation of pi_ask_expert_view().
 */
function pi_ask_expert_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
    $node->content['pi_ask_expert'] = array(
    	'#value' => theme_pi_ask_expert($node),
    	'#weight' => 2
    );
  }

  if ($teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }
  return $node;
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function pi_ask_expert_theme() {
  return array(
    'pi_ask_expert' => array(
      'arguments' => array('node'),
    ),
  );
}

/**
 * MISSING
 * 
 * @param unknown_type $node
 * @return string
 */
function theme_pi_ask_expert($node) {
	$output = "<strong>Question for the Expert:</strong>";
  	$output .= '<div class="pi_ask_expert_question">' . check_plain($node->question). '</div><br />';
  	$output .= "<strong>Answer form the Expert:</strong>";
  	$output .= '<div class="pi_ask_expert_question">' . check_plain($node->answer). '</div><br />';
  	return $output;
}