<?php
// $Id: pi_datalogger.module, 2010/04/15 MCP Exp $

/**
 * @file
 * This module adds an activity that allows you to select and add data from ScienceScope
 * dataloggers.  It extends pi_data module with a new form with a java applet.
 */

/**
 * Implementation of hook_node_info() return a type the same as pio_data but with name pi_datalogger
 * This means the structure will always be copied, as it needs to be compatible with pi_data apart from the form
 */
function pi_datalogger_node_info() {
	$pi_data_type=pi_data_node_info();
	$type=array();
	$type['pi_datalogger'] = $pi_data_type['pi_data'];
	$type['pi_datalogger']['name'] = t('Datalogger Data');
	$type['pi_datalogger']['module'] = 'pi_datalogger';
	$type['pi_datalogger']['description'] = 'Add data from a ScienceScope Datalogger';
	return $type;
}

/**
 * Implementation of hook_perm(), as above return the same as pi_data_perm()
 * presently this is empty, so if pi_data_perm eventually returns something it
 * may be necessary to replace array key ['pi_data'] with ['pi_datalogger']
 */
function pi_datalogger_perm() {
	return pi_data_perm();
}

/**
 * Implementation of hook_access() - once more pass this on to pi_data_access()
 */
function pi_datalogger_access($op, $node) {
	return pi_data_access($op, $node);
}

/**
 * pi_datalogger_form() - The form for entering the data, with java applet embedded
 */
function pi_datalogger_form(&$node, $form_state) {
	$form = drupal_retrieve_form('pi_data_form', $node);
	$measures_for_applet = array();
	firep(element_children($form['onepageprofile_categories']));
	foreach(element_children($form['onepageprofile_categories']) as $element_key)
	{
		firep($form['onepageprofile_categories'][$element_key]);
		$measures_for_applet[] = array(
    		"id" => $element_key,
    		"title" => $form['onepageprofile_categories'][$element_key]['value']['#title'],
/*    		"units" => $form['onepageprofile_categories'][$element_key]['units'],
    		"units_short" => $form['onepageprofile_categories'][$element_key]['unit_short'],
    		"field_type" => $form['onepageprofile_categories'][$element_key]['field_type'],
    		"data_type" => $form['onepageprofile_categories'][$element_key]['data_type']*/
		);
		//$form['onepageprofile_categories'][$element_key]['#type'] = 'hidden';
	}
	firep($measures_for_applet, "Measures for applet");

	// Add ahah stuff to make the form submit automatically
	ahah_helper_register($form, $form_state);
	$form['buttons']['submit'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Save reading'),
	    '#submit' => array('ahah_helper_generic_submit'),
	    '#attributes' => array('class' => 'no-js'),
	);

	$form['#prefix'] = "Insert applet here...";
	return $form;
}


/**
 * Implementation of hook_validate()
 */
function pi_datalogger_validate($node) {
	pi_data_validate($node);
}

/**
 * hook_nodeapi() - needed to change the type of node to pi_data before saving.
 * @param &object(node) $node 
 * @param string $op
 * @param string $teaser
 * @param string $page
 */
function pi_datalogger_nodeapi(&$node, $op, $teaser, $page) {
	//The node it needs to be changed to type 'pi_data' to trigger rules and to
    // appear correctly in the system.    
	switch ($op)
	{
		case 'presave':
			$pi_data_info = pi_data_node_info();
			$node->type = $pi_data_info['pi_data']['module'];
			break;
		break;
	}
}

/**
 * Implementation of hook_insert()
 */
function pi_datalogger_insert($node) {
    pi_data_insert($node);
    $nid = db_last_insert_id("pi_data", "nid");
    $data_node = node_load($nid);
    $pi_data_info = pi_data_node_info();
    $data_node->type = $pi_data_info['module'];
    node_save($data_node);
}

/**
 * Implementation of hook_update()
 */
function pi_datalogger_update($node) {
	pi_data_update($node);
}

/**
 * Implementation of pi_datalogger_delete()
 */
function pi_datalogger_delete(&$node) {
	pi_data_delete(&$node);
}

/**
 * Implementation of hook_load()
 */
function pi_datalogger_load($node) {
    return pi_data_load($node);
}

/**
 * Implementation of hook_view()
 */
function pi_datalogger_view($node, $teaser = FALSE, $page = FALSE) {
	return pi_data_view($node, $teaser, $page);
}

/**
 * Implementation of hook_theme()
 */
function pi_datalogger_theme() {
	return array(
    'pi_datalogger_node_form' => array(
    'arguments' => array('form'),
	),
    'pi_datalogger' => array(
    'arguments' => array('node'),
	),
	);
}

function theme_pi_datalogger_node_form($form) {
	$details = get_inquiry_details_from_current_path();
	$activity = load_activity($details->activity_id);
	if ($activity->description) {
		$output  .= '<p>' . t($activity->description) . '</p>';
	}
	else {
		$output  .= '<p>' . t('Order your key questions.') . '</p>';
	}

	$output .= drupal_render($form);
	return $output;
}

function theme_pi_datalogger($node) {
	$details = get_inquiry_details_from_current_path();
	if (is_numeric($details->activity_id)) {
		$current_activity = load_activity($details->activity_id);
	}

	if ($current_activity->name) {
		drupal_set_title(t($current_activity->name));
	}

	global $user;
	$measures_param = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);
	if ($measures_param) {
		$measures_node = node_load($measures_param);
		$measure_rows = $measures_node->categories;
	}

	$output = '';

	$rows = array();
	if(is_array($measure_rows)) {
		foreach ($measure_rows as $measure_nid => $measure_selection) {
			if($measure_selection['#status'] == 'key' || $measure_selection['#status'] == 'selected') {
				$key = t($measures_param . "-" . $measure_nid);
				$measure = node_load($measure_nid);
				//format the measure units
				if (isset($measure->units_short) AND ($measure->units_short !='')) {
					$units = " (" . $measure->units_short . ")";
				}
				elseif (isset($measure->units) AND ($measure->units !='')) {
					$units = " (" . $measure->units . ")";
				}
				else {
					$units = "";
				};

				$output .= "<p><strong>" . $measure->title . $units. ": </strong>";
				$output .= $node->categories[$key]['#value'] . "</p>";

			};
		};
	}
	return $output;
}


