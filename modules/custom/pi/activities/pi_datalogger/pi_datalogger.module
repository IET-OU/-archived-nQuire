<?php
// $Id: pi_datalogger.module, 2010/04/15 MCP Exp $

/**
 * @file
 * This module adds an activity that allows you to select and add data from ScienceScope
 * dataloggers.  It extends pi_data module with a new form with a java applet.
 */

/**
 * Implementation of hook_node_info() return a type the same as pio_data but with name pi_datalogger
 * This means the structure will always be copied, as it needs to be compatible with pi_data apart from the form
 */
function pi_datalogger_node_info() {
/*	$pi_data_type=pi_data_node_info();
	$type=array();
	$type['pi_datalogger'] = $pi_data_type['pi_data'];
	$type['pi_datalogger']['name'] = t('Datalogger Data');
	$type['pi_datalogger']['module'] = 'pi_datalogger';
	$type['pi_datalogger']['description'] = 'Add data from a ScienceScope Datalogger';*/
	return array(
		'pi_datalogger' => array(
		    'name' => t('Datalogger Data'), // Required.
		    'module' => 'pi_datalogger',  // Required.
		    'description' => t('Upload data from a datalogger.'), // Required.
		    'has_title' => TRUE,
		    'title_label' => t('Datalogger data'),
		    'has_body' => FALSE,
		    'locked' => TRUE)
		);
//	return $type;
}

/**
 * Implementation of hook_perm(), as above return the same as pi_data_perm()
 * presently this is empty, so if pi_data_perm eventually returns something it
 * may be necessary to replace array key ['pi_data'] with ['pi_datalogger']
 */
function pi_datalogger_perm() {
	return pi_data_perm();
}

/**
 * Implementation of hook_access() - once more pass this on to pi_data_access()
 */
function pi_datalogger_access($op, $node) {
	return pi_data_access($op, $node);
}


/**
 * This is executed before every page request and provides the functionality to include particular files,
 * e.g. custom css and javascript files. 
 */
function pi_datalogger_init() {
    drupal_add_js(drupal_get_path('module', 'pi_datalogger') .'/lib/datalogger.js');
}



/**
 * Implementation of hook_theme()
 */
function pi_datalogger_theme() {
	return array(
	    'pi_datalogger_data_form' => array(
			'arguments' => array('form'),
		),
	    'pi_datalogger_applet' => array(
	    	'arguments' => array('applet_location', 'applet_params'),
		),
	);
}

/**
 * 
 * @param $node
 * @param $teaser
 * @param $page
 * @return unknown_type
 */
function pi_datalogger_view($node, $teaser = FALSE, $page = FALSE) {
	global $base_url;
	$path_to_applet =  $base_url . '/' . drupal_get_path('module', 'pi_datalogger') . '/lib/DataLogger.jar';
	
	
	$measures_for_applet = array();
	foreach(element_children($form['onepageprofile_categories']) as $element_key)
	{
		$measures_for_applet[] = array(
    		"id" => $element_key,
    		"title" => $form['onepageprofile_categories'][$element_key]['value']['#title'],
/*    		"units" => $form['onepageprofile_categories'][$element_key]['units'],
    		"units_short" => $form['onepageprofile_categories'][$element_key]['unit_short'],
    		"field_type" => $form['onepageprofile_categories'][$element_key]['field_type'],
    		"data_type" => $form['onepageprofile_categories'][$element_key]['data_type']*/
		);
	}

	//Use Drupal's default node view.
	$node = node_prepare($node, $teaser);
	
	$node->content['applet']['#value'] = theme('pi_datalogger_applet', $path_to_applet, $measures_for_applet);
	$node->content['applet']['#weight'] = -5;
	
	//$form_state = array();
	//$form = drupal_retrieve_form('pi_datalogger_data_form', $form_state);
	//drupal_redirect_form($form, request_uri());
	//$node->content['data_form']['#value'] = drupal_render_form('pi_datalogger_data_form', $form);
	//$node->content['data_form']['#weight'] = 5;
	
	return $node;
}


/**
 * pi_datalogger_data_form() - The form for entering the data, with java applet embedded
 */
function pi_datalogger_data_form() {
	
	// First get the pi_data form and copy the measures fields from it
	$pi_data_form = drupal_retrieve_form('pi_data_form', $node);
	
	$measures_for_applet = array();
	foreach(element_children($pi_data_form['onepageprofile_categories']) as $element_key)
	{
		$measures_for_applet[$element_key] = $pi_data_form['onepageprofile_categories'][$element_key]['value'];
	}

	//Now create a new form to submit the measures.
	$form=array();
	
	$form['#theme'] = 'pi_datalogger_data_form';
	$form['#title'] = 'Add datalogger data';
	
	$form['datalogger_data'] = array(
		'#tree' => TRUE
	);
	foreach($measures_for_applet as $id => $measure_field){
		$form['datalogger_data'][$id] = $measure_field;
	}
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
	);
	return $form;
}

/**
 * handles the data submitted to the datalogger_data form, this should be done in the background and returns nothing
 * at the moment, as this is submitted via an ajax request.
 */
function pi_datalogger_data_form_submit($form, &$form_state) {
	global $user;
	
	$data = new stdClass();
	$data->title = 'Inquiry data item';
	$data->body = '';;
	$data->uid = $user->uid;
	$data->type = 'pi_data';
	$data->status = 1;
	$data->promote = 0;

	foreach($form_state['values']['datalogger_data'] as $id => $value)
	{
		$data->onepageprofile_categories[$id] = $value;
	}
	node_save($data);
	firep($data, "Saved");
}

/**
 * Theme function to display the add datalogger data form 
 * @param array $form drupal form data
 */
function theme_pi_datalogger_data_form($form) {
	$output .= drupal_render($form);
	return $output;
}


/**
 *  this function provides the themes layout for the datalogger applet
 * @param $applet_location the full url to applet on the server
 * @param $applet_params array('title'=>x,'id'=>y) of measures to provide as parameters to the applet 
 * @todo escape commas in parmeter names
 */
function theme_pi_datalogger_applet($applet_location, $applet_params)
{
	$output = '';
	$output .= "\n<APPLET CODE='uk.org.nquire.applet.LogbookReaderApplet' ARCHIVE='$applet_location' WIDTH=450 HEIGHT=450>\n";
	$param_names = array();
	foreach($applet_params as $param)
	{
		$param_names[] = htmlspecialchars($param['title']);
		$output .= "<param name='" . htmlspecialchars($param['id']) . "' value='dataField" . count($param_names) ."'/>\n";
	}
	$output .= "<param name='dataFields' value='" . implode(',', $param_names) ."'/>\n";
	$output .= "<param name='useDummyLogger' value='true'/>\n";
	$output .= "</APPLET>\n";
	return $output;
}