<?php
// $Id: pi_draggable_measures.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

function pi_draggable_measures_node_info() {
    return array(
    'pi_draggable_measures' => array(
    'name' => t('Draggable measures'), // Required.
    'module' => 'pi_draggable_measures',  // Required.
    'description' => t('Draggable measures'), // Required.
    'has_title' => TRUE,
    'title_label' => t('Draggable measures'),
    'has_body' => TRUE,
    'body_label' => t('Draggable measures'),
    'locked' => TRUE)
    );

}

function pi_draggable_measures_perm() {
}

function pi_draggable_measures_access($op, $node) {
    if ($op == 'create') {
        return TRUE;
    }
    if ($op == 'update' || $op == 'delete') {
        return TRUE;
    }
}


/**
 * Implementation of hook_theme().
 */
function pi_draggable_measures_theme() {
    return array(
    'pi_draggable_measures_node_form' => array(
    'arguments' => array('form'),
    ),
    'pi_draggable_measures' => array(
    'arguments' => array('node'),
    ),
    );
}


/**
 * Admin page to change category weights
 */
function pi_draggable_measures_form(&$node) {

// Build the form
    $form = array();

    $type = node_get_types('type', $node);
    $form['title'] = array (
        '#type' => 'hidden',
        '#value' => check_plain($type->title_label),
    );

    // onepageprofile_categories and tree used for draggable menu items
    $form['onepageprofile_categories'] = array(
        '#tree'   => TRUE,
    );

    // Add the categories of existing nodes and the options list for new nodes
    if(isset($node->nid)) {
        $categories = $node->categories;//pi_draggable_measures_get_choice($node);
    }
    else {
        $categories = pi_draggable_measures_get_options();
    }

    // set $tree to point to the above $form['onepageprofile_categories'] object
    $tree = &$form['onepageprofile_categories'];
    foreach ($categories as $key => $category) {

        $measure = node_load($key);

        // format the measure units
        if (isset($measure->units_short) AND ($measure->units_short !='')) {
            $units = " (" . $measure->units_short . ")";
        }
        elseif (isset($measure->units) AND ($measure->units !='')) {
            $units = " (" . $measure->units . ")";
        }
        else {
            $units = "";
        };

        // add $tree entries for current category (i.e. $key)
        $tree[$key]['title'] = array(
            '#value' => t($category['#title'] . $units),
        );

        $tree[$key]['weight'] = array(
            '#type'          => 'weight',
            '#delta'         => max(10, count($categories)),
            '#default_value' => $category['#weight'],
        );

        $tree[$key]['status'] = array(
            '#type'          => 'select',
            '#default_value' => $category['#status'],
            '#options' => array('none' => 'none', 'key' => 'key', 'selected' => 'selected'),
        );
    }

    return $form;
}

function pi_draggable_measures_insert($node) {
    while ($measure = current($node->onepageprofile_categories)) {

        db_query("INSERT INTO pi_selected_measures (nid, vid, available_measure, status, weight) VALUES ('" . $node->nid . "', '" . $node->vid . "', '" . key($node->onepageprofile_categories) . "', '" . $measure['status'] . "', '" . $measure['weight'] . "')");

        next($node->onepageprofile_categories);
    }
    reset($node->onepageprofile_categories);
}

function pi_draggable_measures_update($node) {
// if this is a new node or we're adding a new revision,
    if ($node->revision) {
        pi_draggable_measures_insert($node);
    }
    else {
        db_query("DELETE FROM pi_selected_measures WHERE vid = '" . $node->vid . "' ");
        pi_draggable_measures_insert($node);
    }
}

function pi_draggable_measures_delete(&$node) {
    db_query("DELETE FROM pi_selected_measures WHERE nid = '" . $node->nid . "' ");
}


function pi_draggable_measures_load($node) {
    $result = new stdClass;
    $result->categories = pi_draggable_measures_get_choice($node);
    return $result;
}


function pi_draggable_measures_view($node, $teaser, $page = FALSE) {
    if (!$teaser) {
        $node = node_prepare($node, $teaser);

        $node->content['pi_draggable_measures'] = array(
            '#value' => theme('pi_draggable_measures', $node),
            '#weight' => 2
        );
    }
    if ($teaser) {
        $node = node_prepare($node, $teaser);
    }
    return $node;
}

function theme_pi_draggable_measures(&$node) {

    $output = "";

    $header = array(
        t("Measure"),
        t("Status")
    );

    $rows = array();

    if (is_array($node->categories)) {
    //foreach($node->categories as $category) {
        while ($category = current($node->categories)) {
            $measure = node_load(key($node->categories));
            //format the measure units
            if (isset($measure->units_short) AND ($measure->units_short !='')) {
                $units = " (" . $measure->units_short . ")";
            }
            elseif (isset($measure->units) AND ($measure->units !='')) {
                $units = " (" . $measure->units . ")";
            }
            else {
                $units = "";
            };
            $rows[] = array(
                t($category['#title'] . $units),
                t($category['#status'])
            );
            next($node->categories);
        }
        reset($node->categories);
    }

    $output .= theme('table', $header, $rows);
    return $output;
}



/**
 * Theme admin settings form
 */
function theme_pi_draggable_measures_node_form($form) {

    drupal_add_tabledrag('onepageprofile-categories', 'order', 'sibling', 'onepageprofile-element');

    // Header
    $header = array(
        t('Measure'),
        t('Status'),
        t('Weight'),
    );

    // Rows for the tabledrag
    $rows = array();

    $tree = &$form['onepageprofile_categories'];
    foreach (element_children($tree) as $key) {
        $tree[$key]['weight']['#attributes']['class'] = 'onepageprofile-element';

        $row = array();
        $row[] = drupal_render($tree[$key]['title']);
        $row[] = drupal_render($tree[$key]['status']);
        $row[] = drupal_render($tree[$key]['weight']);

        $rows[] = array('data' => $row, 'class' => 'draggable');
    }

    // Build the output
    $output  = '<p>' . t('Select and order your measures.') . '</p>';
    $output .= theme('table', $header, $rows, array('id' => 'onepageprofile-categories'));
    $output .= drupal_render($form);

    return $output;
}

/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_draggable_measures_get_choice($node) {

    global $user;
    $categories = array();

    $result = db_query("SELECT * FROM pi_selected_measures WHERE pi_selected_measures.nid = '" . $node->nid . "' AND pi_selected_measures.vid = '" . $node->vid . "'");

    while ($row = db_fetch_object($result)) {
        $loaded_node = node_load($row->available_measure, NULL, TRUE);
        $categories[$row->available_measure] = array(
            '#weight' => $row->weight,
            '#title'  => t($loaded_node->title),
            '#status'  => $row->status
        );
    }

    uasort($categories, "my_weight_compare");

    return $categories;
}

function my_weight_compare($x, $y) {
    $xw = (int) $x['#weight'];
    $yw = (int) $y['#weight'];
    return $xw > $yw;
}


/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_draggable_measures_get_options() {
    global $user;
    $categories = array();

    $result = db_query("SELECT DISTINCT node.nid FROM node LEFT JOIN node_access ON node.nid = node_access.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid WHERE TYPE = 'pi_available_measures' AND STATUS = '1' AND (node_access.realm =  'all' OR og_uid.uid =  '" . $user->uid . "') ORDER BY nid ASC");

    while ($row = db_fetch_object($result)) {
        $title_result = db_result(db_query("SELECT node.title FROM node WHERE node.nid = '" . $row->nid . "' ORDER BY node.vid DESC"));
        $categories[$row->nid] = array(
            '#weight' => 1,
            '#title'  => t($title_result),
            '#status'  => 'none'
        );
    }
    return $categories;
}
