<?php
// $Id: pi_draggable_measures.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

/**
 * hook_node_info()
 * @return array of node data as per hook_node api 
 */
function pi_draggable_measures_node_info() {
    return array(
    'pi_draggable_measures' => array(
    'name' => t('Inquiry measures selection'), // Required.
    'module' => 'pi_draggable_measures',  // Required.
    'description' => t('Inquiry measures selection: selection of which measures to record and which of these are key measures.'), // Required.
    'has_title' => TRUE,
    'title_label' => t('Selected measures'),
    'has_body' => FALSE,
    'locked' => TRUE)
    );
}

/**
 * Hook node_perm()
 * @return unknown_type
 */
function pi_draggable_measures_perm() {
}

/*
 * hook_access()
 * @return unknown
 */
function pi_draggable_measures_access($op, $node) {
    global $user;
    $details = get_inquiry_details_from_current_path();

    if ($op == 'create') {
        return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'add');
    }
    if ($op == 'update') {
        return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    }
}

/**
 * Implementation of hook_theme()
 * @return unknown_type
 */
function pi_draggable_measures_theme() {
    return array(
	    'pi_draggable_measures_node_form' => array(
//      		'template' => 'pi_draggable_measures-display-form',
	    	'arguments' => array('form'),
	    ),
	    'pi_draggable_measures' => array(
	    	'arguments' => array('node','teaser'),
	    ),
    );
}


/**
 * Admin page to change measure weights
 * @param $node
 * @return unknown_type
 */
function pi_draggable_measures_form(&$node) {
	$node_details = get_inquiry_details_from_current_path();
	if (is_numeric($node_details->activity_id))
	{
		$current_activity = load_activity($node_details->activity_id);
	}
	 
	if ($current_activity->name)
	{
		drupal_set_title(t($current_activity->name));
	}

	// Build the form
	$form = array();

	$type = node_get_types('type', $node);
	$form['title'] = array (
        '#type' => 'hidden',
        '#value' => check_plain($type->title_label),
	);

	// measures_list and tree used for draggable menu items
	$form['measures_list'] = array(
        '#tree'   => TRUE,
	);

	// Get the list of currently selected measures if the node has any
	// they are stored in $node->measures_list and loaded by pi_draggable_measures_load()
	if(isset($node->nid)) 
	{
		$selected_measures = $node->measures_list;
	}
	else 
	{
		$selected_measures = array();
	}
	
	// Get the list of available measures
	$all_measures = pi_draggable_measures_get_options();
	
	$categories = array();
	$count = 0;
	foreach ($all_measures as $key => $category) {
			
			$measure_activity_id = get_activity_id_for_nid($key);
			$measure_phase_id = get_phase_id_for_activity_id($measure_activity_id);
			$pos_result = db_result(db_query("SELECT pi_stage_phase_activity.position FROM pi_stage_phase_activity, pi_stage_phase WHERE pi_stage_phase.phase_id = '" . $measure_phase_id . "' AND pi_stage_phase.psp_id = pi_stage_phase_activity.psp_id AND pi_stage_phase_activity.activity_id = '" . $measure_activity_id . "' ORDER BY pi_stage_phase.psp_id DESC LIMIT 1"));
			
		$categories[$key]['#weight'] = $selected_measures[$key]['#weight'];
		$categories[$key]['#status'] = $selected_measures[$key]['#status'];
		$categories[$key]['#title'] = $category['#title'];
	}
	
	// Sort the measures in reverse weight order
	if (count($categories) > 1) {
		uasort($categories, "my_weight_compare");
	}
	
	// set $tree to point to the above $form['measures_list'] object
	$tree = &$form['measures_list'];

	foreach ($categories as $measure_nid => $measure_element)
	{
		//load the measure properly to get the node data from drupal core db, 
		//rather than from queries used in pi_draggable_measures_get_options()
		$measure = node_load($measure_nid);
		$region = $measure_element['#status'];
		
		$tree[$region][$measure_nid]['title'] = array(
			'#value' => t($measure_element['#title']),
		);

		$tree[$region][$measure_nid]['weight'] = array(
			'#type'          => 'weight',
			'#delta'         => count($categories),
			'#default_value' => $measure_element['#weight'],
		);
		
		$tree[$region][$measure_nid]['status'] = array(
			'#type'          => 'select',
			'#default_value' => $measure_element['#status'],
			'#options' => array('none' => 'none', 'key' => 'key', 'selected' => 'selected'),
		);
	}
	return $form;
}

/**
 * hook_insert()
 * @param node object $node new draggable_measures node to insert
 * @return null
 */
function pi_draggable_measures_insert($node) {
	$details  = get_inquiry_details_from_current_path();
	while ($region = current($node->measures_list)) {
		foreach ($region as $nid => $measure) {
			$query = "INSERT INTO pi_selected_measures (nid, vid, available_measure, status, weight) VALUES ('" . $node->nid . "', '" . $node->vid . "', '" . $nid . "', '" . $measure['status'] . "', '" . $measure['weight'] . "')";
			//echo $query . "\n<br>";
			db_query($query);
			pi_activity_update_activity_weight_from_node($nid, $measure['weight']);
		}
		next($node->measures_list);
	}
	reset($node->measures_list);
}

/**
 * hook_update()
 * @param $node
 * @return unknown_type
 */
function pi_draggable_measures_update($node) {
// if this is a new node or we're adding a new revision,
    if ($node->revision) {
        pi_draggable_measures_insert($node);
    }
    else {
        db_query("DELETE FROM pi_selected_measures WHERE vid = '" . $node->vid . "' ");
        pi_draggable_measures_insert($node);
    }
}

/**
 * hook_delete()
 * @param $node
 * @return unknown_type
 */
function pi_draggable_measures_delete(&$node) {
    //db_query("DELETE FROM pi_selected_measures WHERE nid = '" . $node->nid . "' ");
}

/**
 * hook_load()
 * @param unknown_type $node
 * @return unknown_type
 */
function pi_draggable_measures_load($node) {
    $result = new stdClass;
    $result->measures_list = pi_draggable_measures_get_choice($node);
    // $result->categories = &$result->measures_list;
    $result->categories = pi_draggable_measures_get_choice($node);
    return $result;
}

/**
 * hook_view()
 * @param unknown_type $node
 * @param unknown_type $teaser
 * @param unknown_type $page
 * @return unknown_type
 */
function pi_draggable_measures_view($node, $teaser, $page = FALSE) {

        $node = node_prepare($node, $teaser);

        $node->content['pi_draggable_measures'] = array(
            '#value' => theme('pi_draggable_measures', $node, $teaser),
            '#weight' => 2
        );

    return $node;
}

/**
 * Theme function
 * @param unknown_type $node
 * @return unknown_type
 */
function theme_pi_draggable_measures($node, $teaser) {
	global $user;
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
	if (is_numeric($details->activity_id)) {
		$current_activity = load_activity($details->activity_id);
	}
	 
	if ($current_activity->name) {
		drupal_set_title(t($current_activity->name));
	}
	 
	$output = "";

    if (is_array($node->measures_list)) {
		$regions = array('key','selected','none');
		foreach($regions as $region) {
			$header = array(
				t( get_region_label($region) )
			);
			$rows = array();
			foreach($node->measures_list as $nid => $measure) {
				$row_activity_id = get_activity_id_for_nid($nid);
				
				if ($row_activity_id) {
				    $row = array();				    
				    $loaded_activity = load_activity($row_activity_id);
				    $loaded_node = node_load($nid);
				    //$rows[] = pi_activity_teaser($loaded_node, $loaded_activity, 'view');
				    $activity_link = build_activity_link($details->inquiry_id, $details->stage_id, $details->phase_id, $row_activity_id, $uid);
				    $activity_teaser = pi_activity_teaser($loaded_node, $loaded_activity, 'view');
				    
				    $rows[] = $activity_link['data'] . $activity_teaser;
		        };
			}
			
		  	if(count($rows) == 0) {
		  		$rows[] = array( get_empty_region_label($region) );
			}
			
    		// $sentence = format_plural(count($rows), 'Your key question is:', 'Your key questions are:');
    		$output .= '<div><strong>' . get_region_label($region) . '</strong></div>';
    		$output .= theme('item_list', $rows, NULL, 'ol', array('style' => 'list-style-type:none'));
    		
			// $output .=  theme('table', $header, $rows);
			
		}
    }
		
	return $output;
}

function get_region_label($region) {

	$labels = array( 'key' => 'Key measures' ,'selected' => 'Selected measures' ,'none' => 'Not used' );

	return $labels[$region];
}

function get_empty_region_label($region) {

	$labels = array( 'key' => 'No key measures have been choosen' ,'selected' => 'No selected measures have been choosen' ,'none' => 'All avaâ€Žilable measures are being used' );

	return $labels[$region];
}

/**
 * Theme admin settings form
 * @param unknown_type $form
 * @return unknown_type
 */
function theme_pi_draggable_measures_node_form($form) {
	global $user;
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();

	/*
	$regions = array('none', 'key', 'selected');
	foreach ($regions as $region) {
		drupal_add_tabledrag('measures_list', 'order', 'sibling', 'measures_list-element', 'measures_list-element-' . $region);
	};
	*/
	
	// Header
	$header = array(	array( 'theading' => t('Measure'), 'class' => '' ),
						array( 'theading' => t('Status'), 'class' => 'measures_theading_status' ),
						array( 'theading' => t('Weight'), 'class' => 'measures_theading_weight' )
	);

	// Rows for the tabledrag
	$rows = array();

	$tree = &$form['measures_list'];
	
	//print_r($tree);
	
	$rows = array();		
	foreach (element_children($tree) as $region)
	{
		foreach (element_children($tree[$region]) as $key)
		{
			$tree[$region][$key]['weight']['#attributes']['class'] = 'measures_list-weight measures_list-weight-'. $region;
			$tree[$region][$key]['status']['#attributes']['class'] = 'measures_list-region-select measures_list-region-'. $region;
		
			$rows[$region][$key]['title'] = drupal_render($tree[$region][$key]['title']);
			$rows[$region][$key]['status'] = drupal_render($tree[$region][$key]['status']);
			$rows[$region][$key]['weight'] = drupal_render($tree[$region][$key]['weight']);

		}
	}
	
	// print_r($rows);
	
	// Build the output
	$activity = load_activity($details->activity_id);
	if ($activity->description) {
		$output  .= '<p>' . t($activity->description) . '</p>';
	}
	else {
		$output  .= '<p>' . t('Order your key questions.') . '</p>';
	}
	
	if(count($rows) > 0) {
		// $output .= theme('table', $header, $rows, array('id' => 'measures_list'));
		$output .= pi_draggable_measures_display_table($header, $rows, array('id' => 'measures_list'));
		$output .= drupal_render($form);
	}
	else {
		$output .= "No measures available";
	}

	return $output;
}

function pi_draggable_measures_display_table($header, $rows, $attributes) {

 // Add table javascript.

    drupal_add_js('misc/tableheader.js');
    drupal_add_js(drupal_get_path('module', 'pi_draggable_measures') .'/pi_draggable_measures.js');

	//drupal_add_tabledrag('measures_list', 'match', 'sibling', 'measures_list-element');
	$regions = array('key', 'selected', 'none');
    // $regions = array('key','selected','none');
	foreach ($regions as $region) {
		//drupal_add_tabledrag('measures_list', 'match', 'sibling', 'measures_list-element', 'measures_list-region-' . $region, NULL, FALSE);
		drupal_add_tabledrag('measures_list', 'match', 'sibling', 'measures_list-region-select', 'measures_list-region-' . $region, NULL, FALSE);
		drupal_add_tabledrag('measures_list', 'order', 'sibling', 'measures_list-weight', 'measures_list-weight-' . $region, NULL, FALSE);
	};

	$output = "";
	$output .= '<table id="' . $attributes['id'] . '" class="sticky-enabled">';
	$output .= '<thead>';
	$output .= '<tr>';
	foreach($header as $heading) {
    	$output .= '<th class="' . $heading['class'] . '">' . $heading['theading'] . '</th>';
	}
	$output .= '</tr>';
  	$output .= '</thead>';
  	$output .= '<tbody>';
    foreach ($regions as $region) {
		$output .= '<tr class="region region-' . $region . '">';
		$output .= '<td colspan="3" class="region">' . get_region_label($region) . '</td>';
		$output .= '</tr>';
		
		$region_style = empty($rows[$region]) ? 'region-empty' : 'region-populated';
        $output .= '<tr class="region-message region-' . $region . '-message ' . $region_style . '">';
        $output .= '<td colspan="3"><em>' . t( get_empty_region_label($region) ) . '</em></td>';
        $output .= '</tr>';
      
		$row = 0;
		
		//print_r($rows[$region]);
		
		if (is_array($rows[$region])) {
			foreach ($rows[$region] as $key => $data) {
				$style = $row % 2 == 0 ? 'odd' : 'even';
				$row_class = $data->row_class ? ' '. $data->row_class : '';
				$output .= '<tr class="draggable ' . $style . $row_class . '">';
				$output .= '<td class="measures_title">' . $data['title'] . '</td>';
				$output .= '<td class="measures_status">' . $data['status'] . '</td>';
				$output .= '<td class="measures_weight">' . $data['weight'] . '</td>';
				$output .= '</tr>';
				$row++;
			}
		}
	}
    $output .= '</tbody>';
	$output .= '</table>';

	return $output;
}


/**
 * Load the user edit form and grab all of the fieldsets
 * @param unknown_type $node
 * @return unknown_type
 */
function pi_draggable_measures_get_choice($node) {
	
    global $user;
    $measures = array();

    $result = db_query("SELECT * FROM pi_selected_measures " .
    	"WHERE pi_selected_measures.nid = %d AND pi_selected_measures.vid = %d ",
     	$node->nid, $node->vid);

    while ($row = db_fetch_object($result))
    {
        $loaded_node = node_load($row->available_measure, NULL, TRUE);
        $measures[$row->available_measure] = array(
            '#weight' => $row->weight,
            '#title'  => t($loaded_node->title),
            '#status'  => $row->status
        );
    }
    uasort($measures, "my_weight_compare");
    return $measures;
}

/**
 * This compares the ['#weight'] elements in two arrays  
 * @param array $x
 * @param array $y
 * @return bool result of $x['#weight'] > $y['#weight']
 */
function my_weight_compare($x, $y) {
    $xw = (int) $x['#weight'];
    $yw = (int) $y['#weight'];
    return $xw > $yw;
}

/**
 * Get all available measures for the inquiry (derived from current path).
 * @return array of db_fetch_objects() for the measures available in db 
 */
function pi_draggable_measures_get_options() {
    $details = get_inquiry_details_from_current_path();
    global $user;
    $measures = array();
    
    $result = db_query("SELECT DISTINCT node.nid FROM node " .
    	"LEFT JOIN node_access ON node.nid = node_access.nid " . 
    	"LEFT JOIN og_uid ON node_access.gid = og_uid.nid " . 
    	"LEFT JOIN pi_activity_node ON pi_activity_node.nid = node.nid " .
    	"WHERE type = 'pi_available_measures' AND pi_activity_node.inquiry_id = %d" .
    		" AND STATUS = '1' AND (node_access.realm = 'all' " .
    		"OR og_uid.uid = %d) " .
    	"ORDER BY nid ASC", $details->inquiry_id, $user->uid);
		 
    while ($row = db_fetch_object($result))
    {
        $title_result = db_result(db_query("SELECT node.title FROM node WHERE node.nid = %d ORDER BY node.vid DESC", $row->nid));
        $measures[$row->nid] = array(
            '#weight' => 1,
            '#title'  => t($title_result),
            '#status'  => 'none'
        );
    }
    return $measures;
}
