<?php

// $Id: pi_sort_result_presentations.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

function pi_sort_result_presentations_node_info() {
	return array(
			'pi_sort_result_presentations' => array(
					'name' => t('Result presentations sort'), // Required.
					'module' => 'pi_sort_result_presentations', // Required.
					'description' => t('Result presentations sort'), // Required.
					'has_title' => FALSE,
					'title_label' => t('Sorted result presentations'),
					'has_body' => FALSE,
					'body_label' => t('Sort of result presentations'),
					'locked' => TRUE,
					'add_node_type' => 'pi_result_presentations'
			)
	);
}

function pi_sort_result_presentations_perm() {
	
}

function pi_sort_result_presentations_access($op, $node, $account) {
	return FALSE;
}

/**
 * Implementation of hook_theme().
 */
function pi_sort_result_presentations_theme() {
	return array(
			'pi_sort_result_presentations_node_form' => array(
					'arguments' => array('form'),
			),
			'pi_sort_result_presentations' => array(
					'arguments' => array('node', 'teaser', 'result_presentations'),
			),
	);
}

/**
 * hook_form() for pi_sort_result_presentations which provides draggable sorting for pi_result_presentations
 *  nodes in an inquiry
 * @param $node the pi_sort_result_presentations node if it is to be edited, as per drupal 6 API
 */
function pi_sort_result_presentations_form(&$node) {
	global $user;
	$form = array();
	return $form;
}

function pi_sort_result_presentations_insert($node) {
	if (count($node->onepageprofile_categories) > 0) {
		foreach ($node->onepageprofile_categories as $key => $result_presentations) {
			$query = "INSERT INTO {pi_sort_result_presentations} (nid, vid, result_presentations, weight) VALUES (%d, %d, %d, %d)";
			db_query($query, $node->nid, $node->vid, $key, $result_presentations['weight']);
		}
	}
}

function pi_sort_result_presentations_update($node) {
// if this is a new node or we're adding a new revision,
	if ($node->revision) {
		pi_sort_result_presentations_insert($node);
	} else {
		db_query("DELETE FROM {pi_sort_result_presentations} WHERE vid = %d", $node->vid);
		pi_sort_result_presentations_insert($node);
	}
}

function pi_sort_result_presentations_delete(&$node) {
	db_query("DELETE FROM {pi_sort_result_presentations} WHERE nid = %d", $node->nid);
}

function pi_sort_result_presentations_load($node) {
	$result = new stdClass;
	$result->categories = pi_sort_result_presentations_get_choice($node);
	return $result;
}

function pi_sort_result_presentations_view($node, $teaser, $page = FALSE) {
	$activity_nid = pi_activity_get_activity_nid_for_content_nid($node->nid);

	$node = node_prepare($node, $teaser);

	$charts = pi_sort_result_presentations_get_charts($node);

	$charts_to_show = array();
	foreach ($charts as $chart_nid) {
		$result_presentation_activity_id = pi_activity_get_activity_nid_for_content_nid($chart_nid);
		$activity_link = pi_activity_build_link_for_child($activity_nid, $result_presentation_activity_id);
		
		$charts_to_show[$result_presentation_activity_id] = $activity_link;// .theme('pi_result_presentation', $nd);
	}

	$add_link = make_add_activity_link($activity_nid);
	$node->content['pi_sort_result_presentation_add_link'] = array(
			'#value' => $add_link,
			'#weight' => -3
	);

	$node->content['pi_sort_result_presentations'] = array(
			'#value' => theme('item_list', $charts_to_show),
			'#weight' => -1
	);
	return $node;
}

function pi_sort_result_presentations_create_shared_view($node) {
	$charts = pi_sort_result_presentations_get_charts($node);

	$charts_to_show = array();
	foreach ($charts as $chart_nid) {
		$result_presentation_activity_id = pi_activity_get_activity_nid_for_content_nid($chart_nid);
		$activity = node_load($result_presentation_activity_id);
		$activity_link = check_plain($activity->title);
		
		$charts_to_show[$result_presentation_activity_id] = $activity_link;
	}
	
	return theme('item_list', $charts_to_show);
}

function theme_pi_sort_result_presentations($node, $teaser, $result_presentations) {

	$output = '';
	$output = '<p>' . t('View and organise the presentations of your results.') . '</p>';
	$list = array();

	foreach ($result_presentations as $results) {
		$title_for_row = $results['title'];
		$description_for_row = $results['description'];

		//$rows[] =	'<div style="padding-left:40px; text-indent: -40px;margin-bottom:6px;"><span style="font-size:115%;font-weight:bold;padding-right:10px;">' . $title_for_row . '</span>' .
		//			'<div>' . $description_for_row . '</div>' .
		//		'</div>';
		$rows[] = array('data' => '<span class="heading">' . t($title_for_row) . '</span> ' . t($description_for_row), 'class' => 'activity');
	}

	//only display form and submit button if there are some entries
	if (count($rows) > 0) {
		$output .= theme('item_list', $rows, NULL, 'ul', array('class' => 'activity'));
	} else {
		$output .= "<p>No result presentations are available.</p>";
	}
	return $output;
}

/**
 * Theme for result presentations form
 */
function theme_pi_sort_result_presentations_node_form($form) {
	$output = '';

	drupal_add_tabledrag('onepageprofile-categories', 'order', 'sibling', 'onepageprofile-element');

	// Rows for the tabledrag
	$rows = array();

	$tree = &$form['onepageprofile_categories'];
	foreach (element_children($tree) as $key) {
		$tree[$key]['weight']['#attributes']['class'] = 'onepageprofile-element';

		$row_activity_id = get_activity_id_for_nid($key);

		$row = array();
		$row[] = drupal_render($tree[$key]['title']);
		$row[] = drupal_render($tree[$key]['weight']);

		$rows[] = array('data' => $row, 'class' => 'draggable');
	}

	// Build the output
	$activity = load_node($details->activity_id);

	$output .= '<p>' . t('View and organise the presentations of your results.') . '</p>';

	//only display form and submit button if there are some entries
	if (count($rows) > 0) {
		$output .= theme('table', $NULL, $rows, array('id' => 'onepageprofile-categories'));
	} else {
		if (arg(2) == 'add') {
			$output .= '<p> Press <strong>Save</strong> to start adding your results.</p>';
		} else {
			$output .= "<p>No result presentations are available.</p>";
		}
	}
	$output .= drupal_render($form);

	//$output .= theme('table', $header, $rows, array('id' => 'onepageprofile-categories'));
	//$output .= drupal_render($form);

	return $output;
}

/**
 * Load all the already sorted rows for results presentations
 */
function pi_sort_result_presentations_get_choice($node) {
	$query = "SELECT * FROM {pi_sort_result_presentations} WHERE {pi_sort_result_presentations}.nid = %d AND {pi_sort_result_presentations}.vid = %d ORDER BY weight ASC";
	$result = db_query($query, $node->nid, $node->vid);

	$results = array();
	while ($row = db_fetch_object($result)) {
		$loaded_node = node_load($row->result_presentations);
		if ($loaded_node) {
			$results[$row->result_presentations] = array(
					'#weight' => $row->weight,
					'#title' => check_plain($loaded_node->title)
			);
		}
	}
	return $results;
}

function pi_sort_result_presentations_get_charts($node) {
	$charts = pi_activity_get_children_content_nids_for_content_nid($node->nid);
	$query = "SELECT result_presentations, weight FROM {pi_sort_result_presentations} WHERE {pi_sort_result_presentations}.vid=%d";
	$result = db_query($query, $node->vid);
	$weights = array();
	while ($row = db_fetch_array($result)) {
		$weights[$row['result_presentations']] = intval($row['weight']);
	}

	usort($charts, function($a, $b) use($weights) {
						if (isset($weights[$a]) && isset($weights[$b])) {
							return $weights[$a] - $weights[$b];
						} else if (isset($weights[$a])) {
							return -1;
						} else if (isset($weights[$b])) {
							return 1;
						} else {
							return 0;
						}
					});


	return $charts;
}