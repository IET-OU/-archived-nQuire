<?php

// $Id: pi_data.module,v 1.2 2009/07/13 ou_mbg Exp $

/**
 * @file
 * Module for creating "pi_data" node type
 */

/**
 * Implementation of pi_data_node_info().
 */
function pi_data_node_info() {
  // We return an array since a module can define multiple node types.
  // We're only defining one node type, type 'pi_data'.
  return array(
      'pi_data' => array(
          'name' => t('Inquiry add data'), // Required.
          'module' => 'pi_data', // Required.
          'description' => t('What is your data?'), // Required.
          'has_title' => FALSE,
          'title_label' => t('Collected Data'),
          'has_body' => FALSE,
          'locked' => TRUE
      )
  );
}

/**
 * Implementation of pi_data_perm().
 */
function pi_data_perm() {
  
}

/**
 * Implementation of pi_data_access().
 */
function pi_data_access($op, $node, $account) {
  global $user;
  $uid = $user->uid;
  $details = get_inquiry_details_from_current_path();

  if (is_numeric($details->activity_id)) {

    if ($op == 'create') {
      return pi_activity_check_node_function($details->activity_id, $user->uid, 'edit');
    }
    if ($op == 'update') {
      return pi_activity_check_node_function($details->activity_id, $user->uid, 'edit');
    }
    if ($op == 'delete') {
      if (arg(0) == 'node' && arg(2) == 'delete') {
        //get inquiry for session id and activity
        $nid = arg(1);
        $activity_id = pi_activity_get_activity_nid_for_content_nid($nid);
        $inquiry_id = pi_activity_get_inquiry_nid($activity_id);
        if ($inquiry_id && $activity_id) {
          return pi_activity_check_node_function($activity_id, $uid, 'edit');
        } else {
          return FALSE;
        }
      } else {
        return pi_activity_check_node_function($details->activity_id, $user->uid, 'edit');
      }
    }
  }
}

/**
 * hook_form() for pi_data - dynamically generates the add data form based on selected, available measures and their weights
 */
function pi_data_form(&$node) {
  global $user;
  $node_details = get_inquiry_details_from_current_path();

  if (is_numeric($node_details->activity_id)) {
    $current_activity = node_load($node_details->activity_id);
  }

  if ($current_activity->title) {
    $users_group = get_group_of_type($user->uid, $current_activity->audience, $node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id);
    if ($users_group != false) {
      $group = node_load($users_group);
      $sort_for = $group->title;
    } else {
      $sort_for = $user->name;
    }
    $node_title = check_plain(t('Data for ') . $sort_for);
  } else {
    $type = node_get_types('type', $node);
    $node_title = $type->name;
  }

  // Build the form
  $form = array();
  $form['title'] = array(
      '#type' => 'hidden',
      '#value' => $node_title,
  );


  $measures_param = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);

  if ($measures_param) {
    $measures_node = node_load($measures_param);
    $measure_rows = $measures_node->measures_list;
  }

  $form['onepageprofile_categories'] = array(
      '#tree' => TRUE,
  );

  $tree = &$form['onepageprofile_categories'];

  if (is_array($measure_rows)) {
    foreach ($measure_rows as $measure_info_nid => $measure_selection) {
      if ($measure_selection['#status'] == 'key' || $measure_selection['#status'] == 'selected') {
        //$key = t($measures_param . "-" . $measure_info_nid);
        $key = $measures_param . '-' . $measure_info_nid;
        $measure_info = node_load($measure_info_nid);

        //format the measure units
        if (isset($measure_info->units_short) AND ($measure_info->units_short != '')) {
          $units = " (" . $measure_info->units_short . ")";
        } elseif (isset($measure_info->units) AND ($measure_info->units != '')) {
          $units = " (" . $measure_info->units . ")";
        } else {
          $units = "";
        };

        //set as required field if a key measure
        if ($measure_selection['#status'] == 'key') {
          $required_value = TRUE;
        } else {
          $required_value = FALSE;
        }

        switch ($measure_info->field_type) {
          // field_type = textfield
          case 'textfield':
            //$prefix .= "textfield";
            $tree[$key]['value'] = array(
                '#type' => 'textfield',
                '#title' => t($measure_info->title . $units),
                '#required' => $required_value,
                '#default_value' => $node->measures[$key]['#value'],
                '#size' => $measure_info->textfield_size,
                '#weight' => $measure_selection['#weight']
            );
            break;
          case 'textarea':
            //$prefix .= "textarea";
            $tree[$key]['value'] = array(
                '#type' => 'textarea',
                '#title' => t($measure_info->title . $units),
                '#required' => $required_value,
                '#default_value' => $node->measures[$key]['#value'],
                '#resizable' => TRUE,
                '#cols' => $measure_info->textarea_cols,
                '#rows' => $measure_info->textarea_rows,
                '#weight' => $measure_selection['#weight']
            );
            break;
          // field_type = select or radios
          case 'select':
          case 'radios':
            if ($measure_info->list_options) {
              $options = array();
              foreach (explode("\n", $measure_info->list_options) as $opt) {
                //trim added around item to prevent the following error:
                //An illegal choice has been detected. Please contact the site administrator.
                $item = trim(substr($opt, 0, 64)); //**now use value as key
                $options[$item] = $item;
              };
            } elseif ($measure_info->content_options) {
              $options = array();
              $query = "SELECT nid, title FROM {node} WHERE type = '%s'";
              $results = db_query($query, $measure_info->content_options);
              while ($result = db_fetch_object($results)) {
                $options[$result->title] = $result->title; //now use value as key
              }
            };

            $tree[$key]['value'] = array(
                '#type' => $measure_info->field_type,
                '#title' => t($measure_info->title . $units),
                '#required' => $required_value,
                '#default_value' => $node->measures[$key]['#value'],
                '#options' => $options,
                '#weight' => $measure_selection['#weight']
            );
            break;
          // field_type = checkboxes
          case 'checkboxes':
            $options = array();
            if ($measure_info->list_options) {
              foreach (explode("\n", $measure_info->list_options) as $opt) {
                $option_item = substr($opt, 0, 16);
                $options[$option_item] = $option_item;
              };
            };

            $select = array();
            if ($node->$form_key) {
              foreach (explode(",", $node->$form_key) as $sel) {
                $select[] = substr($sel, 0, 16);
              };
            };

            $tree[$key]['value'] = array(
                '#type' => 'checkboxes',
                '#title' => t($measure_info->title . $units),
                '#required' => $required_value,
                '#default_value' => $node->measures[$key]['#value'],
                '#options' => $options,
                '#weight' => $measure_selection['#weight']
            );
            break;
          case 'upload-file':
            $form['#attributes'] = array('enctype' => "multipart/form-data");
            $tree[$key]['value'] = array(
                '#type' => 'file',
                '#title' => t($measure_info->title),
                '#options' => $options,
                '#weight' => $measure_selection['#weight'],
                '#default_value' => $node->measures[$key]['#value']
            );
            if (isset($node->measures[$key]['#value'])) {
              $tree[$key]['value']['#suffix'] = "<a href='" . file_download_url($node->measures[$key]['#value']) . "'>" . $measure['#value'] . "'</a>";
              $form[$key] = array(
                  '#type' => 'hidden',
                  '#weight' => $measure_selection['#weight'],
                  '#default_value' => $node->measures[$key]['#value']
              );
            }
            break;
          case 'upload-image':
            $form['#attributes'] = array('enctype' => "multipart/form-data");
            $tree[$key]['value'] = array(
                '#type' => 'file',
                '#title' => t($measure_info->title),
                '#options' => $options,
                '#weight' => $measure_selection['#weight'],
                '#default_value' => $node->measures[$key]['#value']
            );
            if (isset($node->measures[$key]['#value'])) {
              $image_node = node_load($node->measures[$key]['#value']);
              $tree[$key]['value']['#suffix'] = '<div>' . image_display($image_node) . '</div>';
              $form[$key] = array(
                  '#type' => 'hidden',
                  '#weight' => $measure_selection['#weight'],
                  '#default_value' => $node->measures[$key]['#value']
              );
            }
            break;
        }
      };
    };
  }
  $form['#prefix'] = $prefix;

  return $form;
}

/*
  //unused
  function get_measure_array($psm_id) {
  $query = "SELECT value FROM pi_collected_data WHERE psm_id = " . $psm_id . " ";
  $db_result = db_fetch_object(db_query($query));
  $db_result = $db_result->value;
  $array = explode(",", $db_result);
  return $array;
  }
 */

/**
 * Implementation of hook_validate().
 */
function pi_data_validate($node) {
  foreach ($node->onepageprofile_categories as $key => $measure) {
    $hyphen_pos = strrpos($key, "-");
    $selected_measure_nid = substr($key, 0, $hyphen_pos);
    $available_measure_nid = substr($key, $hyphen_pos + 1);
    $value = $measure['value'];
    if (is_array($value)) {
      $value = implode(",", $value);
    }
    $available_measures_node = node_load($available_measure_nid);

    if ($available_measures_node->data_type == 'numeric') {
      if ($value && !is_numeric($value)) {
        form_set_error($key, t('This should be a number.'));
      }
    }
  }
}

/**
 * hook_insert() - add the additional data for a pi_data node to the pi_collected_data table
 * @param $node the node to be inserted
 */
function pi_data_insert($node) {
  db_query("INSERT INTO {pi_collected_data} (nid, vid, key_question_nid) VALUES (%d, %d, %d)", $node->nid, $node->vid, $node->key_question_nid);
  foreach($node->values as $measure_nid => $value) {
    db_query("INSERT INTO {pi_collected_data_values} (nid, vid, measure_nid, value) VALUES (%d, %d, %d, '%s')", $node->nid, $node->vid, $measure_nid, $value);
  }
}

/**
 * Implementation of hook_update().
 */
function pi_data_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    pi_data_insert($node);
  } else {
    db_query("UPDATE {pi_collected_data} SET key_question_nid='%d' WHERE vid=%d", $node->key_question_nid, $node->vid);

    $measure_nids = array();
    $existing_values_result = db_query("SELECT measure_nid FROM {pi_collected_data_values} WHERE vid=%d", $node->vid);
    while ($row = db_fetch_array($existing_values_result)) {
      $measure_nids[] = $row['measure_nid'];
    }

    foreach ($measure_nids as $nid) {
      if (!isset($node->values[$nid])) {
        db_query("DELETE FROM {pi_collected_data_values} WHERE measure_nid=%d AND vid=%d", $nid, $node->vid);
      }
    }
    foreach ($node->values as $nid => $value) {
      if (in_array($nid, $measure_nids)) {
        db_query("UPDATE {pi_collected_data_values} SET value='%s' WHERE measure_nid=%d AND vid=%d", $value, $nid, $node->vid);
      } else {
        db_query("INSERT INTO {pi_collected_data_values} (nid, vid, measure_nid, value) VALUES (%d, %d, %d, '%s')", $node->nid, $node->vid, $nid, $value);
      }
    }
  }
}

/**
 * hook_delete() for pi_data, also deletes data values from pi_collected_data and attached images and files
 */
function pi_data_delete(&$node) {
  db_query('DELETE FROM {pi_collected_data_values} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {pi_collected_data} WHERE nid = %d', $node->nid);

  //Remove the data from the sort table if exists
  db_query('DELETE FROM {pi_sort_data} WHERE data = %d', $node->nid);
}

/**
 * Implementation of hook_load() - gets the pi_data time and also associated pi_collected_data rows
 */
function pi_data_load($node) {
  $result = new stdClass;
  $query = "SELECT key_question_nid FROM {pi_collected_data} WHERE vid=%d";
  $row = db_fetch_array(db_query($query, $node->vid));
  if ($row) {
    $result->key_question_nid = $row['key_question_array'];
  }

  $result->measures = pi_available_measures_get_measure_nids_for_data($node->nid);

  $result->values = array();
  $values_query = "SELECT measure_nid, value FROM {pi_collected_data_values} WHERE vid=%d";
  $values_query_result = db_query($values_query, $node->vid);
  while ($row = db_fetch_array($values_query_result)) {
    $result->values[$row['measure_nid']] = $row['value'];
  }

  return $result;
}

/**
 * Implementation of pi_data_view().
 */
function pi_data_view($node, $teaser = FALSE, $page = FALSE) {
  global $user;
  $details = get_inquiry_details_from_current_path();

  // Use Drupal's default node view.
  $node = node_prepare($node, $teaser);

  $node->content['pi_data'] = array(
      '#value' => theme('pi_data', $node, $teaser),
      '#weight' => 2
  );

  // This is actually of type "pi_sort_measures"
  $selected_measures_nid = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);

  // If there's no sort_measures then just show all available
  if (isset($selected_measures_nid)) {
    $selected_measures_node = node_load($selected_measures_nid);
    if ($selected_measures_node) {
      $selected_measures_to_show = $selected_measures_node->measures_list;
      $measures_to_show = $node->measures;
      if (is_array($selected_measures_to_show)) {
        foreach ($selected_measures_to_show as $measure_nid => $measure) {
          $key = check_plain($selected_measures_nid . "-" . $measure_nid);
          $measure_type = node_load($measure_nid);
          if (array_key_exists($key, $measures_to_show)) {
            $measure_value = $node->measures[$key]['#value'];
          } else {
            $measure_value = NULL;
          }
          $node->content[$key] = array(
              '#value' => theme('pi_data_measure', $measure, $measure_type, $measure_value, $teaser),
              '#weight' => $measures_count++
          );
        }
      }
    }
  }
  return $node;
}

/**
 * Implementation of hook_theme().
 */
function pi_data_theme() {
  return array(
      'pi_data_node_form' => array(
          'arguments' => array('form'),
      ),
      'pi_data' => array(
          'arguments' => array('node', 'teaser'),
      ),
      'pi_data_measure' => array(
          'arguments' => array('measure', 'measure_type', 'measure_value', 'teaser'),
      ),
  );
}

function theme_pi_data_node_form($form) {
  global $user;

  $details = get_inquiry_details_from_current_path();
  $activity = node_load($details->activity_id);
  if ($activity->body) {
    $output .= '<p>' . check_plain($activity->body) . '</p>';
  } else {
    $output .= '<p>' . t('Collect data.') . '</p>';
  }

  //$measures_param = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);
  $measures_param = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);

  if ($measures_param) {
    $output .= drupal_render($form);
  } else {
    $output .= "<p>No measures are available.</p>";
  }
  return $output;
}

function theme_pi_data($node, $teaser) {
  $output = '';
  return $output;
}

/**
 * theme function to display one measure in view mode for pi_data
 * @param node(pi_draggable_measure) $measure the measure selection data for the form
 * @param node(pi_available_measures) $measure_type the description of the measure
 * @param string $measure_value the measure value
 */
function theme_pi_data_measure($measure, $measure_type, $measure_value, $teaser) {
  $output = '';

  $show_status = array('key', 'selected');

  if (in_array($measure['#status'], $show_status)) {
    //format the measure units
    if (isset($measure_type->units_short) AND ($measure_type->units_short != '')) {
      $units = " (" . check_plain($measure_type->units_short) . ")";
    } else {
      if (isset($measure_type->units) AND ($measure_type->units != '')) {
        $units = " (" . check_plain($measure_type->units) . ")";
      } else {
        $units = "";
      }
    }

    switch ($measure_type->field_type) {
      case 'upload-file':
        //pi_debug_message($measure_value);
        if ($teaser) {
          $output .= "" . check_plain($measure_type->title) . ": ";
          $output .= "<a href='" . file_download_path($measure_value) . "'>" . t("Download") . "</a> ";
        } else {
          $output .= "<p>" . check_plain($measure_type->title) . ": ";
          $output .= "<a href='" . file_download_path($measure_value) . "'>" . t("Download") . "</a><p>";
        }
        break;
      case 'upload-image':
        $image_node = node_load($measure_value);
        //pi_debug_message($measure_value);
        if ($image_node->type == 'image') {
          if ($teaser) {
            $output .= "<div>" . check_plain($measure_type->title) . ": </div>";
            $output .= "<div>" . check_plain($image_node->title) . "</div>";
          } else {
            $output .= "<div>" . check_plain($measure_type->title) . ": </div>";
            $output .= "<div>" . image_display($image_node) . "</div>";
          }
        }
        break;
      default:
        if ($teaser) {
          $output .= check_plain($measure_type->title . $units) . ": ";
          $output .= check_plain($measure_value) . ", ";
        } else {
          $output .= "<p>" . check_plain($measure_type->title . $units) . ": ";
          $output .= nl2br(check_plain($measure_value)) . ".</p>";
        }
    }
  }
  return $output;
}

