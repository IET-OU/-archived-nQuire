<?php
// $Id: pi_data.module,v 1.2 2009/07/13 ou_mbg Exp $

/**
 * @file
 * Module for creating "pi_data" node type
 */


/**
 * Implementation of pi_data_node_info().
 */
function pi_data_node_info() {
// We return an array since a module can define multiple node types.
// We're only defining one node type, type 'pi_data'.
    return array(
    'pi_data' => array(
    'name' => t('Data'), // Required.
    'module' => 'pi_data',  // Required.
    'description' => t('What is your data?'), // Required.
    'has_title' => FALSE,
    'title_label' => t('Data'),
    'has_body' => TRUE,
    'body_label' => t('Data'),
    'locked' => TRUE
    )
    );
}

/**
 * Implementation of pi_data_perm().
 */
function pi_data_perm() {
}

/**
 * Implementation of pi_data_access().
 */
function pi_data_access($op, $node) {
  global $user;
  $uid = $user->uid;
  $details = get_inquiry_details_from_current_path();
  if ($op == 'create') {
    return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
  }
  if ($op == 'update') {
    return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
  }
	if ($op == 'delete') {
		if (arg(0) == 'node' && arg(2) == 'delete') {
		//get inquiry for session id and activity
			$nid = arg(1);
			$sid = get_current_session_id();
			$inquiry_id = get_current_inquiry_for_session_and_user_id($sid, $uid);
			$inquiry_id = $inquiry_id->inquiry_id;
			$activity_id = get_activity_id_for_nid($nid);
			if($inquiry_id && $activity_id) {
				return check_node_function_of_activity ($inquiry_id, $activity_id, $uid, 'edit');
			}
			else {
				return FALSE;
			}
		}
		else {
			return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
		}
	}
}


/**
 * Implementation of pi_data_form().
 */
function pi_data_form(&$node) {

// Get metadata for this node type
// (we use it for labeling title and body fields).
// We defined this in pi_data_node_info().

    global $user;
		$node_details = get_inquiry_details_from_current_path();
  	if (is_numeric($node_details->activity_id)) {
  		$current_activity = load_activity($node_details->activity_id);
  	}
  	
  	if ($current_activity->name) {
  		drupal_set_title(t($current_activity->name));
  	}

    $measures_param = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);

    //drupal_set_title(t($current_activity->name));

    if ($measures_param) {
        $measures_node = node_load($measures_param);
        $measure_rows = $measures_node->categories;
    }

    $form = array();

    $type = node_get_types('type', $node);
    $form['title'] = array (
        '#type' => 'hidden',
        '#value' => 'Data',//check_plain($type->title),
    );

    $form['onepageprofile_categories'] = array(
        '#tree'   => TRUE,
    );

    $tree = &$form['onepageprofile_categories'];
		
		if(is_array($measure_rows)) {
    foreach ($measure_rows as $measure_nid => $measure_selection) {

        if($measure_selection['#status'] == 'key' || $measure_selection['#status'] == 'selected') {
            $key = t($measures_param . "-" . $measure_nid);

            $measure = node_load($measure_nid);

            //format the measure units
            if (isset($measure->units_short) AND ($measure->units_short !='')) {
                $units = " (" . $measure->units_short . ")";
            }
            elseif (isset($measure->units) AND ($measure->units !='')) {
                $units = " (" . $measure->units . ")";
            }
            else {
                $units = "";
            };

            //set as required field if a key measure
            if ($measure_selection['#status'] == 'key') {
                $required_value = TRUE;
            }
            else {
                $required_value = FALSE;
            };

            // field_type = textfield
            if ($measure->field_type == 'textfield') {
            //$prefix .= "textfield";
                $tree[$key]['value'] = array(
                    '#type' => 'textfield',
                    '#title' => t($measure->title . $units),
                    '#required' => $required_value,
                    '#default_value' => t($node->categories[$key]['#value']),
                    '#size' => t($measure->textfield_size),
                    '#weight' => $measure_selection['#weight']
                );
            }
            elseif ($measure->field_type == 'textarea') {
            //$prefix .= "textarea";
                $tree[$key]['value'] = array(
                    '#type' => 'textarea',
                    '#title' => t($measure->title . $units),
                    '#required' => $required_value,
                    '#default_value' => t($node->categories[$key]['#value']),
                    '#resizable' => TRUE,
                    '#cols' => t($measure->textarea_cols),
                    '#rows' => t($measure->textarea_rows),
                    '#weight' => $measure_selection['#weight']
                );
            }
            // field_type = select or radios
            elseif ($measure->field_type == 'select' || $measure->field_type == 'radios') {

                if ($measure->list_options) {
                    $options = array();
                    foreach (explode("\n",$measure->list_options) as $opt) {
                    //trim added around item to prevent the following error:
                    //An illegal choice has been detected. Please contact the site administrator.
                        $item = trim(substr($opt,0,64));//**now use value as key
                        $options[$item] = $item;
                    };
                }
                elseif ($measure->content_options) {
                    $options = array();
                    $query = "SELECT nid, title FROM node WHERE type = '" . $measure->content_options . "' ";
                    $results = db_query($query);
                    while ($result = db_fetch_object($results)) {
                        $options[$result->title] = $result->title;//now use value as key
                    }
                };

                $tree[$key]['value'] = array(
                    '#type' => t($measure->field_type),
                    '#title' => t($measure->title . $units),
                    '#required' => $required_value,
                    '#default_value' => t($node->categories[$key]['#value']),
                    '#options' => $options,
                    '#weight' => $measure_selection['#weight']
                );
            }
            // field_type = checkboxes
            elseif ($measure->field_type == 'checkboxes') {

                $options = array();
                if ($measure->list_options) {
                    foreach (explode("\n",$measure->list_options) as $opt) {
                        $option_item = substr($opt,0,16);
                        $options[$option_item] = $option_item;
                    };
                };

                $select = array();
                if ($node->$form_key) {
                    foreach (explode(",",$node->$form_key) as $sel) {
                        $select[] = substr($sel,0,16);
                    };
                };

                $tree[$key]['value'] = array(
                    '#type' => 'checkboxes',
                    '#title' => t($measure->title . $units),
                    '#required' => $required_value,
                    '#default_value' => t($node->categories[$key]['#value']),
                    '#options' => $options,
                    '#weight' => $measure_selection['#weight']
                );
            };
        };
    };
		}
    $form['#prefix'] = $prefix;

    return $form;
}


//unused
function get_measure_array($psm_id) {
    $query = "SELECT value FROM pi_collected_data WHERE psm_id = " . $psm_id . " ";
    $db_result = db_fetch_object(db_query($query));
    $db_result = $db_result->value;
    $array = explode(",", $db_result);
    return $array;
}


/**
 * Implementation of hook_validate().
 */
function pi_data_validate($node) {
    while ($measure = current($node->onepageprofile_categories)) {
        $key = key($node->onepageprofile_categories);
        $hyphen_pos = strrpos($key, "-");
        $selected_measure_nid = substr($key, 0, $hyphen_pos);
        $available_measure_nid = substr($key, $hyphen_pos + 1);
        $value = $measure['value'];
        if (is_array($value)) {
            $value = implode(",", $value);
        }
        $available_measures_node = node_load($available_measure_nid);
        if($available_measures_node->data_type == 'numeric') {
            if ($value && !is_numeric($value)) {
                form_set_error($key, t('This should be a number.'));
            }
        }
        next($node->onepageprofile_categories);
    }
    reset($node->onepageprofile_categories);
}


/**
 * Implementation of pi_data_insert().
 */
function pi_data_insert($node) {
    while ($measure = current($node->onepageprofile_categories)) {
        $key = key($node->onepageprofile_categories);
        $hyphen_pos = strrpos($key, "-");
        $selected_measure_nid = substr($key, 0, $hyphen_pos);
        $available_measure_nid = substr($key, $hyphen_pos + 1);
        //print  "node" . substr($key, 0, $hyphen_pos) . "measure" . substr($key, $hyphen_pos + 1) . "value" . $measure['value'];

        db_query("INSERT INTO pi_collected_data (nid, vid, selected_measures_nid, available_measure_nid, value) VALUES ('" . $node->nid . "', '" . $node->vid . "', '" . $selected_measure_nid . "', '" . $available_measure_nid . "', '" . $measure['value'] . "') ");

        next($node->onepageprofile_categories);
    }
    reset($node->onepageprofile_categories);
}

/**
 * Implementation of hook_update().
 */
function pi_data_update($node) {
// if this is a new node or we're adding a new revision,
    if ($node->revision) {
        pi_data_insert($node);
    }
    else {
    //	this methods removes all data assoicated with the vid whether or not a current selected/key measure
    //		db_query("DELETE FROM pi_collected_data WHERE vid = '" . $node->vid . "' ");

    //	this method only deletes data assoicated with current key/selected measures
        while ($measure = current($node->onepageprofile_categories)) {
            $key = key($node->onepageprofile_categories);
            $hyphen_pos = strrpos($key, "-");
            $selected_measure_nid = substr($key, 0, $hyphen_pos);
            $available_measure_nid = substr($key, $hyphen_pos + 1);
            //print $node->nid . '*' . $node->vid . '*' . $selected_measure_nid . '*' . $available_measure_nid;
            db_query("DELETE FROM pi_collected_data WHERE nid = '" . $node->nid . "' AND vid = '" . $node->vid . "' AND selected_measures_nid = '" . $selected_measure_nid . "' AND available_measure_nid = '" . $available_measure_nid . "' ");

            next($node->onepageprofile_categories);
        }
        reset($node->onepageprofile_categories);

        pi_data_insert($node);
    }
}

/**
 * Implementation of pi_data_delete().
 */
function pi_data_delete(&$node) {
    $query = "DELETE FROM pi_collected_data WHERE nid = '" . $node->nid . "' ";
    db_query($query);
}


//needs to be reintroduced
function is_checkboxes_measure($id) {
    $query = "SELECT measure_nid FROM pi_selected_measures WHERE psm_id = " . $id . " ";
    $measure_nid = db_fetch_object(db_query($query));
    $measure_nid = $measure_nid->measure_nid;
    $measure = node_load($measure_nid);
    if ($measure->data_type) {
        return $measure->data_type == 3;
    }
    else {
        return FALSE;
    }
}


/**
 * Implementation of pi_data_load().
 */
function pi_data_load($node) {
    $result = new stdClass;
    $result->categories = pi_data_return_results($node);
    return $result;
}

function pi_data_return_results($node) {
    $categories = array();
    $query = "SELECT * FROM pi_collected_data WHERE nid = '" . $node->nid . "' AND vid = '" . $node->vid . "' ";
    $db_result = db_query($query);

    while($row = db_fetch_object($db_result)) {
        $key = t($row->selected_measures_nid . "-" . $row->available_measure_nid);
        $available_measure_node = node_load($row->available_measure_nid);
        $selected_measure_node = node_load($row->selected_measures_nid);
        $weight = $selected_measure_node->categories[$row->available_measure_nid]['#weight'];
        if ($available_measure_node->data_type == 'checkboxes') {
            $value = explode(",", $row->value);
        }
        else {
            $value = $row->value;
        }
        $categories[$key] = array(
            '#title' => $available_measure_node->title,
            '#value'  => $value,
            '#weight'  => $weight,
        );
    }
    uasort($categories, "my_weight_compare");
    return $categories;
}


/**
 * Implementation of pi_data_view().
 */
function pi_data_view($node, $teaser = FALSE, $page = FALSE) {
    if (!$teaser) {
    // Use Drupal's default node view.
        $node = node_prepare($node, $teaser);

        $node->content['pi_data'] = array(
            '#value' => theme('pi_data', $node),
            '#weight' => 2
        );
    }

    if ($teaser) {
    // Use Drupal's default node view.
        $node = node_prepare($node, $teaser);
    }

    return $node;
}

/**
 * Implementation of hook_theme().
 */
function pi_data_theme() {
    return array(
    'pi_data_node_form' => array(
    'arguments' => array('form'),
    ),
    'pi_data' => array(
    'arguments' => array('node'),
    ),
    );
}

function theme_pi_data_node_form($form) {
	$details = get_inquiry_details_from_current_path();
    $activity = load_activity($details->activity_id);
    if ($activity->description) {
    	$output  .= '<p>' . t($activity->description) . '</p>';
    }
    else {
    	$output  .= '<p>' . t('Order your key questions.') . '</p>';
    }

    //  $output .= drupal_render($form);

    $output .= drupal_render($form);
    return $output;
}

function theme_pi_data($node) {
	$details = get_inquiry_details_from_current_path();
	  	if (is_numeric($details->activity_id)) {
  		$current_activity = load_activity($details->activity_id);
  	}
  	
  	if ($current_activity->name) {
  		drupal_set_title(t($current_activity->name));
  	}
  	
    global $user;
    $measures_param = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);
    if ($measures_param) {
        $measures_node = node_load($measures_param);
        $measure_rows = $measures_node->categories;
    }

    $output = '';

    $rows = array();
		if(is_array($measure_rows)) {
    foreach ($measure_rows as $measure_nid => $measure_selection) {
        if($measure_selection['#status'] == 'key' || $measure_selection['#status'] == 'selected') {
            $key = t($measures_param . "-" . $measure_nid);
            $measure = node_load($measure_nid);
            //format the measure units
            if (isset($measure->units_short) AND ($measure->units_short !='')) {
                $units = " (" . $measure->units_short . ")";
            }
            elseif (isset($measure->units) AND ($measure->units !='')) {
                $units = " (" . $measure->units . ")";
            }
            else {
                $units = "";
            };
            
            $output .= "<p><strong>" . $measure->title . $units. ": </strong>";
						$output .= $node->categories[$key]['#value'] . "</p>";

        };
    };
		}
    return $output;
}


