<?php

// $Id: pi_result_presentations.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "result presentations" node type
 */

/**
 * Implementation of hook_node_info().
 */
function pi_result_presentations_node_info() {
  return array(
      'pi_result_presentations' => array(
          'name' => t('Inquiry add result presentations'), // Required.
          'module' => 'pi_result_presentations', // Required.
          'description' => t('A presentation for exploring part of a collected dataset?'), // Required.
          'has_title' => TRUE,
          'title_label' => t('Short title'),
          'has_body' => FALSE,
          'locked' => TRUE
      )
  );
}

/**
 * Implementation of hook_perm().
 */
function pi_result_presentations_perm() {
  return array('create pi_result_presentations content', 'edit pi_result_presentations');
}

/**
 * Implementation of hook_access().
 */
function pi_result_presentations_access($op, $node, $account) {
	return TRUE;
  global $user;
  $details = get_inquiry_details_from_current_path();

  if ($op == 'create') {
    return pi_activity_check_node_function($details->activity_id, $user->uid, 'edit');
  }

  if ($op == 'update') {
    return pi_activity_check_node_function($details->activity_id, $user->uid, 'edit');
  }
  if ($op == 'delete') {
    if (arg(0) == 'node' && arg(2) == 'delete') {
      //get inquiry for session id and activity
      $nid = arg(1);
      $activity_id = pi_activity_get_activity_nid_for_content_nid($nid);
      $inquiry_id = pi_activity_get_inquiry_nid($activity_id);
      if ($inquiry_id && $activity_id) {
        return pi_activity_check_node_function($activity_id, $uid, 'edit');
      } else {
        return FALSE;
      }
    } else {
      return pi_activity_check_node_function($details->activity_id, $user->uid, 'edit');
    }
  }
}

/**
 * Implementation of hook_form().
 */
function pi_result_presentations_form(&$node, $form_status) {
  global $user;
  $node_details = get_inquiry_details_from_current_path();



  //**Pick up the key questions
  // Add the categories of existing nodes and the options list for new nodes
  $key_questions_nid = find_sort_key_questions_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);
  if (isset($key_questions_nid)) {
    $key_questions_node = node_load($key_questions_nid);
    $sorted_key_questions = $key_questions_node->categories;
  } else {
    $sorted_key_questions = array();
  }

  $all_key_questions = pi_sort_key_questions_get_options();

  $key_questions_to_show = pi_merge_content_item_lists($sorted_key_questions, $all_key_questions);

  $key_question_options = array();
  foreach ($key_questions_to_show as $key => $question) {
    $key_question_options[$key] = $question['#title'];
  }


  $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#description' => t('Enter a title for your results presentation'),
      '#weight' => -10
  );

  if (count($key_question_options) > 0) {
    $keys = array_keys($key_question_options);
    $form['key_question_id'] = array(
        '#type' => 'select',
        '#title' => t('Key question to investigate'),
        '#required' => TRUE,
        '#default_value' => nquire_commons_form_node_default_value($node, 'key_question_id', $form_state, 'key_question_id', $keys[0]),
        '#description' => t('Select a key question to investigate'),
        '#options' => $key_question_options,
        '#weight' => 0
    );
  };

  $data_sets_nids = pi_sort_data_get_activities($node_details->inquiry_id);
  if (count($data_sets_nids) > 0) {

    if (count($data_sets_nids) === 1) {
      $data_set_nid = $data_sets_nids[0];

      $form['data_set_activity_nid'] = array(
          '#type' => 'hidden',
          '#default_value' => $data_set_nid,
      );
    } else {
      $data_set_options = array();
      foreach ($data_set_nid as $nid) {
        $data_set_activity = node_load($nid);
        $data_set_options[$nid] = check_plain($data_set_activity->title);
      }
      $data_set_nid = nquire_commons_form_node_default_value($node, 'data_set_activity_nid', $form_state, 'data_set_activity_nid', $data_sets_nids[0]);
      $form['data_set_activity_nid'] = array(
          '#type' => 'select',
          '#title' => t('Select the data set'),
          '#description' => t('Here you can select the data gathering activity from which the data to paint the graph is retrieved.'),
          '#required' => TRUE,
          '#default_value' => $data_set_nid,
      );
    }

    $measure_nids = pi_methodology_get_measures($data_set_nid, 'key_dependent');

    $methodology = pi_methodology_find_user_content($user->uid, $node_details->inquiry_id);
    if ($methodology && isset($methodology->measures[$data_set_nid])) {
      $filtered_measure_nids = array();
      $regions = array('key', 'dependent');
      foreach ($regions as $region) {
        foreach ($methodology->measures[$data_set_nid][$region] as $measure_nid) {
          if (in_array($measure_nid, $measure_nids)) {
            $filtered_measure_nids[] = $measure_nid;
          }
        }
      }
    } else {
      $filtered_measure_nids = $measure_nids;
    }

    $presentation_measures = array();
    foreach ($filtered_measure_nids as $nid) {
      $measure = node_load($nid);
      $submeasures = pi_data_tools_measure_plugin_get_submeasure_keys($measure);
      if (is_array($submeasures)) {
        foreach ($submeasures as $key) {
          $presentation_measures[] = array(
              'key' => $key,
              'title' => pi_data_tools_measure_plugin_submeasure_get_title($key),
              'status' => 'unselected',
              'weight' => 0,
              'node' => $measure,
          );
        }
      } else {
        $presentation_measures[] = array(
            'key' => $nid,
            'title' => pi_data_tools_measure_plugin_submeasure_get_title($nid),
            'status' => 'unselected',
            'weight' => 0,
            'node' => $measure,
        );
      }
    }

    $weight_set = FALSE;
    $max_weight = 0;
    foreach ($presentation_measures as &$measure_status) {
      if (isset($node->measure_selection[$measure_status['key']])) {
        $weight = (int) $node->measure_selection[$measure_status['key']]['weight'];
        $max_weight = $weight_set ? max($max_weight, $weight) : $weight;
        $weight_set = TRUE;

        $measure_status['status'] = $node->measure_selection[$measure_status['key']]['status'];
        $measure_status['weight'] = $weight;
      }
    }
    foreach ($presentation_measures as &$measure_status) {
      if (!isset($node->measure_selection[$measure_status['key']])) {
        $measure_status['weight'] = ++$max_weight;
      }
    }

    // onepageprofile_categories and tree used for draggable menu items
    $form['onepageprofile_categories'] = array(
        '#tree' => TRUE,
        '#weight' => 0
    );

    $tree = &$form['onepageprofile_categories'];

    $status_options = array('unselected' => 'Unselected', 'selected' => 'Selected');
    foreach ($presentation_measures as $presentation_measure) {
      $key = $presentation_measure['key'];

      // add $tree entries for current category (i.e. $key)
      $tree[$key]['title'] = array(
          '#value' => $presentation_measure['title'],
      );

      $tree[$key]['weight'] = array(
          '#type' => 'weight',
          '#delta' => 100,
          '#default_value' => $presentation_measure['weight'],
      );

      $tree[$key]['status'] = array(
          '#type' => 'select',
          '#default_value' => $presentation_measure['status'],
          '#options' => $status_options,
      );
    }
  }

  $prefix = '';
  $form['#prefix'] = $prefix;

  return $form;
}

/**
 * This function validates the presentaion the user wants to create.
 * It checks that non of the selected y axis measures are non numeric.
 * Additionally it checks if at least 2 measures are selected (x+y)
 * @param $form
 * @param $form_state
 */
function pi_result_presentations_validate(&$form, &$form_state) {
  $categories = $form->onepageprofile_categories;


  if (is_array($categories)) {

    uasort($categories, function($a, $b) {
              $diff = $a['weight'] - $b['weight'];
              $output = $diff > 0 ? 1 : ($diff < 0 ? -1 : 0);
              return $output;
            }
    );

    $x_key = NULL;
    $y_keys = array();
    $y_non_numeric = array();
    $y_keys_count = 0;

    foreach ($categories as $measure_id => $category) {
      if ($category['status'] === 'selected') {
        if ($x_key === NULL) {
          $x_key = $measure_id;
        } else {
          $y_keys_count++;
          $is_numeric = pi_data_tools_measure_plugin_submeasure_is_numeric($measure_id);
          if ($is_numeric) {
            $y_keys[] = $measure_id;
          } else {
            $y_non_numeric[] = $measure_id;
          }
        }
      }
    }
  }

  if ($x_key === NULL) {
    form_set_error('Selected Measure', t('No measures have been selected.'));
  } else if ($y_keys_count === 0) {
    form_set_error('Selected Measure', t('At least two measures have to be selected.'));
  } else {
    $error = '';
    if (count($y_keys) === 0) {
      $error .= t('There are no numeric measures selected for the Y axis.');
    }
    if (count($y_non_numeric) > 0) {
      $titles = array_map(function($key) {
                return pi_data_tools_measure_plugin_submeasure_get_title($key);
              }, $y_non_numeric);

      if (strlen($error) > 0) {
        $error .= '<br/>';
      }
      $error .= t('The following measures are not numeric, and cannot be selected for the Y axis: ') . implode(', ', $titles);
    }

    if (strlen($error) > 0) {
      form_set_error('Selected Measure', $error);
    }
  }
}

/**
 * Implementation of hook_insert().
 */
function pi_result_presentations_insert($node) {
  if (isset($node->onepageprofile_categories)) {
    $node->measure_selection = $node->onepageprofile_categories;
  }

  $query = "INSERT INTO {pi_result_presentations} (nid, vid, key_question_id, data_set_activity_nid) VALUES (%d, %d, %d, %d)";
  db_query($query, $node->nid, $node->vid, $node->key_question_id, $node->data_set_activity_nid);

  foreach ($node->measure_selection as $key => $measure_status) {
    $query = "INSERT INTO {pi_result_presentations_measures} (nid, vid, measure_key, status, weight) VALUES (%d, %d, '%s', '%s', %d)";
    db_query($query, $node->nid, $node->vid, $key, $measure_status['status'], $measure_status['weight']);
  }
}

/**
 * Implementation of hook_update().
 */
function pi_result_presentations_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    pi_result_presentations_insert($node);
  } else {
    db_query("DELETE FROM {pi_result_presentations} WHERE vid = %d", $node->vid);
    db_query("DELETE FROM {pi_result_presentations_measures} WHERE vid = %d", $node->vid);
    pi_result_presentations_insert($node);
  }
}

/**
 * Implementation of hook_delete().
 */
function pi_result_presentations_delete(&$node) {
  db_query("DELETE FROM {pi_result_presentations} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_load().
 */
function pi_result_presentations_load($node) {
  $output = new stdClass;

  $row = db_fetch_array(db_query('SELECT * FROM {pi_result_presentations} WHERE vid = %d', $node->vid));
  if ($row) {
    $output->key_question_id = $row['key_question_id'];
    $output->data_set_activity_nid = $row['data_set_activity_nid'];
  }

  $query = "SELECT * FROM {pi_result_presentations_measures} WHERE vid = %d ORDER BY status DESC, weight ASC";
  $result = db_query($query, $node->vid);

  $output->measure_selection = array();
  while ($row = db_fetch_array($result)) {
    $output->measure_selection[$row['measure_key']] = array(
        'weight' => count($output->measure_selection),
        'status' => $row['status'],
    );
  }

  return $output;
}

/**
 * Implementation of hook_view().
 */
function pi_result_presentations_view($node, $teaser = FALSE, $page = FALSE) {

  // Use Drupal's default node view.
  $node = node_prepare($node, $teaser);

  $node->content['pi_result_presentations'] = array(
      '#value' => theme('pi_result_presentations', $node, $teaser),
      '#weight' => 10
  );

  return $node;
}

/**
 * Implementation of hook_theme().
 */
function pi_result_presentations_theme() {
  return array(
      'pi_result_presentations_node_form' => array(
          'arguments' => array('form'),
      ),
      'pi_result_presentations' => array(
          'arguments' => array('node', 'teaser'),
      ),
  );
}

/**
 * implementation of theme_hook().
 */
function theme_pi_result_presentations($node, $teaser) {
  global $user;
  $details = get_inquiry_details_from_current_path();

  $chart_activity_id = $details->activity_id;

  //In case node has activity ID info, use it.
  //This is the case in the summary page
  if ($node->activity_id) {
    $chart_activity_id = $node->activity_id;
  }

  $output = '';

  /* if (!$teaser) {
    if (isset($node->key_question_id) AND ($node->key_question_id > 0)) {
    $loaded_key_question = node_load($node->key_question_id);
    $output .= "<p><strong>Key question:</strong> " . check_plain($loaded_key_question->title) . "</p>";
    }
    }

    $selected_measures = "";
    $delim = "";

    $query = "SELECT available_measure FROM {pi_result_presentations} WHERE nid = %d AND vid = %d AND status = '1' ORDER BY weight ASC";
    $measures = db_query($query, $node->nid, $node->vid);
    while ($measure = db_fetch_object($measures)) {
    $selected_measures .= $delim . $measure->available_measure;
    if ($delim == "") {
    $delim = ",";
    $first_measure = $measure->available_measure;
    }
    }
    $header = get_selected_measures_headings_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);
    $rows = get_selected_measures_data_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);

    if (!$teaser) {
    $table_output .= theme('table', $header, $rows);
    }
   */

  //if (function_exists('pi_chart_show_chart_as_png')) {
  $output .= "<p><img class='chart_image' src='" . check_url(url("activity/" . $chart_activity_id . "/chart.png")) . "'></p>";
  //}

  /* if (!$teaser) {
    $output .= $table_output;
    }

    if (!$teaser) {
    $output .= '<p>' . l('Download (csv) data file', 'export/' . $details->activity_id . '/csv') . '</p>';

    $first_measure_node = node_load($first_measure);
    if (($first_measure_node->content_options == 'pi_location_lat_long') || ($first_measure_node->content_options == 'pi_location_lat_long_2')) {
    $output .= '<p>' . l('Download (kml) data file', 'export/' . $details->activity_id . '/kml') . '</p>';
    }
    }
   */
  return $output;
}

/**
 * Theme pi_results_presentations form
 */
function theme_pi_result_presentations_node_form($form) {
  drupal_add_tabledrag('onepageprofile-categories', 'order', 'sibling', 'onepageprofile-element');

  // Header
  $header = array(
      t('Measure'),
      t('Status'),
      t('Weight'),
  );

  // Rows for the tabledrag
  $rows = array();
  $tree = &$form['onepageprofile_categories'];
  uasort($tree, function($a, $b) {
            if (isset($a['weight']) && isset($b['weight'])) {
              $diff = $a['weight']['#value'] - $b['weight']['#value'];
              $output = $diff > 0 ? 1 : ($diff < 0 ? -1 : 0);
              return $output;
            } else {
              return 0;
            }
          }
  );
  foreach (element_children($tree) as $key) {
    $tree[$key]['weight']['#attributes']['class'] = 'onepageprofile-element';

    $row = array();
    $row[] = drupal_render($tree[$key]['title']);
    $row[] = drupal_render($tree[$key]['status']);
    $row[] = drupal_render($tree[$key]['weight']);

    $rows[] = array('data' => $row, 'class' => 'draggable');
  }

  // Build the output

  if (count($rows) > 0) {
    $buttons = drupal_render($form['buttons']);
    $output = '<br/><strong>' . t('Select and order  measures for your presentation:') . '</strong>';
    $output .= drupal_render($form);
    $output .= theme('table', $header, $rows, array('id' => 'onepageprofile-categories'));
    $output .= '<p><small>' . t('Select the measures that will appear in the graph. The top selected measure will be the graph\'s independent variable.') . '</small></p>';
    $output .= $buttons;
  } else {
    $output = '<p>' . t('No chosen measures are available.') . '</p>';
  }
  return $output;
}

/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_result_presentations_get_options() {
  global $user;
  $details = get_inquiry_details_from_current_path();


  $measures = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);
  $measures_obj = node_load($measures);

  $categories = array();
  if (count($measures_obj->categories) > 0) {
    foreach ($measures_obj->categories as $key => $measure) {
      $measure_node = node_load($key);
      if ($measure['#status'] == 'key' || $measure['#status'] == 'selected') {
        $categories[$key] = array(
            '#weight' => 1,
            '#title' => t($measure_node->title),
            '#status' => 'none'
        );
      }
    }
  }

  return $categories;
}

function pi_data_export_csv() {

  global $user;
  $details = get_inquiry_details_from_current_path();

  $nid = pi_activity_get_content_nid_for_activity($details->activity_id);
  $node = node_load($nid);

  $selected_measures = "";
  $delim = "";

  $sql = "SELECT available_measure FROM {pi_result_presentations} WHERE nid = %d AND vid = %d AND status = '1' ORDER BY weight ASC";
  $measures = db_query($sql, $node->nid, $node->vid);

  while ($measure = db_fetch_object($measures)) {
    $selected_measures .= $delim . $measure->available_measure;
    if ($delim == "") {
      $delim = ", ";
    };
  };

  $header = get_selected_measures_headings_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);
  $rows = get_selected_measures_data_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);


  $name = str_replace(' ', '_', $node->title);

  $filename = 'csv_data-' . $name . '.csv';


  header('Content-type: text/csv');

  header('Content-Disposition: attachment; filename=' . $filename);

  echo create_csv_from_table($header, $rows);

  module_invoke_all('exit');
  exit();
}

//
function create_csv_from_table($header, $rows) {

  $output = "";

  // print out headers
  $output .= "\"" . implode("\",\"", $header) . "\"\r\n";

  // now the data
  $count = 1;
  foreach ($rows as $row) {
    $elements = array();
    foreach ($row as $item) {
      $elements[] = $item;
    }
    $output .= "\"" . implode("\",\"", $elements) . "\"\r\n";
    $count++;
  }

  return $output;
}

function pi_data_export_kml() {


  global $user;
  $details = get_inquiry_details_from_current_path();

  $nid = pi_activity_get_content_nid_for_activity($details->activity_id);
  $node = node_load($nid);


  $selected_measures = "";
  $delim = "";

  $measures = db_query("SELECT available_measure FROM {pi_result_presentations} WHERE nid = %d AND vid = %d AND status = '1' ORDER BY weight ASC", $node->nid, $node->vid);

  while ($measure = db_fetch_object($measures)) {
    $selected_measures .= $delim . $measure->available_measure;
    if ($delim == "") {
      $delim = ",";
      $first_measure = $measure->available_measure;
    };
  };


  $header = get_selected_measures_headings_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);
  $rows = get_selected_measures_data_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);

  $name = str_replace(' ', '_', $node->title);
  $filename = 'kml_data-' . $name . '.kml';

  $lat = array();
  $long = array();

  $first_measure_node = node_load($first_measure);

  header('Content-type: text/kml');
  header('Content-Disposition: attachment; filename=' . $filename);

  // print_r($location_nids);
  echo create_kml_from_table($header, $rows, $first_measure_node->content_options);
  module_invoke_all('exit');
  exit();
}

function create_kml_from_table($header, $rows, $content_type) {
  $output = "";
  $output .= '<?xml version="1.0" encoding="UTF-8"?>';
  $output .= '<kml xmlns="http://earth.google.com/kml/2.2">';
  $output .= '<Document>';
  $x = 0;
  $y = 0;
  $loc_count = 1;
  foreach ($rows as $row) {
    $x = 0;

    $query = "SELECT nid FROM {node} WHERE type = '%s' AND title = '%s' ORDER BY nid DESC LIMIT 1";
    $location_nid = db_result(db_query($query, $content_type, $row[0]));

    $loc = node_load($location_nid);
    if ($loc->field_location_latitude && $loc->field_location_longitude) {
      $lat = $loc->field_location_latitude;
      $long = $loc->field_location_longitude;
    }

    $output .= '<Placemark>';
    $output .= '<name>' . $loc_count . '. ' . $row[0] . '</name>';
    $output .= '<description>';
    foreach ($row as $item) {
      $output .= '<strong>' . $header[$x] . '</strong>: ' . $item . '<br />';
      $x = $x + 1;
    }
    $output .= '</description>';
    $output .= '<Point>';
    $output .= '<coordinates>' . $long[0]['value'] . ',' . $lat[0]['value'] . ',0</coordinates>';
    $output .= '</Point>';
    $output .= '</Placemark>';
    $y = $y + 1;
    $loc_count = $loc_count + 1;
  };
  $output .= '</Document>';
  $output .= '</kml>';
  return $output;
}

