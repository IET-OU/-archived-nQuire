<?php
// $Id: pi_key_questions.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "key questions" node type
 */


/**
 * Implementation of hook_node_info().
 */
function pi_key_questions_node_info() {
    return array(
	    'pi_key_questions' => array(
		    'name' => t('Inquiry key questions'), // Required.
		    'module' => 'pi_key_questions',  // Required.
		    'description' => t('What are the key questions of your inquiry?'), // Required.
		    'has_title' => TRUE,
		    'title_label' => t('Short title'),
		    'has_body' => TRUE,
		    'body_label' => t('Key question'),
		    'locked' => TRUE
    	)
    );
}


/**
 * Implementation of hook_perm().
 */
function pi_key_questions_perm() {
    return array('create pi_key_questions content', 'edit pi_key_questions');
}

/**
 * Implementation of hook_access().
 */
function pi_key_questions_access($op, $node) {
	global $user;
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
	if ($op == 'create') {
		return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
	}
	if ($op == 'update') {
		return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
	}
	if ($op == 'delete') {
		if (arg(0) == 'node' && arg(2) == 'delete') {
			//get inquiry for session id and activity
			$nid = arg(1);
			$activity_id = get_activity_id_for_nid($nid);
			$inquiry_id = get_inquiry_id_for_activity_id($activity_id);
			if($inquiry_id && $activity_id)
			{
				return check_node_function_of_activity ($inquiry_id, $activity_id, $uid, 'edit');
			}
			else {
				return FALSE;
			}
		}
		else {
			return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
		}
	}
}

/**
 * Implementation of hook_form().
 */
function pi_key_questions_form(&$node) {
	global $user;
	$node_details = get_inquiry_details_from_current_path();
	
	if (is_numeric($node_details->activity_id)) {
		$current_activity = load_activity($node_details->activity_id);
	}
  	
	if ($current_activity->name) {
		drupal_set_title(t($current_activity->name));
	
	}
	// Get metadata for this node type
	// (we use it for labeling title and body fields).
	// We defined this in pi_key_questions_node_info().
	$type = node_get_types('type', $node);

	$form['title'] = array(
        '#type' => 'hidden',
        '#value' => t('Key question')
	);

	$form['body_filter']['body'] = array(
		'#type' => 'textarea',
		'#title' => t('Key question'),
		'#required' => TRUE,
		'#default_value' => check_plain($node->body),
		'#description' => t('Enter your key question'),
		'#resizable' => FALSE,
		'#rows' => 4,
		'#cols' => 40,
		'#weight' => 0
	);

	$hypothesis_nid = find_hypothesis_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);
	if ($hypothesis_nid)
	{
		$hypothesis_node = node_load($hypothesis_nid);
		$hypothesis_activity_nid = get_activity_id_for_nid($hypothesis->nid);
		if($hypothesis_activity_nid)
		{
			$hypothesis_activity = load_activity($hypothesis_activity_nid);
			if($hypothesis_activity)
			{
				$form['#prefix'] = theme('pi_key_questions_hypothesis', $hypothesis_node, $hypothesis_activity);
			}
		}
	}
	
	return $form;
}

/**
 * Implementation of hook_view().
 */
function pi_key_questions_view($node, $teaser = FALSE, $page = FALSE) {
	global $user;
	$node_details = get_inquiry_details_from_current_path();

	$node = node_prepare($node, $teaser);

	if(!$teaser)
	{
		$hypothesis_nid = find_hypothesis_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);
		if ($hypothesis_nid)
		{
			$hypothesis_node = node_load($hypothesis_nid);
			$hypothesis_activity_nid = get_activity_id_for_nid($hypothesis_node->nid);
			if($hypothesis_activity_nid)
			{
				$hypothesis_activity = load_activity($hypothesis_activity_nid);
				if($hypothesis_activity)
				{
					$node->content['pi_key_questions_hypothesis'] = array(
						'#value' => theme('pi_key_questions_hypothesis', $hypothesis_node, $hypothesis_activity),
						'#weight' => -2
					);
				}
			}
		}
	}
	$node->content['pi_key_questions'] = array(
            '#value' => theme('pi_key_questions', $node, $teaser),
            '#weight' => -1
	);
	return $node;
}

/**
 * hook_theme() for pi_key_questions
 * @return array describing the provided themes as per drupal 6 api    
 */
function pi_key_questions_theme() {
    return array(
	    'pi_key_questions' => array(
	    	'arguments' => array('node', 'teaser'),
	    ),
	    'pi_key_questions_hypothesis' => array(
	    	'arguments' => array('hypothesis', 'hypothesis_activity')
	    )
    );
}


/**
 * Theme function to show a key question
 * @param object (node->pi_key_question )$node
 * @return string HTML output
 */
function theme_pi_key_questions($node, $teaser) {
	if(!$teaser)
	{
		$output .= '<strong>' . t('Key question') . ':</strong>';
	}
	return $output;
}

/**
 * Theme function to generate a hypothesis prefix for the key_questions activity
 * @param object(node->pi_hypotheis) $hypothesis The hypothesis to show
 * @param object(pi_activity) $hypothesis_activity The activity relating to this hypothesis
 */
function theme_pi_key_questions_hypothesis($hypothesis, $hypothesis_activity)
{
	$output = '';
	$hypothesis_prefix = '';
	//if ($hypothesis_activity->description)
	//{
	//	$hypothesis_prefix .= "<strong>" . check_plain($hypothesis_activity->description) . ": </strong>";
	//}
	//else
	//{
		$hypothesis_prefix .= "<strong>" . t('Your hypothesis is') . ": </strong>";
	//}
	$output .= "<p>" . $hypothesis_prefix . check_plain($hypothesis->hypothesis) . "</p>";
	return $output;
}

