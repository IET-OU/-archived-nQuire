<?php
// $Id: pi_measure_filter.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "available measures filter" node type
 */


/**
 * Implementation of hook_node_info().
 */
function pi_measure_filter_node_info() {
  return array(
	'pi_measure_filter' => array(
     'name' => t('Inquiry measure filter'), // Required.
	 'module' => 'pi_measure_filter',  // Required.
	 'description' => t('Which available measures fields should be shown for the inquiry?'), 
	 // Required.
	 'has_title' => FALSE,
	 'title_label' => t('Title'),
	 'has_body' => FALSE,
	 'body_label' => t('Measure fields'),
	 'locked' => TRUE
	)
   );
}


/**
 * Implementation of hook_perm().
 */
function pi_measure_filter_perm() {
}

/**
 * Implementation of hook_access().
 */
function pi_measure_filter_access($op, $node) {
    global $user;
    $details = get_inquiry_details_from_current_path();

    if ($op == 'create') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
    }

    if ($op == 'update') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    }
}

/**
 * Implementation of hook_form().
 */
function pi_measure_filter_form(&$node) {
		$node_details = get_inquiry_details_from_current_path();
  	if (is_numeric($node_details->activity_id)) {
  		$current_activity = load_activity($node_details->activity_id);
  	}
  	
  	if ($current_activity->name) {
  		drupal_set_title(t($current_activity->name));
  	}

  // Get metadata for this node type
  // (we use it for labeling title and body fields).
  // We defined this in pi_key_questions_node_info().
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'hidden',
    '#title' => check_plain($type->title_label),
    '#required' => FALSE,
    '#default_value' => check_plain($type->title_label),
    '#weight' => -5
  );
  $form['symbol_test'] = array(
    '#type' => 'radios',
    '#title' => t('Symbol shown'),
    '#required' => FALSE,
    '#default_value' => $node->symbol_test,
    '#options' => array(0 => "No", 1 => "Yes"),
    '#weight' => 0.1
  );
  $form['symbol_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Symbol default value'),
    '#required' => FALSE,
    '#default_value' => $node->symbol_value,
    '#resizable' => FALSE,
    '#size' => 2,
    '#weight' => 0.2
  );
  $form['units_test'] = array(
    '#type' => 'radios',
    '#title' => t('Units shown'),
    '#required' => FALSE,
    '#default_value' => $node->units_test,
    '#options' => array(0 => "No", 1 => "Yes"),
    '#weight' => 0.3
  );
  $form['units_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Units default value'),
    '#required' => FALSE,
    '#default_value' => $node->units_value,
    '#resizable' => FALSE,
    '#size' => 2,
    '#weight' => 0.4
  );  
  $form['units_short_test'] = array(
    '#type' => 'radios',
    '#title' => t('Units short shown'),
    '#required' => FALSE,
    '#default_value' => $node->units_short_test,
    '#options' => array(0 => "No", 1 => "Yes"),
    '#weight' => 0.5
  );
  $form['units_short_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Units short default value'),
    '#required' => FALSE,
    '#default_value' => $node->units_short_value,
    '#resizable' => FALSE,
    '#size' => 2,
    '#weight' => 0.6
  );    
   $form['field_type_test'] = array(
    '#type' => 'radios',
    '#title' => t('Field type shown'),
    '#required' => FALSE,
    '#default_value' => $node->field_type_test,
    '#options' => array(0 => "No", 1 => "Yes"),
    '#weight' => 0.7
  );
  $form['field_type_value'] = array(
    '#type' => 'select',
    '#title' => t('Field type default value'),
    '#required' => FALSE,
    '#default_value' => $node->field_type_value,
    '#options' => array('textfield' => 'Single text line','textarea' => 'Multi-line text area','select' => 'Single select pull-down menu', 'radios' => 'Single select radio buttons', 'checkboxes' => 'Multi-select checkboxes'),
    '#description' => t('Select the type of form field you require. This will be used in the data collection interface.'),
    '#weight' => 0.8
  );  
   $form['data_type_test'] = array(
    '#type' => 'radios',
    '#title' => t('Data type shown'),
    '#required' => FALSE,
    '#default_value' => $node->data_type_test,
    '#options' => array(0 => "No", 1 => "Yes"),
    '#weight' => 0.9
  );
  $form['data_type_value'] = array(
    '#type' => 'select',
    '#title' => t('Data type default value'),
    '#required' => FALSE,
    '#default_value' => $node->data_type_value,
    '#options' => array('numeric' => 'Numeric','text' => 'Text','menu' => 'Menu'),
    '#description' => t('Select the type of data that should be entered. This will be used to validate the submitted form.'),
    '#weight' => 1
  );
  $form['list_options_test'] = array(
    '#type' => 'radios',
    '#title' => t('Options shown'),
    '#required' => FALSE,
    '#default_value' => $node->list_options_test,
    '#options' => array(0 => "No", 1 => "Yes"),
    '#weight' => 1.1
  );
  $form['list_options_value'] = array(
    '#type' => 'textarea',
    '#title' => t('Options default value'),
    '#required' => FALSE,
    '#default_value' => $node->list_options_value,
    '#description' => t('Enter the set of menu options (putting each option on a new line).'),
    '#weight' => 1.2
  );
   $form['content_options_test'] = array(
    '#type' => 'radios',
    '#title' => t('Content options shown'),
    '#required' => FALSE,
    '#default_value' => $node->content_options_test,
    '#options' => array(0 => "No", 1 => "Yes"),
    '#weight' => 1.3
  );
  $query = "SELECT node_type.type, node_type.name FROM node_type, pi_available_content_types WHERE node_type.type = pi_available_content_types.type";
  $results = db_query($query);
  $node_types = array();
  $node_types[0] = "";
  while($result = db_fetch_object($results)) {
  	$node_types[$result->type] = $result->name;
  }
  $form['content_options_value'] = array(
    '#type' => 'select',
    '#title' => t('Content options default value'),
    '#required' => FALSE,
    '#description' => t('Alternatively, enter the content type from which the menu options will be taken.'),
    '#default_value' => $node->content_options_value,
	'#options' => $node_types,
    '#weight' => 1.4
  );
  
   $form['textfield_size_test'] = array(
    '#type' => 'radios',
    '#title' => t('Textfield size shown'),
    '#required' => FALSE,
    '#default_value' => $node->textfield_size_test,
    '#options' => array(0 => "No", 1 => "Yes"),
    '#weight' => 1.5
  );
  $form['textfield_size_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Textfield size default value'),
    '#required' => FALSE,
    '#size' => 3,
    '#default_value' => $node->textfield_size_value,
	'#weight' => 1.6
  );  
   $form['textarea_cols_test'] = array(
    '#type' => 'radios',
    '#title' => t('Textarea cols shown'),
    '#required' => FALSE,
    '#default_value' => $node->textarea_cols_test,
    '#options' => array(0 => "No", 1 => "Yes"),
    '#weight' => 1.7
  );
  $form['textarea_cols_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Textarea cols default value'),
    '#required' => FALSE,
    '#size' => 3,
    '#default_value' => $node->textarea_cols_value,
	'#weight' => 1.8
  ); 
   $form['textarea_rows_test'] = array(
    '#type' => 'radios',
    '#title' => t('Textarea rows shown'),
    '#required' => FALSE,
    '#default_value' => $node->textarea_rows_test,
    '#options' => array(0 => "No", 1 => "Yes"),
    '#weight' => 1.9
  );
  $form['textarea_rows_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Textarea rows default value'),
    '#required' => FALSE,
    '#size' => 3,
    '#default_value' => $node->textarea_rows_value,
	'#weight' => 2.0
  ); 
   $form['measurement_device_name_test'] = array(
    '#type' => 'radios',
    '#title' => t('Measurment device name shown'),
    '#required' => FALSE,
    '#default_value' => $node->measurement_device_name_test,
    '#options' => array(0 => "No", 1 => "Yes"),
    '#weight' => 2.1
  );
  $form['measurement_device_name_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Measurment device name default value'),
    '#required' => FALSE,
    '#size' => 3,
    '#default_value' => $node->measurement_device_name_value,
	'#weight' => 2.2
  );
   $form['measurement_device_description_test'] = array(
    '#type' => 'radios',
    '#title' => t('Measurement device description shown'),
    '#required' => FALSE,
    '#default_value' => $node->measurement_device_description_test,
    '#options' => array(0 => "No", 1 => "Yes"),
    '#weight' => 2.3
  );
  $form['measurement_device_description_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Measurement device description value'),
    '#required' => FALSE,
    '#size' => 3,
    '#default_value' => $node->measurement_device_description_value,
	'#weight' => 2.4
  );
   $form['image_filename_test'] = array(
    '#type' => 'radios',
    '#title' => t('Image id shown'),
    '#required' => FALSE,
    '#default_value' => $node->image_filename_test,
    '#options' => array(0 => "No", 1 => "Yes"),
    '#weight' => 2.5
  );
  
  //image filename
  if (isset($node->image_filename_value)) {
    $image = node_load($node->image_filename_value);
    $current_text = '(current image = ' . $image->title . ')';
  }
  else {
    $current_text = '(no image currently selected)';
  }
  $form['image_filename_value'] = array(
    '#type' => 'file',
    '#title' => t('Picture'),
    '#size' => 48,
    '#description' => t('Select an image to illustrate the measurement or measurement device ' . $current_text . '.'),
    '#default_value' => $node->image_filename_value,
    '#weight' => 2.6
  );  

	if ($current_activity->description) {
		$prefix  = '<p>' . t($current_activity->description) . '</p>';
	}
	else {
		$prefix  = '<p>' . "For the inquiry specify which fields will be shown when a measure is added and default values for any field." . '</p>';
	}
 
  $form['#prefix'] = $prefix;
  
  return $form;

}

/**
 * Implementation of hook_insert().
 */
function pi_measure_filter_insert($node) {
  db_query("INSERT INTO {pi_measure_filter} (nid, vid, symbol_test, symbol_value, units_test, units_value, units_short_test, units_short_value, field_type_test, field_type_value, data_type_test, data_type_value, list_options_test, list_options_value, content_options_test, content_options_value, textfield_size_test, textfield_size_value, textarea_cols_test, textarea_cols_value, textarea_rows_test, textarea_rows_value, measurement_device_name_test, measurement_device_name_value, measurement_device_description_test, measurement_device_description_value, image_filename_test, image_filename_value) VALUES ('%d', '%d', '%d', '%s', '%d', '%s', '%d', '%s', '%d', '%s', '%d', '%s', '%d', '%s', '%d', '%s', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%s', '%d', '%s', '%d', '%d' )",
    $node->nid, $node->vid, $node->symbol_test, $node->symbol_value, $node->units_test, $node->units_value, $node->units_short_test, $node->units_short_value, $node->field_type_test, $node->field_type_value, $node->data_type_test, $node->data_type_value, $node->list_options_test, $node->list_options_value, $node->content_options_test, $node->content_options_value, $node->textfield_size_test, $node->textfield_size_value, $node->textarea_cols_test, $node->textarea_cols_value, $node->textarea_rows_test, $node->textarea_rows_value, $node->measurement_device_name_test, $node->measurement_device_name_value, $node->measurement_device_description_test, $node->measurement_device_description_value, $node->image_filename_test, $node->image_filename_value);
}

/**
 * Implementation of hook_update().
 */
function pi_measure_filter_update($node) {
  if ($node->revision) {
    pi_measure_filter_insert($node);
  }
  else {
    db_query("UPDATE {pi_measure_filter} SET symbol_test = '%d', symbol_value = '%s', units_test = '%d', units_value = '%s', units_short_test = '%d', units_short_value = '%s', field_type_test = '%d', field_type_value = '%s', data_type_test = '%d', data_type_value = '%s', list_options_test = '%d', list_options_value = '%s', content_options_test = '%d', content_options_value = '%s', textfield_size_test = '%d', textfield_size_value = '%d', textarea_cols_test = '%d', textarea_cols_value = '%d', textarea_rows_test = '%d', textarea_rows_value = '%d', measurement_device_name_test = '%d', measurement_device_name_value = '%s', measurement_device_description_test = '%d', measurement_device_description_value = '%s', image_filename_test = '%d', image_filename_value = '%d' WHERE vid = '%d'", $node->symbol_test, $node->symbol_value, $node->units_test, $node->units_value, $node->units_short_test, $node->units_short_value, $node->field_type_test, $node->field_type_value, $node->data_type_test, $node->data_type_value, $node->list_options_test, $node->list_options_value, $node->content_options_test, $node->content_options_value, $node->textfield_size_test, $node->textfield_size_value, $node->textarea_cols_test, $node->textarea_cols_value, $node->textarea_rows_test, $node->textarea_rows_value, $node->measurement_device_name_test, $node->measurement_device_name_value, $node->measurement_device_description_test, $node->measurement_device_description_value, $node->image_filename_test, $node->image_filename_value, $node->vid);                         
  }
}

/**
 * Implementation of hook_delete().
 */
function pi_measure_filter_delete(&$node) {
  // Delete the related information we were saving for this node.
  db_query('DELETE FROM {pi_measure_filter} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function pi_measure_filter_load($node) {
  return db_fetch_object(db_query('SELECT * FROM {pi_measure_filter} WHERE vid = %d',
    $node->vid));
}

/**
 * Implementation of hook_view().
 */
function pi_measure_filter_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);

    $node->content['pi_measure_filter'] = array(
    '#value' => theme('pi_measure_filter', $node),
    '#weight' => 2
    );
  }

  if ($teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }

  return $node;
}

/**
 * MISSING
 * 
 * @return multitype:multitype:multitype:string   
 */
function pi_measure_filter_theme() {
  return array(
    'pi_measure_filter' => array(
      'arguments' => array('node'),
    ),
  );
}


/**
 * MISSING
 * 
 * @param unknown_type $node
 * @return string
 */
function theme_pi_measure_filter($node) {
		$node_details = get_inquiry_details_from_current_path();
  	if (is_numeric($node_details->activity_id)) {
  		$current_activity = load_activity($node_details->activity_id);
  	}
  	
  	if ($current_activity->name) {
  		drupal_set_title(t($current_activity->name));
  	}

	$output = "";
	
  if ($current_activity->description) {
		$output  .= '<p>' . t($current_activity->description) . '</p>';
	}
	else {
		$output  .= '<p>' . "For the inquiry specify which fields will be shown when a measure is added and default values for any field." . '</p>';
	}
	

	$output .= "<p><strong>Symbol shown: </strong>";
	$output .= output_binary($node->symbol_test) . "</p>";
	$output .= "<p><strong>Symbol default value:</strong></p>";
	$output .= $node->symbol_value;

	$output .= "<p><strong>Units shown: </strong>";
	$output .= output_binary($node->units_test) . "</p>";
	$output .= "<p><strong>Units default value:</strong></p>";
	$output .= $node->units_value;
	
	$output .= "<p><strong>Units short shown: </strong>";
	$output .= output_binary($node->units_short_test) . "</p>";
	$output .= "<p><strong>Units short default value:</strong></p>";
	$output .= $node->units_short_value;
	
	$output .= "<p><strong>Field type shown: </strong>";
	$output .= output_binary($node->field_type_test) . "</p>";
	$output .= "<p><strong>Field type default value:</strong></p>";
	$output .= $node->field_type_value;
	
	$output .= "<p><strong>Data type shown: </strong>";
	$output .= output_binary($node->data_type_test) . "</p>";
	$output .= "<p><strong>Data type default value:</strong></p>";
	$output .= $node->data_type_value;
	
	$output .= "<p><strong>List options shown: </strong>";
	$output .= output_binary($node->list_options_test) . "</p>";
	$output .= "<p><strong>List options default value:</strong></p>";
	$output .= $node->list_options_value;
	
	$output .= "<p><strong>Content options shown: </strong>";
	$output .= output_binary($node->content_options_test) . "</p>";
	$output .= "<p><strong>Content options default value:</strong></p>";
	$output .= $node->content_options_value;

	$output .= "<p><strong>Textfield size shown: </strong>";
	$output .= output_binary($node->textfield_size_test) . "</p>";
	$output .= "<p><strong>Textfield size default value:</strong></p>";
	$output .= $node->textfield_size_value;
	
	$output .= "<p><strong>Textarea cols shown: </strong>";
	$output .= output_binary($node->textarea_cols_test) . "</p>";
	$output .= "<p><strong>Textarea cols default value:</strong></p>";
	$output .= $node->textarea_cols_value;
	
	$output .= "<p><strong>Textarea rows shown: </strong>";
	$output .= output_binary($node->textarea_rows_test) . "</p>";
	$output .= "<p><strong>Textarea rows default value:</strong></p>";
	$output .= $node->textarea_rows_value;
	
	$output .= "<p><strong>Measurement device name shown: </strong>";
	$output .= output_binary($node->measurement_device_name_test) . "</p>";
	$output .= "<p><strong>Measurement device name default value:</strong></p>";
	$output .= $node->measurement_device_name_value;
	
	$output .= "<p><strong>Measurement device description shown: </strong>";
	$output .= output_binary($node->measurement_device_description_test) . "</p>";
	$output .= "<p><strong>Measurement device description default value:</strong></p>";
	$output .= $node->measurement_device_description_value;

	$output .= "<p><strong>Image filename shown: </strong>";
	$output .= output_binary($node->image_filename_test) . "</p>";
	$output .= "<p><strong>Image filename default value:</strong></p>";
	$output .= $node->image_filename_value;
	
	// $output .= "<h3>" . $node->short_title . "</h3>";
 // $output .= "<p><strong>Key question:</strong> " . $node->key_question . "</p>";
 // $output .= "<p><strong>Weight:</strong> " . $node->weight . "</p>";
  
  return $output;
}

function output_binary($x) {
	if ($x) {
		return "Yes";
	}
	else {
		return "No";
	}
}
