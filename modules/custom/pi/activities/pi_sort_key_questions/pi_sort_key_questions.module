<?php
// $Id: pi_sort_key_questions.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

function pi_sort_key_questions_node_info() {
	return array(
	    'pi_sort_key_questions' => array(
	    'name' => t('Key questions sort'), // Required.
	    'module' => 'pi_sort_key_questions',  // Required.
	    'description' => t('Questions sort'), // Required.
	    'has_title' => TRUE,
	    'title_label' => t(''),
	    'has_body' => FALSE,
	    'body_label' => t('Sort of key questions'),
	    'locked' => TRUE,
		'add_node_type' => 'pi_key_questions')
	);

}

function pi_sort_key_questions_perm() {
}

function pi_sort_key_questions_access($op, $node) {
    global $user;
    $details = get_inquiry_details_from_current_path();

    if ($op == 'create') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
    }

    if ($op == 'update') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    }
}


/**
 * Implementation of hook_theme().
 */
function pi_sort_key_questions_theme() {
    return array(
    'pi_sort_key_questions_node_form' => array(
    'arguments' => array('form'),
    ),
    'pi_sort_key_questions' => array(
    'arguments' => array('node'),
    ),
    );
}


/**
 * hook_form() for pi_sort_key_questions which provides draggable sorting for pi_key_questions
 *  nodes in an inquiry
 * @param $node the pi_sort_key_questions node if it is to be edited, as per drupal 6 API
 */
function pi_sort_key_questions_form(&$node) {
	global $user;
	$node_details = get_inquiry_details_from_current_path();
  	if (is_numeric($node_details->activity_id))
  	{
  		$current_activity = load_activity($node_details->activity_id);
  	}
  	
  	if ($current_activity->name)
  	{
  		$users_group = get_group_of_type($user->uid, $current_activity->audience, 
  		$node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id); 
  		if($users_group!=false)
  		{
  			$group = node_load($users_group);
  			$sort_for = $group->title;
		}
  		else
  		{
  			$sort_for = $user->name;
  		}
  		$node_title = check_plain(t('Key questions for ') . $sort_for);
  		drupal_set_title($node_title);
  	}
  	else
  	{
  		$node_title = $type->name;
  	}
  	
  	// Build the form
    $form = array();
    $type = node_get_types('type', $node);
    $form['title'] = array (
        '#type' => 'hidden',
        '#value' => $node_title,
    );

    // onepageprofile_categories and tree used for draggable menu items
    $form['onepageprofile_categories'] = array(
        '#tree'   => TRUE,
    );

    // Add the categories of existing nodes and the options list for new nodes
    if(isset($node->nid)) {
        $node_categories = $node->categories;
    }
    else {
        $node_categories = array();
    }
    
		$option_categories = pi_sort_key_questions_get_options();
		$categories = array();
		
		foreach ($option_categories as $key => $category) {
			$categories[$key]['#title'] = t($category['#title']);
			$kq_activity_id = get_activity_id_for_nid($key);
			$kq_phase_id = get_phase_id_for_activity_id($kq_activity_id);
			
			$pos_result = db_result(db_query("SELECT pi_stage_phase_activity.position FROM pi_stage_phase_activity, pi_stage_phase WHERE pi_stage_phase.phase_id = '" . $kq_phase_id . "' AND pi_stage_phase.psp_id = pi_stage_phase_activity.psp_id AND pi_stage_phase_activity.activity_id = '" . $kq_activity_id . "' LIMIT 1"));

			$categories[$key]['#weight'] = $pos_result;//$node_categories[$key]['#weight'];
		}

		if (count($categories) > 1) {
			uasort($categories, "my_weight_compare");
		}
		
    // set $tree to point to the above $form['onepageprofile_categories'] object
    $tree = &$form['onepageprofile_categories'];
    foreach ($categories as $key => $category) {

        $key_question = node_load($key);

        // add $tree entries for current category (i.e. $key)
        $tree[$key]['title'] = array(
            '#value' => t($category['#title']),
        );

        $tree[$key]['weight'] = array(
            '#type'          => 'weight',
            '#delta'         => max(10, count($categories)),
						'#default_value' => $category['#weight'],
        );
    }

    return $form;
}

function pi_sort_key_questions_insert($node) {
		$details  = get_inquiry_details_from_current_path();
    while ($key_question = current($node->onepageprofile_categories)) {
        
        db_query("INSERT INTO pi_sort_key_questions (nid, vid, key_question, weight) VALUES ('" . $node->nid . "', '" . $node->vid . "', '" . key($node->onepageprofile_categories) . "', '" . $key_question['weight'] . "')");
        
        update_activity_weight_from_node(key($node->onepageprofile_categories), $key_question['weight'], $details);

        next($node->onepageprofile_categories);
    }
    reset($node->onepageprofile_categories);
}

//***********
function update_activity_weight_from_node($nid, $weight, $details) {
	$activity_id = get_activity_id_for_nid($nid);
	$new_weight =  $weight + 999;
	db_query("UPDATE pi_stage_phase_activity SET position = '" . $new_weight . "' WHERE activity_id = '" . $activity_id . "' ");
}

function pi_sort_key_questions_update($node) {
// if this is a new node or we're adding a new revision,
    if ($node->revision) {
        pi_sort_key_questions_insert($node);
    }
    else {
        db_query("DELETE FROM pi_sort_key_questions WHERE vid = '" . $node->vid . "' ");
        pi_sort_key_questions_insert($node);
    }
}

function pi_sort_key_questions_delete(&$node) {
    db_query("DELETE FROM pi_sort_key_questions WHERE nid = '" . $node->nid . "' ");
}


function pi_sort_key_questions_load($node) {
    $result = new stdClass;
    $result->categories = pi_sort_key_questions_get_choice($node);
    return $result;
}


function pi_sort_key_questions_view($node, $teaser, $page = FALSE) {

        $node = node_prepare($node, $teaser);

        $node->content['pi_sort_key_questions'] = array(
            '#value' => theme('pi_sort_key_questions', $node, $teaser),
            '#weight' => 2
        );

    return $node;
}

function theme_pi_sort_key_questions($node, $teaser) {
	global $user;
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();

	$output = '';

	// Get the sorted key questions for this node
	if(isset($node->nid)) {
		$sorted_key_questions = $node->categories;
	}
	else {
		$sorted_key_questions = array();
	}
	
	//Get all key questions for this inquiry
	$all_key_questions = pi_sort_key_questions_get_options();

	// Add unsorted key questions to the list of sorted key questions and give an appropriate count
	// (the sorted key questions will have a sequential count from 0 
	foreach(array_keys($all_key_questions) as $keq_question_nid)
	{
		if(!array_key_exists($keq_question_nid, $sorted_key_questions))
		{
			$sorted_key_questions[$keq_question_nid] = $all_key_questions[$keq_question_nid];
			$sorted_key_questions[$keq_question_nid]['#weight'] = count($sorted_key_questions);
		}
	}
	
	// Assemble an array of key questions in the output format (build_activity_link makes this a link with icon)
	$key_questions_to_show = array();
	foreach(array_keys($sorted_key_questions) as $sorted_key_questions_nid)
	{
		$key_question_activity_id = get_activity_id_for_nid($sorted_key_questions_nid);
		if ($key_question_activity_id)
		{
			$key_questions_to_show[] = build_activity_link($details->inquiry_id, $details->stage_id, $details->phase_id, $key_question_activity_id, $uid);
		}
	}

	// When there's key questions to show, show them
	// otherwise show a placeholder text
	if (count($key_questions_to_show) > 0)
	{
		if(!$teaser) {
			// If there are some key questions, also get the hypothesis for this inquiry (if exists)
			// when it's not a teaser view
			$hypothesis_param = find_hypothesis_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);

			if ($hypothesis_param)
			{
				$hypothesis_node = node_load($hypothesis_param);
				$hypothesis_activity_id = get_activity_id_for_nid($hypothesis_param);
				$hypothesis_activity = load_activity($hypothesis_activity_id);
				if ($hypothesis_activity->description)
				{
					$hypothesis_prefix .= "<strong>" . check_plain($hypothesis_activity->description) . ": </strong>";
				}
				else
				{
					$hypothesis_prefix .= "<strong>" . t('Your hypothesis') . ": </strong>";
				}
				$output .= "<p>" . $hypothesis_prefix . $hypothesis_node->hypothesis . "</p>";
			}
		}
		
		//Link to add a new key question
		//cannot get activity id from $details when viewing a list of activity teasers
		$activity_id_for_this_node = get_activity_id_for_nid($node->nid);
		$output .= make_add_activity_link($details->inquiry_id, $details->stage_id, $details->phase_id, $activity_id_for_this_node, $user->uid);

		// Add a title to the list in a ncie format, then list the key questions
		$sentence = format_plural(count($key_questions_to_show), 'Your key question is:', 'Your key questions are:');
		$output .= '<div><strong>' . $sentence . '</strong></div>';
		$output .= theme('item_list', $key_questions_to_show, NULL, 'ol', array('style' => 'list-style-type:none'));
	}
	else
	{
		// No key questions, so say that.
		$output .= "<p>No key questions are available.</p>";
	}

	return $output;
}



/**
 * Theme admin settings form
 */
function theme_pi_sort_key_questions_node_form($form) {
	global $user;
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
	
    drupal_add_tabledrag('onepageprofile-categories', 'order', 'sibling', 'onepageprofile-element');

    // Header
    $header = array(
        t('Key question'),
        t('Weight')
    );

    // Rows for the tabledrag
    $rows = array();

    $tree = &$form['onepageprofile_categories'];
    foreach (element_children($tree) as $key) {
        $tree[$key]['weight']['#attributes']['class'] = 'onepageprofile-element';
        
        $row = array();
        $row[] = drupal_render($tree[$key]['title']);
        $row[] = drupal_render($tree[$key]['weight']);

        $rows[] = array('data' => $row, 'class' => 'draggable');
    }

    // Build the output
    $activity = load_activity($details->activity_id);
    if ($activity->description) {
    	$output  = '<p>' . t($activity->description) . '</p>';
    }
    else {
    	$output  = '<p>' . t('Order your key questions.') . '</p>';
    }
    
    //only display form and submit button if there are some entries
    if (count($rows) > 0) {
    	$output .= theme('table', $header, $rows, array('id' => 'onepageprofile-categories'));
    	$output .= drupal_render($form);
    }
   	else {
   		$output .= "<p>No key questions are available.</p>";
   	}
    return $output;
}

function table_activity_link($activity_id, $status, $destination) {
	if(in_array($status, array('edit', 'view'))) {
		return l(ucwords($status), t('activity/' . $activity_id . '/' . $status), array('query' => t('destination=' . $destination)));
	}
	else {
		return t('unavailable');
	}
}

/**
 * Returns the array of key questions that were selected for the sort 
 * indexed by their node ids and with #weight and incremental count starting at 0 
 * @return array [key question node id] #weight=> 1, #title = key question title
 */
function pi_sort_key_questions_get_choice($node) {
    global $user;
    $categories = array();

    $query = "SELECT key_question FROM pi_sort_key_questions " .
    	"WHERE pi_sort_key_questions.nid = %d " .
    	"AND pi_sort_key_questions.vid = %d " .
    	"ORDER BY weight ASC";
    
    $result = db_query($query, $node->nid, $node->vid);
	
    while ($row = db_fetch_object($result))
    {
        $loaded_node = node_load($row->key_question, NULL, TRUE);
        if($loaded_node!=false)
        {
	        $categories[$row->key_question] = array(
	            '#weight' => count($categories),
	            '#title'  => t($loaded_node->title)
	        );
        }
    }
    return $categories;
}

/**
 * Returns an array of key question titles indexed by their node ids
 * @return array [key question node id] #weight=> 1, #title = key question title
 */
function pi_sort_key_questions_get_options() {
	global $user;
	$details = get_inquiry_details_from_current_path();

/*	$query = "SELECT DISTINCT node.nid FROM node " .
		"LEFT JOIN node_access ON node.nid = node_access.nid " .
		"LEFT JOIN og_uid ON node_access.gid = og_uid.nid LEFT " .
		"JOIN pi_activity_node ON pi_activity_node.nid = node.nid " .
		"WHERE TYPE = 'pi_key_questions' AND pi_activity_node.inquiry_id = %d " .
		"AND STATUS = '1' AND (node_access.realm =  'all' OR og_uid.uid = %d )";*/
	
	$query = "SELECT DISTINCT node.nid FROM node " .
		"LEFT JOIN node_access ON node.nid = node_access.nid " .
		"LEFT JOIN og_uid ON node_access.gid = og_uid.nid LEFT " .
		"JOIN pi_activity_node ON pi_activity_node.nid = node.nid " .
		"WHERE TYPE = 'pi_key_questions' AND pi_activity_node.inquiry_id = %d " .
		"AND STATUS = '1' AND ((node.uid = %d) OR (og_uid.uid = %d) )";
	$key_questions_nids_result = db_query($query, $details->inquiry_id, $user->uid, $user->uid);
	$key_questions = array();
	while ($key_questions_nid_row = db_fetch_object($key_questions_nids_result))
	{
		$key_question_node = node_load($key_questions_nid_row->nid);
		$key_question_title = $key_question_node->title;
		$key_questions[$key_questions_nid_row->nid] = array(
			'#weight' => 1,
			'#title'  => t($key_question_title)
		);
	}
	return $key_questions;
}
