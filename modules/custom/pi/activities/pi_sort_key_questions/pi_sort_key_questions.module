<?php

// $Id: pi_sort_key_questions.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

function pi_sort_key_questions_node_info() {
	return array(
			'pi_sort_key_questions' => array(
					'name' => t('Inquiry show and sort key questions'), // Required.
					'module' => 'pi_sort_key_questions', // Required.
					'description' => t('Questions sort'), // Required.
					'has_title' => FALSE,
					'title_label' => t('Show and sorted key questions'),
					'has_body' => FALSE,
					'body_label' => t('Show and sort of key questions'),
					'locked' => TRUE,
					'add_node_type' => 'pi_key_questions'
			)
	);
}

function pi_sort_key_questions_perm() {
	
}

function pi_sort_key_questions_access($op, $node, $user) {
	return FALSE;
}

/**
 * Implementation of hook_theme().
 */
function pi_sort_key_questions_theme() {
	return array(
			'pi_sort_key_questions_node_form' => array(
					'arguments' => array('form'),
			),
			'pi_sort_key_questions' => array(
					'arguments' => array('node', 'teaser', 'key_questions_to_show'),
			),
	);
}

/**
 * hook_form() for pi_sort_key_questions which provides draggable sorting for pi_key_questions
 *  nodes in an inquiry
 * @param $node the pi_sort_key_questions node if it is to be edited, as per drupal 6 API
 */
function pi_sort_key_questions_form(&$node) {

	// All key qiestions are collected in this array:
	$form['onepageprofile_categories'] = array(
			'#tree' => TRUE,
	);

	$questions = pi_sort_key_questions_get_questions_for_node($node);

	// set $tree to point to the above $form['onepageprofile_categories'] object
	$key_question_elements = &$form['onepageprofile_categories'];
	foreach ($questions as $i => $question_nid) {
		$question_node = node_load($question_nid);
		$key_question_elements[$question_nid] = array(
				'title' => array('#value' => check_plain($question_node->key_question)),
				'weight' => array(
						'#type' => 'weight',
						'#delta' => count($questions),
						'#default_value' => $i,
				),
		);
	}
	return $form;
}

/**
 * hook_insert() for pi_sort_key_questions - itereates through the array of key questions in the node
 *  and sets the weights in table pi_sort_key_questions
 *  Weights are renumbered sequentially from 0
 * @param object(pi_sort_key_questions) $node
 */
function pi_sort_key_questions_insert($node) {
	if (isset($node->onepageprofile_categories)) {
		db_query("DELETE FROM {pi_sort_key_questions} WHERE vid=%d", $node->vid);
		$query = "INSERT INTO {pi_sort_key_questions} (nid, vid, key_question, weight) VALUES (%d, %d, %d, %d)";

		//$min = min($node->onepageprofile_categories);
		foreach ($node->onepageprofile_categories as $question_nid => $question_weight) {
			db_query($query, $node->nid, $node->vid, $question_nid, $question_weight['weight']);
		}
	}
}

/**
 * hook_update for pi_sort_key_questions
 * @param object(node->pi_sory_key_questions) $node as per drupal 6 hook_update api
 */
function pi_sort_key_questions_update($node) {
	pi_sort_key_questions_insert($node);
}

function pi_sort_key_questions_delete(&$node) {
	db_query("DELETE FROM {pi_sort_key_questions} WHERE nid = %d", $node->nid);
}

function pi_sort_key_questions_load($node) {
	$result = new stdClass;
	return $result;
}

function pi_sort_key_questions_view($node, $teaser, $page = FALSE) {
	$node = node_prepare($node, $teaser);

	if (!$teaser) {
		$hypothesis_nids = pi_hypothesis_get_hypothesis_nids_for_use_in_content($node->nid);
		$node->content['pi_key_questions_hypothesis'] = array(
				'#value' => theme('pi_hypothesis_to_support_activities', $hypothesis_nids),
				'#weight' => 1
		);
	}


	$key_questions = pi_sort_key_questions_get_questions_for_node($node);

	$key_questions_to_show = array();
	foreach ($key_questions as $sorted_key_question_nid) {
		$key_question_activity_id = pi_activity_get_activity_nid_for_content_nid($sorted_key_question_nid);
		if ($key_question_activity_id) {
			$key_questions_to_show[] = array('data' => pi_activity_build_link_for_child($key_question_activity_id));
		}
	}


	if (!$teaser && count($key_questions_to_show) > 0) {
		$node->content['pi_sort_key_questions_prefix'] = array(
				'#value' => '<b>' . t('Key questions: ') . '</b>',
				'#weight' => 2,
		);
	}

	$node->content['pi_sort_key_questions'] = array(
			'#value' => theme('pi_sort_key_questions', $key_questions_to_show),
			'#weight' => 3
	);

	return $node;
}

function pi_sort_key_questions_create_contribution_view($node) {
	return pi_sort_key_questions_create_shared_view($node);
}

function pi_sort_key_questions_create_shared_view($node) {
	$key_questions = pi_sort_key_questions_get_questions_for_node($node);

	$key_questions_to_show = array();
	foreach ($key_questions as $sorted_key_question_nid) {
		$key_question_activity_id = pi_activity_get_activity_nid_for_content_nid($sorted_key_question_nid);
		if ($key_question_activity_id) {
			$activity_node = node_load($key_question_activity_id);
			$key_questions_to_show[] = array('data' => check_plain($activity_node->title));
		}
	}

	return theme('pi_sort_key_questions', $key_questions_to_show);
}

function theme_pi_sort_key_questions($key_questions_to_show) {
	$output = '';

	if (count($key_questions_to_show) > 0) {
		$output .= theme('item_list', $key_questions_to_show, NULL, 'ul');
	} else {
		$output .= "<p>" . t('No key questions are available.') . "</p>";
	}
	return $output;
}

function pi_sort_key_questions_form_pi_sort_key_questions_node_form_alter(&$form) {
	unset($form['buttons']['delete']);
}

/**
 * THeme for key questions sorting form to provide draggable sorting method
 */
function theme_pi_sort_key_questions_node_form($form) {

	drupal_add_tabledrag('onepageprofile-categories', 'order', 'sibling', 'onepageprofile-element');

	// Header
	$header = array(
			t('Key question'),
			t('Weight')
	);

	// Rows for the tabledrag
	$rows = array();

	$tree = &$form['onepageprofile_categories'];
	foreach (element_children($tree) as $key) {
		$tree[$key]['weight']['#attributes']['class'] = 'onepageprofile-element';

		$row = array();
		$row[] = drupal_render($tree[$key]['title']);
		$row[] = drupal_render($tree[$key]['weight']);

		$rows[] = array('data' => $row, 'class' => 'draggable');
	}

	//only display form and submit button if there are some entries
	if (count($rows) > 0) {
		$output .= theme('table', $header, $rows, array('id' => 'onepageprofile-categories'));
	} else {
		if (arg(2) == 'add') {
			$output .= '<p> Press <strong>Save</strong> to start adding your key questions.</p>';
		} else {
			$output .= "<p>" . t('No key questions are available') . ".</p>";
		}
	}
	$output .= drupal_render($form);
	return $output;
}

function pi_sort_key_questions_get_questions_use_in_activity_nid($using_activity_nid, $using_uid) {
	$inquiry_info = pi_info()->getInquiryInfoForActivity($using_activity_nid);
	$content_access = pi_info()->getContentManager();

	$activity = $inquiry_info->getActivityByType('pi_sort_key_questions');

	$question_nids = array();
	if ($activity) {
		$sort_question_nids = $content_access->getContentFromForUsingActivityActor($activity->nid, $using_activity_nid, $using_uid);
		foreach ($sort_question_nids as $nid) {
			$question_nids = array_merge($question_nids, pi_sort_key_questions_get_questions_for_node(node_load($nid)));
		}
	}

	return $question_nids;
}

function pi_sort_key_questions_get_questions_use_in_content_nid($content_nid) {
	$inquiry_info = pi_info()->getInquiryInfoForContent($content_nid);
	$content_access = pi_info()->getContentManager();

	$activity = $inquiry_info->getActivityByType('pi_sort_key_questions');

	$question_nids = array();
	if ($activity) {
		$sort_question_nids = $content_access->getContentFromForUsingContent($activity->nid, $content_nid);
		foreach ($sort_question_nids as $nid) {
			$question_nids = array_merge($question_nids, pi_sort_key_questions_get_questions_for_node(node_load($nid)));
		}
	}

	return $question_nids;
}

function pi_sort_key_questions_get_questions_for_node($node) {
	$questions = pi_activity_get_children_content_nids_for_content_nid($node->nid);
	$query = "SELECT key_question, weight FROM {pi_sort_key_questions} WHERE {pi_sort_key_questions}.vid=%d";
	$result = db_query($query, $node->vid);
	$weights = array();
	while ($row = db_fetch_array($result)) {
		$weights[$row['key_question']] = intval($row['weight']);
	}

	usort($questions, function($a, $b) use($weights) {
						if (isset($weights[$a]) && isset($weights[$b])) {
							return $weights[$a] - $weights[$b];
						} else if (isset($weights[$a])) {
							return -1;
						} else if (isset($weights[$b])) {
							return 1;
						} else {
							return 0;
						}
					});


	return $questions;
}
