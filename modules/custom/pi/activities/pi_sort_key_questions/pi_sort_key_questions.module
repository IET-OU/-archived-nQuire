<?php
// $Id: pi_sort_key_questions.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

function pi_sort_key_questions_node_info() {
    return array(
    'pi_sort_key_questions' => array(
    'name' => t('Draggable key questions'), // Required.
    'module' => 'pi_sort_key_questions',  // Required.
    'description' => t('Draggable key questions'), // Required.
    'has_title' => TRUE,
    'title_label' => t('Draggable key questions'),
    'has_body' => TRUE,
    'body_label' => t('Draggable key questions'),
    'locked' => TRUE)
    );

}

function pi_sort_key_questions_perm() {
}

function pi_sort_key_questions_access($op, $node) {
    global $user;
    $details = get_inquiry_details_from_current_path();

    if ($op == 'create') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
    }

    if ($op == 'update') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    }
}


/**
 * Implementation of hook_theme().
 */
function pi_sort_key_questions_theme() {
    return array(
    'pi_sort_key_questions_node_form' => array(
    'arguments' => array('form'),
    ),
    'pi_sort_key_questions' => array(
    'arguments' => array('node'),
    ),
    );
}


/**
 * Admin page to change category weights
 */
function pi_sort_key_questions_form(&$node) {
		$node_details = get_inquiry_details_from_current_path();
  	if (is_numeric($node_details->activity_id)) {
  		$current_activity = load_activity($node_details->activity_id);
  	}
  	
  	if ($current_activity->name) {
  		drupal_set_title(t($current_activity->name));
  	}
  	
// Build the form
    $form = array();
    $type = node_get_types('type', $node);
    $form['title'] = array (
        '#type' => 'hidden',
        '#value' => check_plain($type->title_label),
    );

    // onepageprofile_categories and tree used for draggable menu items
    $form['onepageprofile_categories'] = array(
        '#tree'   => TRUE,
    );

    // Add the categories of existing nodes and the options list for new nodes
    if(isset($node->nid)) {
        $node_categories = $node->categories;
    }
    else {
        $node_categories = array();
    }
    
		$option_categories = pi_sort_key_questions_get_options();
		$categories = array();
		
		foreach ($option_categories as $key => $category) {
			$categories[$key]['#title'] = $category['#title'];
			$categories[$key]['#weight'] = $node_categories[$key]['#weight'];
		}

		if (count($categories) > 1) {
			uasort($categories, "my_weight_compare");
		}
		
    // set $tree to point to the above $form['onepageprofile_categories'] object
    $tree = &$form['onepageprofile_categories'];
    foreach ($categories as $key => $category) {

        $key_question = node_load($key);

        // add $tree entries for current category (i.e. $key)
        $tree[$key]['title'] = array(
            '#value' => t($category['#title']),
        );

        $tree[$key]['weight'] = array(
            '#type'          => 'weight',
            '#delta'         => max(10, count($categories)),
						'#default_value' => $category['#weight'],
        );
    }
		$form['#suffix'] = t(activity_suffix());
    return $form;
}

function pi_sort_key_questions_insert($node) {
		$details  = get_inquiry_details_from_current_path();
    while ($key_question = current($node->onepageprofile_categories)) {
        
        db_query("INSERT INTO pi_sort_key_questions (nid, vid, key_question, weight) VALUES ('" . $node->nid . "', '" . $node->vid . "', '" . key($node->onepageprofile_categories) . "', '" . $key_question['weight'] . "')");
        
        update_activity_weight_from_node(key($node->onepageprofile_categories), $key_question['weight'], $details);

        next($node->onepageprofile_categories);
    }
    reset($node->onepageprofile_categories);
}

//***********
function update_activity_weight_from_node($nid, $weight, $details) {
	$activity_id = get_activity_id_for_nid($nid);
	$new_weight =  $weight + 999;
	db_query("UPDATE pi_stage_phase_activity SET position = '" . $new_weight . "' WHERE activity_id = '" . $activity_id . "' ");
}

function pi_sort_key_questions_update($node) {
// if this is a new node or we're adding a new revision,
    if ($node->revision) {
        pi_sort_key_questions_insert($node);
    }
    else {
        db_query("DELETE FROM pi_sort_key_questions WHERE vid = '" . $node->vid . "' ");
        pi_sort_key_questions_insert($node);
    }
}

function pi_sort_key_questions_delete(&$node) {
    db_query("DELETE FROM pi_sort_key_questions WHERE nid = '" . $node->nid . "' ");
}


function pi_sort_key_questions_load($node) {
    $result = new stdClass;
    $result->categories = pi_sort_key_questions_get_choice($node);
    return $result;
}


function pi_sort_key_questions_view($node, $teaser, $page = FALSE) {
    if (!$teaser) {
        $node = node_prepare($node, $teaser);

        $node->content['pi_sort_key_questions'] = array(
            '#value' => theme('pi_sort_key_questions', $node),
            '#weight' => 2
        );
    }
    if ($teaser) {
        $node = node_prepare($node, $teaser);
    }
    return $node;
}

function theme_pi_sort_key_questions(&$node) {
	global $user;
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
  	if (is_numeric($details->activity_id)) {
  		$current_activity = load_activity($details->activity_id);
  	}
  	
  	if ($current_activity->name) {
  		drupal_set_title(t($current_activity->name));
  	}
  	
    $output = "";
    
    if ($current_activity->description) {
    	$output  .= '<p>' . t($current_activity->description) . '</p>';
    }
    else {
    	$output  .= '<p>' . t('Order your key questions.') . '</p>';
    }

    $header = array(
        t("Key question"),
        t('Action')
    );

    $rows = array();

    if (is_array($node->categories)) {
        foreach($node->categories as $key => $category) {
            $measure = node_load($key);
            
            $row_activity_id = get_activity_id_for_nid($key);
						$row_visible_status = get_visible_status_of_activity ($details->inquiry_id, $row_activity_id, $uid);
						$table_visible_status = get_visible_status_of_activity ($details->inquiry_id, $details->activity_id, $uid);
						$destination = t('activity/' . $details->activity_id . '/' . $table_visible_status);
				
            $row = array();
            $row[] = t($category['#title']);
            $row[] = table_activity_link($row_activity_id, $row_visible_status, $destination);
            $rows[] = array('data' => $row);
        }
    }
		
		//only display form and submit button if there are some entries
    if (count($rows) > 0) {
    	$output .= theme('table', $header, $rows);
    }
   	else {
   		$output .= "<p>No key questions are available.</p>";
   	}
   	
    return $output;
}



/**
 * Theme admin settings form
 */
function theme_pi_sort_key_questions_node_form($form) {
	global $user;
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
	
    drupal_add_tabledrag('onepageprofile-categories', 'order', 'sibling', 'onepageprofile-element');

    // Header
    $header = array(
        t('Key question'),
        t('Weight'),
        t('Action')
    );

    // Rows for the tabledrag
    $rows = array();

    $tree = &$form['onepageprofile_categories'];
    foreach (element_children($tree) as $key) {
        $tree[$key]['weight']['#attributes']['class'] = 'onepageprofile-element';
        
				$row_activity_id = get_activity_id_for_nid($key);
				$row_visible_status = get_visible_status_of_activity ($details->inquiry_id, $row_activity_id, $uid);
				$table_visible_status = get_visible_status_of_activity ($details->inquiry_id, $details->activity_id, $uid);
				$destination = t('activity/' . $details->activity_id . '/' . $table_visible_status);
				
        $row = array();
        $row[] = drupal_render($tree[$key]['title']);
        $row[] = drupal_render($tree[$key]['weight']);
        $row[] = table_activity_link($row_activity_id, $row_visible_status, $destination);

        $rows[] = array('data' => $row, 'class' => 'draggable');
    }

    // Build the output
    $activity = load_activity($details->activity_id);
    if ($activity->description) {
    	$output  = '<p>' . t($activity->description) . '</p>';
    }
    else {
    	$output  = '<p>' . t('Order your key questions.') . '</p>';
    }
    
    //only display form and submit button if there are some entries
    if (count($rows) > 0) {
    	$output .= theme('table', $header, $rows, array('id' => 'onepageprofile-categories'));
    	$output .= drupal_render($form);
    }
   	else {
   		$output .= "<p>No key questions are available.</p>";
   	}
    return $output;
}

function table_activity_link($activity_id, $status, $destination) {
	if(in_array($status, array('edit', 'view'))) {
		return l(ucwords($status), t('activity/' . $activity_id . '/' . $status), array('query' => t('destination=' . $destination)));
	}
	else {
		return t('unavailable');
	}
}

/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_sort_key_questions_get_choice($node) {

    global $user;
    $categories = array();
				
    $result = db_query("SELECT * FROM pi_sort_key_questions WHERE pi_sort_key_questions.nid = '" . $node->nid . "' AND pi_sort_key_questions.vid = '" . $node->vid . "'");

    while ($row = db_fetch_object($result)) {
        $loaded_node = node_load($row->key_question, NULL, TRUE);
        $categories[$row->key_question] = array(
            '#weight' => $row->weight,
            '#title'  => t($loaded_node->title)
        );
    }

    uasort($categories, "my_weight_compare");

    return $categories;
}

/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_sort_key_questions_get_options() {
	$details = get_inquiry_details_from_current_path();

	global $user;
	$categories = array();
	
	$result = db_query("SELECT DISTINCT node.nid FROM node LEFT JOIN node_access ON node.nid = node_access.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid LEFT JOIN pi_activity_node ON pi_activity_node.nid = node.nid WHERE TYPE = 'pi_key_questions' AND pi_activity_node.inquiry_id = '" . $details->inquiry_id . "' AND STATUS = '1' AND (node_access.realm =  'all' OR og_uid.uid =  '" . $user->uid . "') ORDER BY nid ASC");

	while ($row = db_fetch_object($result)) {
		$title_result = db_result(db_query("SELECT node.title FROM node WHERE node.nid = '" . $row->nid . "' ORDER BY node.vid DESC"));
		$categories[$row->nid] = array(
			'#weight' => 1,
			'#title'  => t($title_result)
		);
	}
	return $categories;
}
