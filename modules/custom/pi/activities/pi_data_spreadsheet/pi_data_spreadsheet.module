<?php

// $Id: pi_data_spreadsheet.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "pi_data_spreadsheet" node type
 */

/**
 * Implementation of hook_node_info().
 */
function pi_data_spreadsheet_node_info() {

  return array(
      'pi_data_spreadsheet' => array(
          'name' => t('Inquiry data spreadsheet'), // Required.
          'module' => 'pi_data_spreadsheet', // Required.
          'description' => t('Analyse data using a spreadsheet'), // Required.
          'has_title' => FALSE,
          'has_body' => TRUE,
          'body_label' => t('Group notes'),
          'locked' => TRUE)
  );
}

/**
 * Implementation of hook_perm().
 */
function pi_data_spreadsheet_perm() {
  
}

/**
 * Implementation of hook_access().
 */
function pi_data_spreadsheet_access($op, $node, $account) {
  global $user;
  $details = get_inquiry_details_from_current_path();

  if ($op == 'create') {
    return pi_activity_check_node_function($details->activity_id, $user->uid, 'edit');
  }
  if ($op == 'update' || $op == 'delete') {
    return pi_activity_check_node_function($details->activity_id, $user->uid, 'edit');
  }
}

/**
 * Implementation of hook_form().
 */
function pi_data_spreadsheet_form(&$node) {

  $form['body'] = array(
      '#type' => 'hidden',
      '#default_value' => $node->body,
  );

  return $form;
}

function pi_data_spreadsheet_link_alter(&$links, $node) {
// remove attachment links from upload.module
  unset($links['upload_attachments']);
}

/**
 * Implementation of hook_view().
 */
function pi_data_spreadsheet_view($node, $teaser = FALSE, $page = FALSE) {
  $output = '';
  if (!$teaser) {
    $spreadsheet = _pi_data_spreadsheet_get_spreadsheet($node);
    $output .= theme('pi_data_spreadsheet_grid', $spreadsheet);
  } $node = node_prepare($node, $teaser);

  $node->content['body'] = array(
      '#value' => $output,
      '#weight' => 0
  );

  return $node;
}

/**
 * MISSING
 * 
 * @return multitype:multitype:multitype:string   
 */
function pi_data_spreadsheet_theme() {
  return array(
      'pi_data_spreadsheet_grid' => array(
          'arguments' => array('spreadsheet' => NULL),
      ),
  );
}

function theme_pi_data_spreadsheet_grid($spreadsheet) {

  _pi_data_spreadsheet_generate_spreadsheet_data_javascript($spreadsheet['sessionKey'], $spreadsheet['bookName']);

  nquire_commons_load_javascript_support();
  drupal_add_js(drupal_get_path('module', 'pi_data_spreadsheet') . '/js/pi_data_spreadsheet_grid.js');
  drupal_add_css(drupal_get_path('module', 'pi_data_spreadsheet') . '/css/pi_data_spreadsheet_grid.css');

  $externalScripts = '<link rel = "stylesheet" type = "text/css" media = "screen" href = "http://www.editgrid.com/static/style/default.css"/>'
          . '<link rel = "stylesheet" type = "text/css" href = "http://www.editgrid.com/static/style/grid/default.css" />'
          . '<script type = "text/javascript" src = "http://www.editgrid.com/js/grid.js" ></script>';
  drupal_set_html_head($externalScripts);

  $output = '<div id="pi_data_spreadsheet_grid_container" style="height: 600px; width: 100%;" ></div>';

  return $output;
}

function _pi_data_spreadsheet_get_spreadsheet(&$node) {
  $key = trim(file_get_contents(drupal_get_path('module', 'pi_data_spreadsheet') . '/data/editgrid_api_app_key'));
  if (_pi_data_spreadsheet_create_spreadsheet($node, $key)) {
    $result = array();
    $result['sessionKey'] = $key;
    $result['bookName'] = $node->body;

    return $result;
  }

  return FALSE;
}

function _pi_data_spreadsheet_generate_spreadsheet_data_javascript($session_key, $book_name) {
  $script = "$(function() {"
          . "  nQuireJsSupport.register('PiDataSpreadsheetSessionKey', {"
          . "    init: function() {"
          . "      this.sessionKey = '{$session_key}';"
          . "      this.bookId = '{$book_name}';"
          . "    }"
          . "  });"
          . "});";

  drupal_add_js($script, 'inline');
}

function _pi_data_spreadsheet_create_spreadsheet(&$node, $key) {

  include_once 'editgrid/editgrid.php';
  /* session_start();

    unset($_SESSION['sessionKey']);
    unset($_SESSION['authToken']); */


  $client = new EditGrid(NULL);
  /* $result1 = $client->call('auth.createToken', array('appKey' => $key));
    if ($result1->hasError()) {
    trigger_error($result1->getError()->toString(), E_USER_ERROR);
    return FALSE;
    }


    $authToken = $result1->getValue();

    $result2 = $client->call('auth.getSessionKey', array('appKey' => $key, 'token' => $authToken));
    if ($result2->hasError()) {
    trigger_error($result2->getError()->toString(), E_USER_ERROR);
    return FALSE;
    }

    $_SESSION['sessionKey'] = $result2->getValue(); */

  $client->setSessionKey($key);



  if (!$node->body || strlen($node->body) === 0) {
    $new_book = TRUE;
    $book_name = $node->nid . '-' . substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyz"), 0, 20);
  } else {
    $new_book = FALSE;
    $book_name = $node->body;
  }

  $workbook_xml = "<workbook><name>{$book_name}</name></workbook>";
  $result3 = $client->call("workbook.create", array(workspace => "//mine"), $workbook_xml);
  if (!$result3) {
    trigger_error('no result from editgrid call', E_USER_ERROR);
    return FALSE;
  } else if ($result3->hasError() && $result3->getError()->getCode() != 23) {
    trigger_error($result3->getError()->toString(), E_USER_ERROR);
    return FALSE;
  }

  if ($new_book) {
    $node->body = $book_name;
    $node->revision = true;
    node_save($node);
  }

  return TRUE;
}
