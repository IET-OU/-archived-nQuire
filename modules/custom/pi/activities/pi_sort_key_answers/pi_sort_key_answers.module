<?php

// $Id: pi_sort_key_answers.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

function pi_sort_key_answers_node_info() {
	return array(
			'pi_sort_key_answers' => array(
					'name' => t('Inquiry show and sort key answers'), // Required.
					'module' => 'pi_sort_key_answers', // Required.
					'description' => t('Answers sort'), // Required.
					'has_title' => FALSE,
					'title_label' => t('Sorted key answers'),
					'has_body' => TRUE,
					'body_label' => t('Sort of key answers'),
					'locked' => TRUE,
					'add_node_type' => 'pi_key_answers')
	);
}

function pi_sort_key_answers_perm() {
	
}

function pi_sort_key_answers_access($op, $node, $account) {
	return FALSE;
}

/**
 * Implementation of hook_theme().
 */
function pi_sort_key_answers_theme() {
	return array(
			'pi_sort_key_answers_node_form' => array(
					'arguments' => array('form'),
			),
			'pi_sort_key_answers' => array(
					'arguments' => array('node'),
			),
	);
}

/**
 * hook_form() for pi_sort_key_answers which provides draggable sorting for pi_key_answers nodes in an inquiry
 * @param $node the pi_sort_key_answers node if it is to be edited, as per drupal 6 API
 */
function pi_sort_key_answers_form(&$node) {
	$form = array();
	return $form;
}

function pi_sort_key_answers_insert($node) {
	if (count($node->onepageprofile_categories) > 0) {
		foreach ($node->onepageprofile_categories as $nid => $key_answer) {
			$query = "INSERT INTO {pi_sort_key_answers} (nid, vid, key_answer, weight) VALUES (%d, %d, %d, %d)";
			db_query($query, $node->nid, $node->vid, $nid, $key_answer['weight']);
		}
	}
}

function pi_sort_key_answers_update($node) {
// if this is a new node or we're adding a new revision,
	if ($node->revision) {
		pi_sort_key_answers_insert($node);
	} else {
		db_query("DELETE FROM {pi_sort_key_answers} WHERE vid = %d", $node->vid);
		pi_sort_key_answers_insert($node);
	}
}

function pi_sort_key_answers_delete(&$node) {
	db_query("DELETE FROM {pi_sort_key_answers} WHERE nid = %d", $node->nid);
}

function pi_sort_key_answers_load($node) {
	$result = new stdClass;
	return $result;
}

function pi_sort_key_answers_view($node, $teaser, $page = FALSE) {
	$node = node_prepare($node, $teaser);

	$sorted_key_questions = pi_sort_key_questions_get_questions_use_in_content_nid($node->nid);

	$sorted_key_questions_nodes = array_map(function($nid) {
						return node_load($nid);
					}, $sorted_key_questions);
	$sorted_key_answers = pi_sort_key_answers_get_answers($node);
	$sorted_key_answers_nodes = array_map(function($nid) {
						return node_load($nid);
					}, $sorted_key_answers);

	$key_questions_to_show = array();
	foreach ($sorted_key_questions_nodes as $question) {
		$title = check_plain($question->key_question);
		$answers = array();
		foreach ($sorted_key_answers_nodes as $answer) {
			if ($answer->key_question_id == $question->nid) {
				$key_answer_activity_id = pi_activity_get_activity_nid_for_content_nid($answer->nid);
				$answers[] = array('data' => pi_activity_build_link_for_child($key_answer_activity_id));
			}
		}
		if (count($answers) === 0) {
			$answers[] = array('data' => '<small>' . t('There are no answers linked to this question.') . '</small>');
		}
		$key_questions_to_show[] = array('data' => $title, 'children' => $answers);
	}



	$node->content['pi_sort_key_answers'] = array(
			'#value' => theme('pi_sort_key_answers', $node, $teaser, $key_questions_to_show),
			'#weight' => 2
	);

	return $node;
}

function pi_sort_key_answers_create_contribution_view($node) {
	return pi_sort_key_answers_create_shared_view($node);
}

function pi_sort_key_answers_create_shared_view($node) {
	$sorted_key_answers = pi_sort_key_answers_get_answers($node);
	$sorted_key_answer_nodes = array_map(function($nid) {
						return node_load($nid);
					}, $sorted_key_answers);

	$key_questions = array();

	foreach ($sorted_key_answer_nodes as $answer) {
		if (!isset($key_questions[$answer->key_question_id])) {
			$key_question = node_load($answer->key_question_id);
			$key_questions[$answer->key_question_id] = array('data' => check_plain($key_question->key_question), 'children' => array());
		}
		$key_questions[$answer->key_question_id]['children'][] = array('data' => check_plain($answer->key_answer));
	}

	return theme('pi_sort_key_answers', $node, FALSE, $key_questions);
}

function theme_pi_sort_key_answers($node, $teaser, $key_questions_to_show) {
	$output = '';

	if (count($key_questions_to_show) > 0) {
		$output .= theme('item_list', $key_questions_to_show, NULL, 'ul');
	} else {
		$output .= "<p>No key questions are available.</p>";
	}
	return $output;
}

function theme_pi_sort_key_answers_node_form($form) {

	/* 	
	  $sorted_key_questions = pi_sort_key_questions_get_questions_use_in_content_nid($form['node']->nid);

	  $rows = array();

	  if (count($key_questions) > 0) {
	  foreach ($key_questions as $key_question_nid) {
	  $key_question_node = node_load($key_question_nid);
	  if ($key_question_node) {
	  drupal_add_tabledrag(check_plain('onepageprofile-categories' . $key_question_nid), 'order', 'sibling', 'onepageprofile-element');
	  $rows[$key_question_nid] = array();
	  }
	  }
	  }

	  // Load all the key answers into the array of arrays
	  $tree = &$form['onepageprofile_categories'];
	  foreach (element_children($tree) as $key_answer_nid) {
	  $tree[$key_answer_nid]['weight']['#attributes']['class'] = 'onepageprofile-element';

	  $row = array();
	  $row[] = drupal_render($tree[$key_answer_nid]['title']);
	  $row[] = drupal_render($tree[$key_answer_nid]['weight']);


	  $key_answer_node = node_load($key_answer_nid);
	  if ($key_answer_node) {
	  $key_question_id = $key_answer_node->key_question_id;
	  $rows[$key_question_id][$key_answer_nid] = array('data' => $row, 'class' => 'draggable');
	  }
	  }

	  $output .= '<p>' . t('Here you can change the order of your key answers for each key question. Click on the plus sign next to the answer and drag it to where you want it to be.') . '</p>';
	  $answer_flag = 0;
	  if (count($key_questions) > 0) {
	  //Render the array of arrays to make a table listing each key question with answers
	  // using table drag
	  foreach (array_keys($key_questions) as $key_question_nid) {
	  if (count($rows[$key_question_nid]) > 0) {
	  $answer_flag = 1;
	  $output .= theme('table', array(check_plain($key_questions[$key_question_nid]['#title']), t('Weight')), $rows[$key_question_nid], array('id' => check_plain('onepageprofile-categories' . $key_question_nid)));
	  } else {
	  $output .= '<p><strong>' . $key_questions[$key_question_nid]['#title'] . '</strong><br/> No answers linked to this question</p>';
	  }
	  }
	  } else {
	  $output .= "<p>No key questions are available.</p>";
	  }

	  if ($answer_flag == 0) {
	  $output .= '<p> Press <strong>Save</strong> to start adding your answers.</p>';
	  }

	  //if($answer_flag == 1) {
	  $output .= drupal_render($form);
	  //}

	  return $output; */
}

function pi_sort_key_answers_get_answers($node) {

	if ($node) {
		$answers = pi_activity_get_children_content_nids_for_content_nid($node->nid);
		$query = "SELECT key_answer, weight FROM {pi_sort_key_answers} WHERE vid=%d";
		$result = db_query($query, $node->vid);
		$weights = array();
		while ($row = db_fetch_array($result)) {
			$weights[$row['key_answer']] = intval($row['weight']);
		}

		usort($answers, function($a, $b) use($weights) {
							if (isset($weights[$a]) && isset($weights[$b])) {
								return $weights[$a] - $weights[$b];
							} else if (isset($weights[$a])) {
								return -1;
							} else if (isset($weights[$b])) {
								return 1;
							} else {
								return 0;
							}
						});
		return $answers;
	} else {
		return array();
	}
}
