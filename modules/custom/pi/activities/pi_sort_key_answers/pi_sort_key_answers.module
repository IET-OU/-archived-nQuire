<?php

// $Id: pi_sort_key_answers.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

function pi_sort_key_answers_node_info() {
	return array(
			'pi_sort_key_answers' => array(
					'name' => t('Inquiry show and sort key answers'), // Required.
					'module' => 'pi_sort_key_answers', // Required.
					'description' => t('Answers sort'), // Required.
					'has_title' => FALSE,
					'title_label' => t('Sorted key answers'),
					'has_body' => TRUE,
					'body_label' => t('Sort of key answers'),
					'locked' => TRUE,
					'add_node_type' => 'pi_key_answers')
	);
}

function pi_sort_key_answers_perm() {
	
}

function pi_sort_key_answers_access($op, $node, $account) {
	return TRUE;
	global $user;
	$details = get_inquiry_details_from_current_path();

	if ($op == 'create') {
		return pi_activity_check_node_function($details->activity_id, $user->uid, 'edit');
	}

	if ($op == 'update') {
		return pi_activity_check_node_function($details->activity_id, $user->uid, 'edit');
	}
}

/**
 * Implementation of hook_theme().
 */
function pi_sort_key_answers_theme() {
	return array(
			'pi_sort_key_answers_node_form' => array(
					'arguments' => array('form'),
			),
			'pi_sort_key_answers' => array(
					'arguments' => array('node'),
			),
	);
}

/**
 * hook_form() for pi_sort_key_answers which provides draggable sorting for pi_key_answers nodes in an inquiry
 * @param $node the pi_sort_key_answers node if it is to be edited, as per drupal 6 API
 */
function pi_sort_key_answers_form(&$node) {
	global $user;
	$node_details = get_inquiry_details_from_current_path();
	$type = node_get_types('type', $node);

	if (is_numeric($node_details->activity_id)) {
		$current_activity = node_load($node_details->activity_id);
	}

	if ($current_activity) {
		$users_group = get_group_of_type($user->uid, $current_activity->audience, $node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id);
		if ($users_group != false) {
			$group = node_load($users_group);
			$sort_for = $group->title;
		} else {
			$sort_for = $user->name;
		}
		$node_title = check_plain(t('Key answers for ') . $sort_for);
	} else {
		$node_title = $type->name;
	}
	// Build the form
	$form = array();

	$form['title'] = array(
			'#type' => 'hidden',
			'#value' => $node_title,
	);

	// onepageprofile_categories and tree used for draggable menu items
	$form['onepageprofile_categories'] = array(
			'#tree' => TRUE,
	);

	// Add the categories of existing nodes and the options list for new nodes
	if (isset($node->nid)) {
		$sorted_key_answers = $node->categories;
	} else {
		$sorted_key_answers = array();
	}

	$all_key_answers = pi_sort_key_answers_get_options();

	// don't do a normal merge as weights are dependant on the questions first...
	foreach ($all_key_answers as $answer_nid => $answer) {
		if (!array_key_exists($answer_nid, $sorted_key_answers)) {
			$sorted_key_answers[$answer_nid] = $answer;
		}
	}


	// set $tree to point to the above $form['onepageprofile_categories'] object
	$tree = &$form['onepageprofile_categories'];
	foreach ($sorted_key_answers as $key => $answer) {
		$key_answer = node_load($key);
		if ($key_answer) {
			// add $tree entries for current category (i.e. $key)
			$tree[$key]['title'] = array(
					'#value' => check_plain($answer['#title']),
			);

			$tree[$key]['weight'] = array(
					'#type' => 'weight',
					'#delta' => count($sorted_key_answers),
					'#default_value' => $answer['#weight'],
			);
		}
	}
	return $form;
}

function pi_sort_key_answers_insert($node) {
	if (count($node->onepageprofile_categories) > 0) {
		foreach ($node->onepageprofile_categories as $nid => $key_answer) {
			$query = "INSERT INTO {pi_sort_key_answers} (nid, vid, key_answer, weight) VALUES (%d, %d, %d, %d)";
			db_query($query, $node->nid, $node->vid, $nid, $key_answer['weight']);
		}
	}
}

function pi_sort_key_answers_update($node) {
// if this is a new node or we're adding a new revision,
	if ($node->revision) {
		pi_sort_key_answers_insert($node);
	} else {
		db_query("DELETE FROM {pi_sort_key_answers} WHERE vid = %d", $node->vid);
		pi_sort_key_answers_insert($node);
	}
}

function pi_sort_key_answers_delete(&$node) {
	db_query("DELETE FROM {pi_sort_key_answers} WHERE nid = %d", $node->nid);
}

function pi_sort_key_answers_load($node) {
	$result = new stdClass;
	$result->categories = pi_sort_key_answers_get_choice($node);
	return $result;
}

function pi_sort_key_answers_view($node, $teaser, $page = FALSE) {
	$data_access = pi_inquiry_groupings_get_access_data();
	$parent_activity_nid = pi_activity_get_activity_nid_for_content_nid($node->nid);

	$node = node_prepare($node, $teaser);

	$sorted_key_questions = pi_sort_key_questions_get_questions();
	$sorted_key_questions_nodes = array_map(function($nid) {
						return node_load($nid);
					}, $sorted_key_questions);
	$sorted_key_answers = pi_sort_key_answers_get_answers();
	$sorted_key_answers_nodes = array_map(function($nid) {
						return node_load($nid);
					}, $sorted_key_answers);

	$key_questions_to_show = array();
	foreach ($sorted_key_questions_nodes as $question) {
		$title = check_plain($question->key_question);
		$answers = array();
		foreach ($sorted_key_answers_nodes as $answer) {
			if ($answer->key_question_id == $question->nid) {
				$key_answer_activity_id = pi_activity_get_activity_nid_for_content_nid($answer->nid);
				$answers[] = array('data' => pi_activity_build_link_for_child($parent_activity_nid, $key_answer_activity_id));
			}
		}
		if (count($answers) === 0) {
			$answers[] = array('data' => '<small>' . t('There are no answers linked to this question.') . '</small>');
		}
		$key_questions_to_show[] = array('data' => $title, 'children' => $answers);
	}

	$activity_id_for_this_node = pi_activity_get_activity_nid_for_content_nid($node->nid);

	if ($activity_id_for_this_node) {
		$node->content['pi_sort_key_answers_add_link'] = array(
				'#value' => make_add_activity_link($activity_id_for_this_node),
				'#weight' => -1
		);
	}

	$node->content['pi_sort_key_answers'] = array(
			'#value' => theme('pi_sort_key_answers', $node, $teaser, $key_questions_to_show),
			'#weight' => 2
	);

	return $node;
}

function theme_pi_sort_key_answers($node, $teaser, $key_questions_to_show) {
	$output = '';

	if (count($key_questions_to_show) > 0) {
		$output .= theme('item_list', $key_questions_to_show, NULL, 'ul');
	} else {
		$output .= "<p>No key questions are available.</p>";
	}
	return $output;
}

function theme_pi_sort_key_answers_node_form($form) {
	global $user;
	$details = get_inquiry_details_from_current_path();

	// Add the sorted key questions if they exist and then add unsorted ones
	$sorted_key_questions_nid = find_sort_key_questions_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);
	if ($sorted_key_questions_nid) {
		$sorted_key_questions_node = node_load($sorted_key_questions_nid);
		$sorted_key_questions = $sorted_key_questions_node->categories;
	} else {
		$sorted_key_questions = array();
	}
	
	

	$key_questions = pi_sort_key_questions_get_questions();

	$rows = array();
	
	if (count($key_questions) > 0) {
		foreach ($key_questions as $key_question_nid) {
			$key_question_node = node_load($key_question_nid);
			if ($key_question_node) {
				drupal_add_tabledrag(check_plain('onepageprofile-categories' . $key_question_nid), 'order', 'sibling', 'onepageprofile-element');
				$rows[$key_question_nid] = array();
			}
		}
	}

	// Load all the key answers into the array of arrays
	$tree = &$form['onepageprofile_categories'];
	foreach (element_children($tree) as $key_answer_nid) {
		$tree[$key_answer_nid]['weight']['#attributes']['class'] = 'onepageprofile-element';

		$row = array();
		$row[] = drupal_render($tree[$key_answer_nid]['title']);
		$row[] = drupal_render($tree[$key_answer_nid]['weight']);


		$key_answer_node = node_load($key_answer_nid);
		if ($key_answer_node) {
			$key_question_id = $key_answer_node->key_question_id;
			$rows[$key_question_id][$key_answer_nid] = array('data' => $row, 'class' => 'draggable');
		}
	}

	$output .= '<p>' . t('Here you can change the order of your key answers for each key question. Click on the plus sign next to the answer and drag it to where you want it to be.') . '</p>';
	$answer_flag = 0;
	if (count($key_questions) > 0) {
		//Render the array of arrays to make a table listing each key question with answers
		// using table drag 
		foreach (array_keys($key_questions) as $key_question_nid) {
			if (count($rows[$key_question_nid]) > 0) {
				$answer_flag = 1;
				$output .= theme('table', array(check_plain($key_questions[$key_question_nid]['#title']), t('Weight')), $rows[$key_question_nid], array('id' => check_plain('onepageprofile-categories' . $key_question_nid)));
			} else {
				$output .= '<p><strong>' . $key_questions[$key_question_nid]['#title'] . '</strong><br/> No answers linked to this question</p>';
			}
		}
	} else {
		$output .= "<p>No key questions are available.</p>";
	}

	if ($answer_flag == 0) {
		$output .= '<p> Press <strong>Save</strong> to start adding your answers.</p>';
	}

	//if($answer_flag == 1) {
	$output .= drupal_render($form);
	//}

	return $output;
}

/**
 * Returns the array of key questions that were selected for the sort 
 * indexed by their node ids and with #weight and incremental count starting at 0 
 * @return array [key question node id] #weight=> 1, #title = key question title
 */
function pi_sort_key_answers_get_choice($node) {
	$query = "SELECT key_answer, weight FROM {pi_sort_key_answers} WHERE {pi_sort_key_answers}.nid = %d AND {pi_sort_key_answers}.vid = %d ORDER BY weight ASC";
	$result = db_query($query, $node->nid, $node->vid);

	$answers = array();
	while ($row = db_fetch_object($result)) {
		$loaded_node = node_load($row->key_answer);
		if ($loaded_node != false) {
			$answers[$row->key_answer] = array(
					'#weight' => $row->weight,
					'#title' => check_plain($loaded_node->title)
			);
		}
	}
	return $answers;
}

/**
 * Returns an array of key answer titles indexed by their node ids
 * @return array [key answer node id] #weight=> 1, #title = key answer title
 */
/* TOREMOVE */
function pi_sort_key_answers_get_options() {
	global $user;
	$details = get_inquiry_details_from_current_path();
	$nids = pi_activity_get_available_nids_of_type($user->uid, $details->inquiry_id, 'pi_key_answers');

	$items = pi_activity_map_fields_from_nids($nids, array('title' => '#title'));
	foreach (array_keys($items) as $nid) {
		$items[$nid]['#weight'] = 0;
	}
	return $items;
}

function pi_sort_key_answers_get_answers() {
	return pi_activity_get_children_content_nids_for_sort_activity_type('pi_sort_key_answers');
}