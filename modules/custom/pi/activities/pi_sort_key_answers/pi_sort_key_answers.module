<?php
// $Id: pi_sort_key_answers.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

function pi_sort_key_answers_node_info() {
    return array(
    'pi_sort_key_answers' => array(
	    'name' => t('Key answers sort'), // Required.
	    'module' => 'pi_sort_key_answers',  // Required.
	    'description' => t('Answers sort'), // Required.
	    'has_title' => FALSE,
	    'title_label' => t('Sorted key answers'),
	    'has_body' => TRUE,
	    'body_label' => t('Sort of key answers'),
	    'locked' => TRUE,
	    'add_node_type' => 'pi_key_answers')
    );
}

function pi_sort_key_answers_perm() {
}

function pi_sort_key_answers_access($op, $node) {
    global $user;
    $details = get_inquiry_details_from_current_path();

    if ($op == 'create') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
    }

    if ($op == 'update') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    }
}


/**
 * Implementation of hook_theme().
 */
function pi_sort_key_answers_theme() {
    return array(
    'pi_sort_key_answers_node_form' => array(
    'arguments' => array('form'),
    ),
    'pi_sort_key_answers' => array(
    'arguments' => array('node'),
    ),
    );
}


/**
 * hook_form() for pi_sort_key_answers which provides draggable sorting for pi_key_answers nodes in an inquiry
 * @param $node the pi_sort_key_answers node if it is to be edited, as per drupal 6 API
 */
function pi_sort_key_answers_form(&$node) {	
	global $user;
	$node_details = get_inquiry_details_from_current_path();
	$type = node_get_types('type', $node);

	if (is_numeric($node_details->activity_id))
  	{
  		$current_activity = load_activity($node_details->activity_id);
  	}
  	
  	if ($current_activity)
  	{
  		$users_group = get_group_of_type($user->uid, $current_activity->audience, 
  		$node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id); 
  		if($users_group!=false)
  		{
  			$group = node_load($users_group);
  			$sort_for = $group->title;
		}
  		else
  		{
  			$sort_for = $user->name;
  		}
  		$node_title = check_plain(t('Key answers for ') . $sort_for);
  	}
  	else
  	{
  		$node_title = $type->name;
  	}
	// Build the form
	$form = array();

	$form['title'] = array (
        '#type' => 'hidden',
        '#value' => $node_title,
	);

    // onepageprofile_categories and tree used for draggable menu items
    $form['onepageprofile_categories'] = array(
        '#tree'   => TRUE,
    );

    // Add the categories of existing nodes and the options list for new nodes
    if(isset($node->nid)) {
        $node_categories = $node->categories;
    }
    else {
        $node_categories = array();
    }
		
    $option_categories = pi_sort_key_answers_get_options();
    $categories = array();
    
    foreach ($option_categories as $key => $category)
    {
    	$categories[$key]['#title'] = $category['#title'];
    		
    	//get weight from navigation
    	$answer_activity_id = get_activity_id_for_nid($key);
    	$answer_phase_id = get_phase_id_for_activity_id($answer_activity_id);
    	$pos_result = db_result(db_query("SELECT pi_stage_phase_activity.position FROM pi_stage_phase_activity, pi_stage_phase WHERE pi_stage_phase.phase_id = '" . $answer_phase_id . "' AND pi_stage_phase.psp_id = pi_stage_phase_activity.psp_id AND pi_stage_phase_activity.activity_id = '" . $answer_activity_id . "' LIMIT 1"));
    		
    		
    	$categories[$key]['#weight'] = $pos_result;//$node_categories[$key]['#weight'];
    }

    if (count($categories) > 1) {
    	uasort($categories, "my_weight_compare");
    }
		
    // set $tree to point to the above $form['onepageprofile_categories'] object
    $tree = &$form['onepageprofile_categories'];
    foreach($categories as $key => $category) {
				
        $key_answer = node_load($key);

        // add $tree entries for current category (i.e. $key)
        $tree[$key]['title'] = array(
            '#value' => t($category['#title']),
        );
				
        $tree[$key]['weight'] = array(
            '#type'          => 'weight',
            '#delta'         => max(10, count($categories)),
            '#default_value' => $node_categories[$key]['#weight'],
        );
    }
    return $form;
}

function pi_sort_key_answers_insert($node) {
	$details  = get_inquiry_details_from_current_path();
    while ($key_answer = current($node->onepageprofile_categories)) {
        db_query("INSERT INTO pi_sort_key_answers (nid, vid, key_answer, weight) VALUES ('" . $node->nid . "', '" . $node->vid . "', '" . key($node->onepageprofile_categories) . "', '" . $key_answer['weight'] . "')");
        pi_activity_update_weight_from_node(key($node->onepageprofile_categories), $key_answer['weight']);
        next($node->onepageprofile_categories);
    }
    reset($node->onepageprofile_categories);
}

function pi_sort_key_answers_update($node) {
// if this is a new node or we're adding a new revision,
    if ($node->revision) {
        pi_sort_key_answers_insert($node);
    }
    else {
        db_query("DELETE FROM pi_sort_key_answers WHERE vid = '" . $node->vid . "' ");
        pi_sort_key_answers_insert($node);
    }
}

function pi_sort_key_answers_delete(&$node) {
    db_query("DELETE FROM pi_sort_key_answers WHERE nid = '" . $node->nid . "' ");
}


function pi_sort_key_answers_load($node) {
    $result = new stdClass;
    $result->categories = pi_sort_key_answers_get_choice($node);
    return $result;
}


function pi_sort_key_answers_view($node, $teaser, $page = FALSE) {
	global $user;
	$details = get_inquiry_details_from_current_path();
	
	$node = node_prepare($node, $teaser);

	// Get the key a that will be rows in the table(s)
    //$key_questions_nid = find_sort_key_questions_nid_for_uid_and_inquiry($uid, $details->inquiry_id);
    
    
    // Add the categories of existing nodes and the options list for new nodes
    if(isset($node->nid))
    {
        $sorted_key_answers = $node->categories;
    }
    else
    {
        $sorted_key_answers = array();
    }
    $all_key_answers = pi_sort_key_answers_get_options();
    $key_answers_to_show = pi_merge_content_item_lists($sorted_key_answers, $all_key_answers);

    // Get the key questions that will be table(s)
    $key_questions_nid = find_sort_key_questions_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);
    if(isset($key_questions_nid))
    {
    	$key_questions_node = node_load($key_questions_nid);
    	$sorted_key_questions = $key_questions_node->categories;
    }
    else
    {
        $sorted_key_questions = array();
    }
    
    $all_key_questions = pi_sort_key_questions_get_options();
    $key_questions_to_show = pi_merge_content_item_lists($sorted_key_questions, $all_key_questions);
    
    //Link to add a new key question
	//cannot get activity id from $details when viewing a list of activity teasers
	$activity_id_for_this_node = get_activity_id_for_nid($node->nid);

	if($activity_id_for_this_node)
	{
		$node->content['pi_sort_key_answers_add_link'] = array(
	            '#value' => make_add_activity_link($details->inquiry_id, $details->stage_id, $details->phase_id, $activity_id_for_this_node, $user->uid),
	            '#weight' => -1
		);
	}

    $node->content['pi_sort_key_answers'] = array(
            '#value' => theme('pi_sort_key_answers', $node, $teaser, $key_questions_to_show, $key_answers_to_show),
            '#weight' => 2
    );

    return $node;
}

function theme_pi_sort_key_answers_no_questions($node, $teaser) {
	global $user;
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();

	$output = '';

	// Get the sorted key answers for this node
	if(isset($node->nid)) {
		$sorted_key_answers = $node->categories;
	}
	else {
		$sorted_key_answers = array();
	}
	
	//Get all key answers for this inquiry
	$all_key_answers = pi_sort_key_answers_get_options();

	// Add unsorted key answers to the list of sorted key answers and give an appropriate count
	// (the sorted key answers will have a sequential count from 0 
	foreach(array_keys($all_key_answers) as $keq_answer_nid)
	{
		if(!array_key_exists($keq_answer_nid, $sorted_key_answers))
		{
			$sorted_key_answers[$keq_answer_nid] = $all_key_answers[$keq_answer_nid];
			$sorted_key_answers[$keq_answer_nid]['#weight'] = count($sorted_key_answers);
		}
	}
	
	// Assemble an array of key answers in the output format (build_activity_link makes this a link with icon)
	$key_answers_to_show = array();
	foreach(array_keys($sorted_key_answers) as $sorted_key_answers_nid)
	{
		$key_answer_activity_id = get_activity_id_for_nid($sorted_key_answers_nid);
		if ($key_answer_activity_id)
		{
			$key_answers_to_show[] = build_activity_link($details->inquiry_id, $details->stage_id, $details->phase_id, $key_answer_activity_id, $uid);
		}
	}

	// When there's key answers to show, show them
	// otherwise show a placeholder text
	if (count($key_answers_to_show) > 0)
	{
		if(!$teaser) {
			// If there are some key answers, also get the hypothesis for this inquiry (if exists)
			// when it's not a teaser view
			$hypothesis_param = find_hypothesis_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);

			if ($hypothesis_param)
			{
				$hypothesis_node = node_load($hypothesis_param);
				$hypothesis_activity_id = get_activity_id_for_nid($hypothesis_param);
				$hypothesis_activity = load_activity($hypothesis_activity_id);
				if ($hypothesis_activity->description)
				{
					$hypothesis_prefix .= "<strong>" . check_plain($hypothesis_activity->description) . ": </strong>";
				}
				else
				{
					$hypothesis_prefix .= "<strong>" . t('My hypothesis') . ": </strong>";
				}
				$output .= "<p>" . $hypothesis_prefix . $hypothesis_node->hypothesis . "</p>";
			}
		}
		
		// Add a title to the list in a ncie format, then list the key answers
		$sentence = format_plural(count($key_answers_to_show), 'My key answer is:', 'My key answers are:');
		$output .= '<div><strong>' . $sentence . '</strong></div>';
		$output .= theme('item_list', $key_answers_to_show, NULL, 'ol', array('style' => 'list-style-type:none'));
	}
	else
	{
		// No key answers, so say that.
		$output .= "<p>No key answers are available.</p>";
	}

	return $output;
}



function theme_pi_sort_key_answers($node, $teaser, $key_questions_to_show, $key_answers_to_show) {
	global $user;
	$details = get_inquiry_details_from_current_path();

	$output = '';
    
	$rows = array();
	$header = array();
	foreach($key_questions_to_show as $key_question_nid => $question)
	{
		//Make a table for each key question

		$rows[$key_question_nid] = array();
		$header[$key_question_nid] = array(check_plain($question['#title']));

	}
	
	foreach($key_answers_to_show as $answer_nid => $answer)
	{
		$key_answer_node = node_load($answer_nid);
		if($key_answer_node)
		{
			$key_question_id = $key_answer_node->key_question_id;
			$row_activity_id = get_activity_id_for_nid($answer_nid);
			if ($row_activity_id)
			{
				$line = build_activity_link($details->inquiry_id, $details->stage_id, $details->phase_id, $row_activity_id, $user->uid);
			}
			else
			{
				$line = $answer['#title'];
			}

			//$rows[$key_question][] = array('data' => $row);
			$rows[$key_question_id][] = $line;
		}
	}

	
    
	if(count($key_questions_to_show)>0)
	{
		if($teaser)
		{
			$output .= '<p>' . t('These are the answers to your key questions.  Click the activity to sort them.') . '</p>';
		}
		
		foreach($key_questions_to_show as $question_nid => $question)
		{
			$output .= '<div><strong>' . $header[$question_nid][0] . '</strong></div>';
			if (count($rows[$question_nid]) > 0)
			{
				$output .= theme('item_list', $rows[$question_nid], NULL, 'ul', array('style' => 'list-style-type:none'));
			}
			else
			{
				$output .= theme('item_list', array('No answers linked to this question'), NULL, 'ul', array('style' => 'list-style-type:none'));
			}
		}
	}
	else
	{
		$output .= "<p>No key questions are available to answer.</p>";
	}
	return $output;
}




function theme_pi_sort_key_answers_node_form($form) {
	global $user;
	$uid = $user->uid;
	$details = get_inquiry_details_from_current_path();
	
    // Add the sorted key questions if they exist and then add unsorted ones
    $sorted_key_questions_nid = find_sort_key_questions_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);
    if(isset($sorted_key_questions_nid))
    {
    		$sorted_key_questions_node = node_load($sorted_key_questions_nid);
    		$sorted_key_questions = $sorted_key_questions_node->categories;
    }
    else
    {
        $sorted_key_questions = array();
    }
    
    $all_key_questions = pi_sort_key_questions_get_options();
    $key_questions = pi_merge_content_item_lists($sorted_key_questions, $all_key_questions);

    $rows = array();
    
    // Prepare rows to hold an array of arrays if key answers, organised by key question nid
    // also prepare draggable table elements
    if (count($key_questions) > 0)
    {
    	foreach ($key_questions as $key_question_nid => $key_question)
    	{
    		//Make a table for each key question
    		$key_question_node = node_load($key_question_nid);
    		if($key_question_node)
    		{
	    		drupal_add_tabledrag(check_plain('onepageprofile-categories'.$key_question_nid), 'order', 'sibling', 'onepageprofile-element');
	    		$rows[$key] = array();
    		}
    	}
    }
    
    // Load all the key answers into the array of arrays
	$tree = &$form['onepageprofile_categories'];
	foreach (element_children($tree) as $key_answer_nid)
	{
		$tree[$key_answer_nid]['weight']['#attributes']['class'] = 'onepageprofile-element';
	
		$row = array();
		$row[] = drupal_render($tree[$key_answer_nid]['title']);
		$row[] = drupal_render($tree[$key_answer_nid]['weight']);
		
		
		$key_answer_node = node_load($key_answer_nid);
		if($key_answer_node)
		{
			$key_question_id = $key_answer_node->key_question_id;
			$rows[$key_question_id][$key_answer_nid] = array('data' => $row, 'class' => 'draggable');
		}
   }
   
	$output  .= '<p>' . t('Here you can change the order of your key answers for each key question. Click on the plus sign next to the answer and drag it to where you want it to be.') . '</p>';
	$answer_flag = 0;
	if (count($key_questions) > 0)
	{
		//Render the array of arrays to make a table listing each key question with answers
		// using table drag 
		foreach(array_keys($key_questions) as $key_question_nid)
		{
			if(count($rows[$key_question_nid]) > 0)
			{
				$answer_flag = 1;
				$output .= theme('table', array(check_plain($key_questions[$key_question_nid]['#title']), t('Weight')), $rows[$key_question_nid], array('id' => check_plain('onepageprofile-categories'.$key_question_nid)));
			}
			else
			{
				$output .= '<p><strong>' . $key_questions[$key_question_nid]['#title'] . '</strong><br/> No answers linked to this question</p>';
			}
		}
	}
	else
	{
		$output .= "<p>No key questions are available.</p>";
	}

	if($answer_flag == 1) {
		$output .= drupal_render($form);
	}

   	return $output;
}

/**
 * Returns the array of key questions that were selected for the sort 
 * indexed by their node ids and with #weight and incremental count starting at 0 
 * @return array [key question node id] #weight=> 1, #title = key question title
 */
function pi_sort_key_answers_get_choice($node) {
    global $user;
    $categories = array();

    $query = "SELECT key_answer FROM pi_sort_key_answers " .
    	"WHERE pi_sort_key_answers.nid = %d " .
    	"AND pi_sort_key_answers.vid = %d " .
    	"ORDER BY weight ASC";
    
    $result = db_query($query, $node->nid, $node->vid);
	
    while ($row = db_fetch_object($result))
    {
        $loaded_node = node_load($row->key_answer, NULL, TRUE);
        if($loaded_node!=false)
        {
	        $categories[$row->key_answer] = array(
	            '#weight' => count($categories),
	            '#title'  => t($loaded_node->title)
	        );
        }
    }
    return $categories;
}

/**
 * Returns an array of key answer titles indexed by their node ids
 * @return array [key answer node id] #weight=> 1, #title = key answer title
 */
function pi_sort_key_answers_get_options() {
	global $user;
	$details = get_inquiry_details_from_current_path();

/*	$query = "SELECT DISTINCT node.nid FROM node " .
		"LEFT JOIN node_access ON node.nid = node_access.nid " .
		"LEFT JOIN og_uid ON node_access.gid = og_uid.nid LEFT " .
		"JOIN pi_activity_node ON pi_activity_node.nid = node.nid " .
		"WHERE TYPE = 'pi_key_answers' AND pi_activity_node.inquiry_id = %d " .
		"AND STATUS = '1' AND (node_access.realm =  'all' OR og_uid.uid = %d )";*/
	
	$query = "SELECT DISTINCT node.nid FROM node " .
		"LEFT JOIN node_access ON node.nid = node_access.nid " .
		"LEFT JOIN og_uid ON node_access.gid = og_uid.nid LEFT " .
		"JOIN pi_activity_node ON pi_activity_node.nid = node.nid " .
		"WHERE TYPE = 'pi_key_answers' AND pi_activity_node.inquiry_id = %d " .
		"AND STATUS = '1' AND ((node.uid = %d) OR (og_uid.uid = %d) )";
	$key_answers_nids_result = db_query($query, $details->inquiry_id, $user->uid, $user->uid);
	$key_answers = array();
	while ($key_answers_nid_row = db_fetch_object($key_answers_nids_result))
	{
		$key_answer_node = node_load($key_answers_nid_row->nid);
		$key_answer_title = $key_answer_node->title;
		$key_answers[$key_answers_nid_row->nid] = array(
			'#weight' => 1,
			'#title'  => t($key_answer_title)
		);
	}
	return $key_answers;
}
