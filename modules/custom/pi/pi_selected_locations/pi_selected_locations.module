<?php
// $Id: pi_selected_locations.module ou_mbg Exp $

/**
 * @file
 * Provides a "selected_locations" node type.
 */


/**
 * Implementation of hook_node_info().
 */
function pi_selected_locations_node_info() {
  // We return an array since a module can define multiple node types.
  // We're only defining one node type, type 'pi_selected_locations'.
  return array(
    'pi_selected_locations' => array(
      'name' => t('Selected locations'), // Required.
      'module' => 'pi_selected_locations',  // Required.
      'description' => t('Select one or more locations for carrying out your inquiry'), // Required.
      'has_title' => FALSE,
      'title_label' => t('Pick locations'),
      'has_body' => TRUE,
      'body_label' => t('Locations'),
      'locked' => TRUE
    )
  );
}

//Commented out as no longer used in Drupal 6. Previously only the hook_menu line was active MBG 09_08_11s
/**
 * Implementation of hook_menu().
 */
//function pi_selected_locations_menu($may_cache) {
//  $items = array();
//
//  // Do not cache this menu item during the development of this module.
//  if (!$may_cache) {
//    $items[] = array(
//      'path' => 'node/add/pi_selected_locations',
//      'title' => t('Selected Locations'),
//      'access' => user_access('create selected_locations'),
//    );
//  }
//
//  return $items;
//}

/**
 * Implementation of hook_perm().
 */
function pi_selected_locations_perm() {
  return array('create pi_selected_locations', 'edit own pi_selected_locations');
}

/**
 * Implementation of hook_access().
 */
function pi_selected_locations_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return (user_access('create pi_selected_locations'));
  }

  if ($op == 'update' || $op == 'delete') {
    return (user_access('edit own pi_selected_locations'));
  }
}

/**
 * Implementation of hook_form().
 */
function pi_selected_locations_form(&$node) {

  drupal_set_title(t('Pick locations'));

  $type = node_get_types('type', $node);

  global $user;
  $uid = $user->uid;
  
  $results = db_query("SELECT nid,title FROM node WHERE type = 'pi_available_locations' AND status = '1'");
  $options = array();
  
  while ($result = db_fetch_array($results)) {
    $options[$result['nid']] = $result['title'];
  }

  $form['title'] = array(
    '#type' => 'hidden',
    '#title' => check_plain($type->title_label),
    '#required' => FALSE,
    '#default_value' => check_plain($type->title_label),
    '#weight' => -5
  );
  $form['body_filter']['body'] = array(
    '#type' => 'hidden',
    '#title' => check_plain($type->body_label),
    '#required' => FALSE,
    '#default_value' => NULL,
    '#rows' => 5,
    '#weight' => -1
  );
  $form['selected_locations'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available locations'),
    '#required' => FALSE,
    '#multiple' => TRUE,
    '#default_value' => explode(",", $node->selected_locations),
    '#options' => $options,
    '#weight' => 5
  );
  
  $prefix = "";
  $prefix .= "<p>Pick which locations you need. Click on the tabs on the right to find out more about these locations.</p>";
  
  $form['#prefix'] = $prefix;

  return $form;
}

/**
 * Implementation of hook_validate().
 */
function pi_selected_locations_validate($node) {
  // Enforce a minimum word length of 3.
  if ( isset($node->selected_locations) && count($node->selected_locations) < 1) {
    $type = node_get_types('type', $node);
    form_set_error('selected_locations', t('Your @type is too short. You need at least one location.', array('@type' => $type->name)));
  }
}

/**
 * Implementation of hook_insert().
 */
function pi_selected_locations_insert($node) {
	$new_selected_locations = array();
	foreach ($node->selected_locations as $location) {
		if ($location != 0) {
			$new_selected_locations[] = $location;
		}
	}
	db_query("INSERT INTO {pi_selected_locations} (nid, vid, inquiry_id, selected_locations) VALUES (%d, %d, '%d', '%s')", $node->nid, $node->vid, $node->inquiry_id|1, implode(",", $new_selected_locations));
}

/**
 * Implementation of hook_update().
 */
function pi_selected_locations_update($node) {
  if ($node->revision) {
    pi_selected_locations_insert($node);
  }
  else {
    db_query('DELETE FROM {pi_selected_locations} WHERE nid = %d', $node->nid);
    pi_selected_locations_insert($node);
  }
}

/**
 * Implementation of hook_delete().
 */
function pi_selected_locations_delete(&$node) {
  // Delete the related information we were saving for this node.
  db_query('DELETE FROM {pi_selected_locations} WHERE nid = %d', $node->nid);
}


/**
 * Implementation of hook_load().
 */
function pi_selected_locations_load($node) {
  // drupal_add_js('misc/collapse.js');
  return db_fetch_object(db_query('SELECT inquiry_id, selected_locations FROM {pi_selected_locations} WHERE vid = %d',
    $node->vid));
}

/**
 * Implementation of hook_view().
 */
function pi_selected_locations_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);

    $node->content['pi_selected_locations'] = array(
      '#value' => theme('pi_selected_locations', $node),
      '#weight' => 2
      );
  }

  if ($teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }

  return $node;
}

function pi_selected_locations_theme() {
  return array(
    'pi_available_areas' => array(
      'arguments' => array('node'),
    ),
  );
}


function theme_pi_selected_locations($node) {
  
  drupal_set_title(t('Pick locations'));
   
  $output = "";
  
  foreach (explode(",", $node->selected_locations) as $locations_id) {
    $locations_node = node_load($locations_id);
    $output .= '<div class="teaser_list">';
    $output .= '<h3>' . l($locations_node->title, 'node/' . $locations_node->nid) . '</h3>';
    if (isset($locations_node->image_id)) {
      $output .= '<img style="float: left; clear: left; padding: 0 10px 1.8em 0;" src="' . url("image/view/" . $locations_node->image_id . "/thumbnail") . '" />';
    }
    elseif (isset($locations_node->map_image_id)) {
      $output .= '<img style="float: left; clear: left; padding: 0 10px 1.8em 0;" src="' . url("image/view/" . $locations_node->map_image_id . "/thumbnail") . '" />';
    };
    
    $body = t($locations_node->body);
    if (strlen($body) > 70) {
      $body = substr($body, 0, 70) . '...';
    };
    $output .= $body . '</br></br>';
    
    if (isset($locations_node->latitude) AND ($locations_node->latitude != 0)) {
      $output .= t('<strong>Latitude: </strong>' . $locations_node->latitude);
    };
    if ((isset($locations_node->latitude) AND ($locations_node->latitude != 0)) AND 
        (isset($locations_node->longitude) AND ($locations_node->longitude != 0))) {
      $output .= t(' &nbsp;&nbsp; ');
    };
    if (isset($locations_node->longitude) AND ($locations_node->longitude != 0)) {
      $output .= t('<strong>Longitude: </strong>' . $locations_node->longitude);
    };
    $output .= '</div>';
  };
  return $output;
}
