<?php
// $Id: pi_fairtest_analysis.module,v 1.0 2009/11/30 ou_mbg Exp $

/**
 * @file
 * Module for creating "pi_fairtest_analysis" node type
 */


/**
 * Implementation of hook_node_info().
 */

function pi_fairtest_analysis_node_info() {

    return array(
    'pi_fairtest_analysis' => array(
    'name' => t('Analysis of fair test data'), // Required.
    'module' => 'pi_fairtest_analysis',  // Required.
    'description' => t('Analysis of fair test data'), // Required.
    'has_title' => TRUE,
    'title_label' => t('Analysis of fair test noise data'),
    'has_body' => FALSE,
    'body_label' => t('Analysis'),
    'locked' => TRUE)
    );

}


//hide node revisions box - this is a node type often set to keep revisions
//if form alter not included then user sees the log message box
function pi_fairtest_analysis_form_alter(&$form, $form_state, $form_id) {
    global $user; // Bring $user object into scope if displaying shall depend on userid or role
    #if ( $user->uid != 1 ) // 0 -> Anonymous, 1 -> SuperAdmin, 2+ -> Authenticated users
    if ( !in_array('USER ROLE NAME', $user->roles) ) // Check for role (using role name)
    {
    // add class 'hideme' to elements which shall be hidden
        $form['revision_information']['#attributes'] = array('class' => 'hideme'); // Revision information
    // This class has been added to the CSS file:
    //  .hideme { display: none; }
    }
}

/**
 * Implementation of hook_perm().
 */

function pi_fairtest_analysis_perm() {
    return array('create pi_fairtest_analysis content', 'edit pi_fairtest_analysis');
}

/**
 * Implementation of hook_access().
 */
function pi_fairtest_analysis_access($op, $node) {
    global $user;
    $details = get_inquiry_details_from_current_path();

    if ($op == 'create') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
    //return (user_access('create pi_fairtest_analysis'));
    }

    if ($op == 'update' || $op == 'delete') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    //return (user_access('edit own pi_fairtest_analysis'));
    }
}

/**
 * Implementation of hook_form().
 */

function pi_fairtest_analysis_form(&$node) {

// Get metadata for this node type
// (we use it for labeling title and body fields).
// We defined this in pi_fairtest_analysis_node_info().
    $type = node_get_types('type', $node);
    global $user;

    $node_details = get_inquiry_details_from_current_path();
    if (is_numeric($node_details->activity_id)) {
        $current_activity = load_activity($node_details->activity_id);
    }

    if ($current_activity->name) {
        drupal_set_title(t($current_activity->name));
    }

    $form['title'] = array(
        '#type' => 'hidden',
        '#title' => check_plain($type->title_label),
        '#required' => FALSE,
        '#default_value' => check_plain($type->title_label),
        '#weight' => -9
    );

    $form['tree1'] = array(
        '#type' => 'fieldset',
        '#title' => t('Tree 1: normal conditions'),
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
    );

    $form['tree1']['q_compare'] = array(
        '#type' => 'textarea',
        '#title' => t('How does it compare to the school ambient noise (lower or higher)?'),
        '#required' => FALSE,
        '#default_value' => $node->q_compare,
        '#resizable' => FALSE,
        '#rows' => 3,
        '#cols' => 40,
        '#weight' => -8
    );
    $form['tree1']['q_highest'] = array(
        '#type' => 'textfield',
        '#title' => t('What was the highest level of noise during that period?'),
        '#required' => FALSE,
        '#default_value' => $node->q_highest,
        '#weight' => -7
    );
/*    $form['tree1']['q_time'] = array(
        '#type' => 'textfield',
        '#title' => t('Can you identify the time of the day (day vs. night)?'),
        '#required' => FALSE,
        '#default_value' => $node->q_time,
        '#weight' => -6
    );
    $form['tree1']['q_source'] = array(
        '#type' => 'textfield',
        '#title' => t('Can you tell what might be the source of the noise?'),
        '#required' => FALSE,
        '#default_value' => $node->q_source,
        '#weight' => -5
    );*/
    
       $form['tree2'] = array(
        '#type' => 'fieldset',
        '#title' => t('Tree 2: sound playing'),
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
    );

    $form['tree2']['n_compare'] = array(
        '#type' => 'textarea',
        '#title' => t('How does it compare to the school ambient noise (lower or higher)?'),
        '#required' => FALSE,
        '#default_value' => $node->n_compare,
        '#resizable' => FALSE,
        '#rows' => 3,
        '#cols' => 40,
        '#weight' => -4
    );
    $form['tree2']['n_highest'] = array(
        '#type' => 'textfield',
        '#title' => t('What was the highest level of noise during that period?'),
        '#required' => FALSE,
        '#default_value' => $node->n_highest,
        '#weight' => -3
    );
 /*   $form['tree2']['n_time'] = array(
        '#type' => 'textfield',
        '#title' => t('Can you identify the time of the day (day vs. night)?'),
        '#required' => FALSE,
        '#default_value' => $node->n_time,
        '#weight' => -2
    );
    $form['tree2']['n_source'] = array(
        '#type' => 'textfield',
        '#title' => t('Can you tell what might be the source of the noise?'),
        '#required' => FALSE,
        '#default_value' => $node->n_source,
        '#weight' => -1
    );*/
    
    $prefix = "";

    if(arg(2) == 'edit') {
        $link = build_link('node', $node->nid, 'view', $node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id);

        switch ($current_activity->destination) {
            case "self":
                $destination = "";
                break;
            case "phase":
                $destination = t("destination=" . build_link("phase", $node_details->phase_id, "view", $node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id,$node_details->activity_id));
                break;
            default:
                $destination = t("destination=" . build_home_link($node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id));
                break;
        }

        $prefix .= '<p>';
        $prefix .= l(t('View'), $link,  array('html' => true, 'query' => $destination));
        $prefix .= '</p>';
    }

/*
    if ($current_activity->description) {
    	$prefix .= "<p>" . t($current_activity->description) . "</p>";
    }
    else {
    	$prefix .= "<p>Analysis of fair test noise data</p>";
    }
*/

    $form['#prefix'] = $prefix;

    return $form;

}

/**
 * Implementation of hook_insert().
 */


function pi_fairtest_analysis_insert($node) {
    db_query("INSERT INTO {pi_fairtest_analysis} (nid, vid, q_compare, q_highest, q_time, q_source, n_compare, n_highest, n_time, n_source) VALUES ('%d', '%d',  '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')",
        $node->nid, $node->vid, $node->q_compare, $node->q_highest, $node->q_time, $node->q_source, $node->n_compare, $node->n_highest, $node->n_time, $node->n_source);
}

/**
 * Implementation of hook_update().
 */

function pi_fairtest_analysis_update($node) {
    if ($node->revision) {
        pi_fairtest_analysis_insert($node);
    }

    else {
        db_query("UPDATE {pi_fairtest_analysis} SET q_compare = '%s', q_highest = '%s', q_time = '%s', q_source = '%s', n_compare = '%s', n_highest = '%s', n_time = '%s', n_source = '%s' WHERE vid = %d", $node->q_compare, $node->q_highest, $node->q_time, $node->q_source, $node->n_compare, $node->n_highest, $node->n_time, $node->n_source, $node->vid);
    }
}

/**
 * Implementation of hook_delete().
 */

function pi_fairtest_analysis_delete(&$node) {
// Delete the related information we were saving for this node.
    db_query('DELETE FROM {pi_fairtest_analysis} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */

function pi_fairtest_analysis_load($node) {
    return db_fetch_object(db_query('SELECT * FROM {pi_fairtest_analysis} WHERE vid = %d',
    $node->vid));
}

/**
 * Implementation of hook_view().
 */
function pi_fairtest_analysis_view($node, $teaser = FALSE, $page = FALSE) {
    if (!$teaser) {
    // Use Drupal's default node view.
        $node = node_prepare($node, $teaser);

        $node->content['pi_fairtest_analysis'] = array(
            '#value' => theme('pi_fairtest_analysis', $node),
            '#weight' => 2
        );

    }

    if ($teaser) {
    // Use Drupal's default node view.
        $node = node_prepare($node, $teaser);
    }

    return $node;
}

function pi_fairtest_analysis_theme() {
    return array(
    'pi_fairtest_analysis' => array(
    'arguments' => array('node'),
    ),
    );
}


function theme_pi_fairtest_analysis($node) {

    $output = '';

    global $user;
    $node_details = get_inquiry_details_from_current_path();

    if(check_node_function_of_activity ($node_details->inquiry_id, $node_details->activity_id, $user->uid, 'edit')) {

        $link = build_link('node', $node->nid, 'edit', $node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id);

        switch ($current_activity->destination) {
            case "self":
                $destination = "";
                break;
            case "phase":
                $destination = t("destination=" . build_link("phase", $node_details->phase_id, "view", $node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id,$node_details->activity_id));
                break;
            default:
                $destination = t("destination=" . build_home_link($node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id));
                break;
        }

        $output .= '<p>';
        $output .= l(t('Edit'), $link,  array('html' => true, 'query' => $destination));
        $output .= '</p>';

    }

    $output .= '<div>';

    $output .= "<div style = 'display: block; float: left; width: 300px; margin: 0 1em 0 0; padding: 0 1em 0 1em; border: solid 1px black;'>";
    $output .= '<h2>Tree 1: Normal conditions</h2>';
    $output .= '<p><strong>How does it compare to the school ambient noise?</strong> ' . check_plain($node->q_compare). '</p>';
    $output .= '<p><strong>What was the level of noise during that period?</strong> ' . check_plain($node->q_highest). '</p>';
   // $output .= '<p><strong>Can you identify the time of the day (day vs. night)?</strong> ' . check_plain($node->q_time). '</p>';
   // $output .= '<p><strong>Can you tell what might be the source of the noise?</strong> ' . check_plain($node->q_source). '</p>';
    $output .= '</div>';

    $output .= "<div style = 'display: block; float: left; width: 300px; margin: 0; padding: 0 1em 0 1em; border: solid 1px black;'>";
    $output .= '<h2>Tree 2: Sounds playing</h2>';
   $output .= '<p><strong>How does it compare to the school ambient noise?</strong> ' . check_plain($node->n_compare). '</p>';
    $output .= '<p><strong>What was the level of noise during that period?</strong> ' . check_plain($node->n_highest). '</p>';
   // $output .= '<p><strong>Can you identify the time of the day (day vs. night)?</strong> ' . check_plain($node->n_time). '</p>';
   // $output .= '<p><strong>Can you tell what might be the source of the noise?</strong> ' . check_plain($node->n_source). '</p>';
    $output .= '</div>';

    $output .= '</div>';

    return $output;
}

