<?php
// $Id$: pi_key_measures.module ou_mbg Exp $

/**
 * @file
 * Provides a "key_measures" node type.
 */

/**
 * Implementation of hook_node_info().
 */
function pi_key_measures_node_info() {
  // We return an array since a module can define multiple node types.
  // We're only defining one node type, type 'pi_key_measures'.
  return array(
    'pi_key_measures' => array(
      'name' => t('Selected measures'), // Required.
      'module' => 'pi_key_measures',  // Required.
      'description' => t('Select one or more key measures for carrying out your inquiry'), // Required.
      'has_title' => TRUE,
      'title_label' => t('Pick measurements'),
      'has_body' => TRUE,
      'body_label' => t('Measures'),
      'locked' => TRUE
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function pi_key_measures_perm() {
  return array();
}

/**
 * Implementation of hook_access().
 */
function pi_key_measures_access($op, $node) {
  global $user;
  $details = get_inquiry_details_from_current_path();

  if ($op == 'create') {
    return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
  }

  if ($op == 'update' || $op == 'delete') {
    return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
  }
}

/**
 * Implementation of hook_form().
 */
function pi_key_measures_form(&$node) {
	
  $details = get_inquiry_details_from_current_path();
  $current_activity = load_activity($details->activity_id);
  
  drupal_set_title(t($current_activity->name));

  $type = node_get_types('type', $node);

  global $user;
  $uid = $user->uid;
  
  $prefix = "<p>" . t($current_activity->description) . "</p>";
  
  //change to only get public and og nids
  $results = db_query("SELECT node.nid, node.title FROM node LEFT JOIN node_access ON node.nid = node_access.nid LEFT JOIN og_uid ON node_access.gid = og_uid.nid WHERE TYPE = 'pi_available_measures' AND STATUS = '1' AND (node_access.realm =  'all' OR og_uid.uid =  '" . $uid . "')");

  $options = array();
  
  while ($result = db_fetch_array($results)) {
    $options[$result['nid']] = $result['title'];
  }
  $form['title'] = array(
    '#type' => 'hidden',
    '#title' => check_plain($type->title_label),
    '#required' => FALSE,
    '#default_value' => 'Pick measurements',
    '#weight' => -5
  );
  $form['body_filter']['body'] = array(
    '#type' => 'hidden',
    '#title' => check_plain($type->body_label),
    '#required' => FALSE,
    '#default_value' => NULL,
    '#rows' => 5,
    '#weight' => -1
  );
  
  $default = $node->key_measures;
  if (!$default) {
		$default = array();
  }
  $form['key_measures'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Key measurements'),
    '#required' => TRUE,
    '#multiple' => TRUE,
    '#default_value' => $default,
    '#options' => $options,
    '#weight' => 5
  );

  $form['#prefix'] = $prefix;
	  
  return $form;
}


/**
 * Implementation of hook_validate().
 */
function pi_key_measures_validate($node) {
  // Enforce a minimum word length of 3.
  if (isset($node->key_measures) && count($node->key_measures) < 1) {
    $type = node_get_types('type', $node);
    form_set_error('selected_measures', t('Your @type is too short. You need at least one measure.', array('@type' => $type->name)));
  }
}

/**
 * Implementation of hook_insert().
 */
function pi_key_measures_insert($node) {
  foreach ($node->key_measures as $measure) {
  	if ($measure != 0) {
  		db_query("INSERT INTO pi_key_measures (nid, vid, measure_nid) VALUES (%d, %d, %d) ", $node->nid, $node->vid, $measure);
  	}
  }
}

/**
 * Implementation of hook_update().
 */
function pi_key_measures_update($node) {
  if ($node->revision) {
    pi_selected_measures_insert($node);
  }
  else {
    db_query('DELETE FROM {pi_key_measures} WHERE vid = %d', $node->vid);
    pi_key_measures_insert($node);
  }
}

/**
 * Implementation of hook_delete().
 */
function pi_key_measures_delete(&$node) {
	// Delete the related information we were saving for this node.
  	db_query('DELETE FROM {pi_key_measures} WHERE nid = %d', $node->nid);
}


/**
 * Implementation of hook_load().
 */
function pi_key_measures_load($node) {
  $details = get_inquiry_details_from_current_path();
  $result = new stdClass;
  //selected measures
  $result->key_measures = find_key_measures($node->vid);
  return $result;
}

function find_key_measures($vid) {
	$measure_array = array();
	$prev_query = "SELECT measure_nid FROM pi_key_measures WHERE vid = '" . $vid . "' ";
	$db_result = db_query($prev_query);
  	while ($prev_result = db_fetch_object($db_result)) {
  		$prev_result2 = $prev_result->measure_nid;
  		$measure_array[] = $prev_result2;
  	}
  	return $measure_array;
}


/**
 * Implementation of hook_view().
 */
 function pi_key_measures_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);

    $node->content['pi_key_measures'] = array(
      '#value' => theme('pi_key_measures', $node),
      '#weight' => 2
      );
  }

  if ($teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }

  return $node;
}

function pi_key_measures_theme() {
  return array(
    'pi_key_measures' => array(
      'arguments' => array('node'),
    ),
  );
}

function theme_pi_key_measures($node) {

  $details = get_inquiry_details_from_current_path();
  $current_activity = load_activity($details->activity_id);
  drupal_set_title(t($current_activity->name));
  $output = "<p>" . $current_activity->description . "</p>";
  
  $query = "SELECT node.title FROM node, pi_key_measures WHERE pi_key_measures.nid = '" . $node->nid . "' AND pi_key_measures.measure_nid = node.nid ";
  $result = db_query($query);
  $output .= "<ul>";
  while($measure = db_fetch_object($result)) {
  	$output .= "<li>" . $measure->title . "</li>";
  }
	$output .= "</ul>";
	return $output;
}

