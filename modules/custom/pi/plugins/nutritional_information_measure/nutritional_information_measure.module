<?php

function nutritional_information_measure_theme() {
	return array(
			'nutritional_information_measure_form_item' => array(
					'arguments' => array('form' => NULL),
			),
	);
}

function theme_nutritional_information_measure_form_item($form) {
	$information = _nutritional_information_measure_load_information();

	nquire_commons_load_nquire_dynamic_measure_support();
	nquire_commons_load_nquire_tooltip_support();

	drupal_add_js(drupal_get_path('module', 'nutritional_information_measure') . '/js/NutritionalInformationMeasure.js');
	_nutritional_information_measure_inject_javascript_module($information);

	$headers = array(t('Food'));
	foreach ($information['components'] as $component) {
		$headers[] = $component['name'];
	}

	$header = implode('', array_map(function($x) {
										return "<th>$x</th>";
									}, $headers));

	$table = '<table class="food_table">'
					. '<thead><tr>' . $header . '</tr></thead>'
					. '<tbody></tbody>'
					. '</table>';

	$output = '<div id="' . $form['#widget_id'] . '" measure_type="measure_widget__nutritionalinformation" input_element_id="' . $form['#widget_input_id'] . '">'
					. '<div>'
					. nquire_commons_create_not_expanding_table_block($table)
					. '<a class="add_food" href="#">' . t('Add food') . '</a>'
					. '</div>';

	return $output;
}

function _nutritional_information_measure_load_information() {
	$data = array(
			'components' => array(
					'salt' => array('name' => t('Salt')),
					'sugar' => array('name' => t('Sugar')),
					'fats' => array('name' => t('Fats')),
			),
			'foods' => array(
					'burger' => array(
							'name' => t('Burger'),
							'values' => array('sugar' => 10, 'fats' => 100),
					),
					'salad' => array(
							'name' => t('Salad'),
							'values' => array('salt' => 1),
					),
			),
	);

	return $data;
}

function _nutritional_information_measure_inject_javascript_module($information) {
	$module = "{"
					. "  init: function() {"
					. "    this.information = " . json_encode($information) . ";"
					. "  }"
					. "}";
	nquire_commons_inject_inline_javascript_module('NutritionalInformationMeasureData', $module);
}

function nutritional_information_measure_pi_measure__nutritionalinformation_create_form_item($measure_node, &$form, $value) {
	$input_element_id = "measure_{$measure_node->nid}";
	$widget_element_id = "{$input_element_id}_widget";

	$form[$input_element_id] = array(
			'#type' => 'hidden',
			'#title' => check_plain($measure_node->title),
			'#description' => check_plain($measure_node->body),
			'#default_value' => $value,
			'#required' => FALSE,
	);

	$form[$widget_element_id] = array(
			'#theme' => 'nutritional_information_measure_form_item',
			'#widget_id' => $widget_element_id,
			'#widget_input_id' => $input_element_id,
	);
}

function __nutritional_information_measure_pi_measure__nutritionalinformation_format_table_value($measure_node, $value) {
	$data = nquire_commons_decode_data($value);
	$output = '';
	if (isset($data['latitude']) && isset($data['longitude'])) {
		$output .= _google_maps_measure_pi_measure_format_degrees($data['latitude'], 'latitude')
						. t(' and ')
						. _google_maps_measure_pi_measure_format_degrees($data['longitude'], 'longitude');
	}

	if (isset($data['altitude'])) {
		$output .= sprintf(" (%.2fm)", $data['altitude']);
	}

	return check_plain($output);
}

function nutritional_information_measure_pi_measure__nutritionalinformation_submeasure_get_title($measure_node, $key) {
	return check_plain($measure_node->title) . t(' (Google map @variable)', array('@variable' => $key));
}

function nutritional_information_measure_pi_measure__nutritionalinformation_get_submeasure_keys($measure_node) {
	$data = nquire_commons_decode_data($measure_node->data);
	$result = array();
	foreach (array('latitude', 'longitude', 'altitude') as $variable) {
		if ($data[$variable]) {
			$result[] = "{$measure_node->nid}:{$variable}";
		}
	}
	return $result;
}

function nutritional_information_measure_pi_measure__nutritionalinformation_submeasure_get_title_for_chart($measure_node, $key) {
	switch ($key) {
		case 'latitude':
			return t('Latitude');
		case 'longitude':
			return t('Longitude');
		case 'altitude':
			return t('Altitude');
		default:
			return 'unkwnown';
	}
}

function nutritional_information_measure_pi_measure__nutritionalinformation_submeasure_is_numeric() {
	return TRUE;
}

function nutritional_information_measure_pi_measure__nutritionalinformation_submeasure_get_value_for_chart($measure_node, $key, &$value) {
	$data = nquire_commons_decode_data($value);
	$value = isset($data[$key]) ? $data[$key] : 0;
	return;
}

function nutritional_information_measure_pi_measure__nutritionalinformation_process_form_value($measure_node, &$value, $old_value) {
	
}

