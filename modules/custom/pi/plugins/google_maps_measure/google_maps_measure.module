<?php

function google_maps_measure_theme() {
  return array(
      'google_maps_measure_form_item' => array(
          'arguments' => array('form' => NULL),
      ),
  );
}

function theme_google_maps_measure_form_item($form) {
  nquire_commons_load_nquire_dynamic_measure_support();
  drupal_add_js(drupal_get_path('module', 'google_maps_measure') . '/js/GoogleMapMeasure.js');
  //$key = file_get_contents(drupal_get_path('module', 'google_maps_measure') . '/data/google_maps_api_key');

  $script = '<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=true"></script>';
  drupal_set_html_head($script);

  $data = nquire_commons_decode_data($form['#widget_data']);
  $size = explode('x', $data['size']);
  $output = '<div id="' . $form['#widget_id'] . '" measure_type="measure_widget__googlemap" input_element_id="' . $form['#widget_input_id'] . '">'
          . '<div class="map_canvas" style="width:' . $size[0] . 'px;height:' . $size[1] . 'px;"></div>'
          . '<div>'
          . '<a class="add_marker" href="#">' . t('Mark centre') . '</a>&nbsp;&nbsp;&nbsp;&nbsp;'
          . '<a class="forget_marker" href="#">' . t('Forget marker') . '</a>'
          . '</div>';

  return $output;
}

function google_maps_measure_pi_measure__googlemap_create_form_item($measure_node, &$form, $value) {
  $input_element_id = "measure_{$measure_node->nid}";
  $widget_element_id = "{$input_element_id}_widget";

  $form[$input_element_id] = array(
      '#type' => 'hidden',
      '#title' => check_plain($measure_node->title),
      '#description' => check_plain($measure_node->body),
      '#default_value' => $value,
      '#required' => FALSE,
  );

  $form[$widget_element_id] = array(
      '#theme' => 'google_maps_measure_form_item',
      '#widget_data' => $measure_node->data,
      '#widget_id' => $widget_element_id,
      '#widget_input_id' => $input_element_id,
  );
}

function google_maps_measure_pi_measure__googlemap_format_table_value($measure_node, $value) {
  $data = nquire_commons_decode_data($value);
  $output = '';
  if (isset($data['latitude']) && isset($data['longitude'])) {
    $output .= _google_maps_measure_pi_measure_format_degrees($data['latitude'], 'latitude') 
            . t(' and ')
            . _google_maps_measure_pi_measure_format_degrees($data['longitude'], 'longitude');
  }
  
  if (isset($data['altitude'])) {
    $output .= sprintf(" (%.2fm)", $data['altitude']);
  }
  
  return check_plain($output);
}

function _google_maps_measure_pi_measure_format_degrees($dec, $lat_lng) {
    $vars = explode(".",$dec);
    $deg = (int)$vars[0];
    $tempma = "0.".$vars[1];

    $tempma = $tempma * 3600;
    $min = floor($tempma / 60);
    $sec = $tempma - ($min*60);
    
    $l = $lat_lng === 'latitude' ? ($deg < 0 ? 'S' : 'N') : ($deg < 0 ? 'W' : 'E');
    
    return sprintf("%dÂ°%2d'%2d''%s", abs($deg), $min, $sec, $l);;
}    

function google_maps_measure_pi_measure__googlemap_submeasure_get_title($measure_node, $key) {
  return check_plain($measure_node->title) . t(' (Google map @variable)', array('@variable' => $key));
}

function google_maps_measure_pi_measure__googlemap_get_submeasure_keys($measure_node) {
  $data = nquire_commons_decode_data($measure_node->data);
  $result = array();
  foreach (array('latitude', 'longitude', 'altitude') as $variable) {
    if ($data[$variable]) {
      $result[] = "{$measure_node->nid}:{$variable}";
    }
  }
  return $result;
}

function google_maps_measure_pi_measure__googlemap_submeasure_get_title_for_chart($measure_node, $key) {
  switch ($key) {
    case 'latitude':
      return t('Latitude');
    case 'longitude':
      return t('Longitude');
    case 'altitude':
      return t('Altitude');
    default:
      return 'unkwnown';
  }
}

function google_maps_measure_pi_measure__googlemap_submeasure_is_numeric() {
  return TRUE;
}

function google_maps_measure_pi_measure__googlemap_submeasure_get_value_for_chart($measure_node, $key, &$value) {
  $data = nquire_commons_decode_data($value);
  $value = isset($data[$key]) ? $data[$key] : 0;
  return;
}

function google_maps_measure_pi_measure__googlemap_process_form_value($measure_node, &$value, $old_value) {
  
}

