<?php

function inquiry_deployer_update_inquiry_node(&$design_node) {
	_inquiry_deployer_create_update_ref_node($design_node, 'inquiry', 'pi_inquiry', array(
			'layout' => 'list',
			'roles' => _inquiry_deployer_convert_role_activity_ids($design_node->roles),
	));
}

function inquiry_deployer_update_inquiry_phases(&$design_node) {
	$data = nquire_commons_decode_data($design_node->structure);

	foreach ($data as $i => $phase) {
		$design_phase = node_load($phase['id']);
		$ref_phase = inquiry_deployer_update_phase($design_node, $design_phase);
		$query = "UPDATE {pi_phase} SET weight=%d WHERE vid=%d";
		db_query($query, $i, $ref_phase->vid);

		foreach ($phase['activities'] as $j => $activity) {
			$design_activity = node_load($activity['id']);
			$ref_activity = inquiry_deployer_update_activity($design_node, $design_phase, $design_activity);
			if ($ref_activity) {
				$query = "UPDATE {pi_activity} SET weight=%d WHERE vid=%d";
				db_query($query, $j, $ref_activity->vid);
			}
		}
	}

	inquiry_deployer_update_stages($design_node);
}

function inquiry_deployer_update_phase(&$design_node, &$design_phase) {
	$inquiry = node_load($design_node->inquiry);
	
	return _inquiry_deployer_create_update_ref_node($design_phase, 'phase', 'pi_phase', array(
			'inquiry_nid' => $design_node->inquiry,
			'collaboration' => inquiry_design_get_phase_collaboration_mode($design_node, $design_phase->nid),
			'phase_actor' => $inquiry->actor_gid,
	));
}

function _inquiry_deployer_convert_role_activity_ids($roles) {
	$data = nquire_commons_decode_data($roles);
	$new_roles = array();
	foreach ($data as $role) {
		$new_role = array('id' => $role['id'], 'title' => $role['title'], 'activities' => array());
		foreach ($role['values'] as $aid => $value) {
			if ($value != 'noaccess') {
				$design_activity = node_load($aid);
				$new_role['activities'][$design_activity->activity] = $value;
			}
		}
		$new_roles[] = $new_role;
	}
	return json_encode($new_roles);
}

function inquiry_deployer_update_groups($design_node) {
	$data = nquire_commons_decode_data($design_node->structure);
	foreach ($data as $phase) {
		$design_phase = node_load($phase['id']);
		inquiry_deployer_update_phase($design_node, $design_phase);
	}
}

function inquiry_deployer_update_activity(&$design_node, &$design_phase, &$design_activity) {
	$inquiry_node = node_load($design_node->inquiry);

	$activity_type = inquiry_available_features_invoke('activity', 'deployed_activity_type', $design_activity);
	if ($activity_type) {
		$stages = array();
		$design_stage_nids = nquire_commons_decode_data($design_node->stages, '[]');
		foreach ($design_stage_nids as $design_stage_nid) {
			$design_stage = node_load($design_stage_nid, NULL, TRUE);
			$stage_data = nquire_commons_decode_data($design_stage->data);
			if (!isset($stage_data[$design_phase->nid]) || $stage_data[$design_phase->nid] === 'view') {
				$stages[$design_stage->stage] = 'visible';
			}
		}

		$base_attrs = array(
				'inquiry_id' => $design_node->inquiry,
				'activity_phases_stages' => array(
						'phase_nid' => $design_phase->phase,
						'stages' => $stages,
				),
				'destination_after' => 'phase',
				'selects' => array(
						'audience' => 'individual',
						'gid' => $inquiry_node->actor_gid,
				),
				'node_function' => 'edit',
				'visible_status' => 'start',
		);

		$main_activity_attrs = array_merge($base_attrs, is_array($activity_type) ? $activity_type : array('activity_type' => $activity_type));


		$ref_activity_node = _inquiry_deployer_create_update_ref_node($design_activity, 'activity', 'pi_activity', $main_activity_attrs);
		$activity_content_def = inquiry_available_features_invoke('activity', 'deployed_activity_content', $design_activity);
		if ($activity_content_def) {
			_inquiry_deployer_create_update_activity_content($ref_activity_node, $activity_content_def);
		}

		$children = inquiry_available_features_invoke('activity', 'deployed_children_activities', $design_activity);
		if (is_array($children)) {
			foreach ($children as $key => $child) {
				_inquiry_deployer_create_update_child_activity($design_activity, $key, array_merge($base_attrs, $child['activity'], array(
						'parent_activity' => $ref_activity_node->nid,
								)), $child['node']);
			}
		}

		$additional_content = inquiry_available_features_invoke('activity', 'deployed_additional_content', $design_activity);
		if (is_array($additional_content)) {
			foreach ($additional_content as $key => $content) {
				_inquiry_deployer_create_update_additional_activity_content($design_activity, $key, $content);
			}
			_inquiry_deployer_delete_unwanted_additional_activity_content($design_activity, $additional_content);
		}

		$query = "UPDATE {pi_activity} SET phase_nid=%d WHERE parent_activity=%d AND phase_nid != %d";
		db_query($query, $design_phase->phase, $ref_activity_node->nid, $design_phase->phase);

		return $ref_activity_node;
	}

	return NULL;
}

function inquiry_deployer_update_stages($design_node) {
	$inquiry_nid = $design_node->inquiry;
	$inquiry_node = node_load($inquiry_nid);

	if ($inquiry_node) {
		$actor_gid = $inquiry_node->actor_gid;

		$valid_stages = array();

		$design_stage_nids = nquire_commons_decode_data($design_node->stages, '[]');
		foreach ($design_stage_nids as $design_stage_nid) {
			$design_stage = node_load($design_stage_nid, NULL, TRUE);
			$phases = array();
			foreach (nquire_commons_decode_data($design_stage->data) as $design_phase_nid => $status) {
				$design_phase = node_load($design_phase_nid);
				if ($design_phase->phase) {
					$phases[$design_phase->phase] = $status === 'edit';
				}
			}
			$stage_node = _inquiry_deployer_create_update_ref_node($design_stage, 'stage', 'pi_stage', array(
					'inquiry_nid' => $inquiry_nid,
					'stage_actor' => $actor_gid,
					'stage_phases' => array('phases' => $phases),
			));

			$valid_stages[] = $stage_node->nid;
		}
	}
}

function _inquiry_deployer_create_update_child_activity($design_activity, $child, $activity_attrs, $node_attrs = NULL) {
	$design_activity_children = nquire_commons_decode_data($design_activity->children_activities);

	$node = node_load($design_activity_children[$child]);

	$save = FALSE;
	$new = FALSE;

	if (!$node) {
		$node = new stdClass();
		$node->type = 'pi_activity';
		$node->uid = $design_activity->uid;

		if (is_array($activity_attrs)) {
			foreach ($activity_attrs as $key => $value) {
				$node->$key = $value;
			}
		}

		$save = TRUE;
		$new = TRUE;
	} else {
		if (is_array($activity_attrs)) {
			foreach ($activity_attrs as $key => $value) {

				if ($node->$key != $value) {
					$node->$key = $value;
					$save = TRUE;
					$node->revision = TRUE;
				}
			}
		}
	}

	if ($save) {
		node_save($node);
	}

	if ($new) {
		$design_activity_children[$child] = $node->nid;
		$design_activity->children_activities = json_encode($design_activity_children);
		$design_activity->revision = TRUE;
		node_save($design_activity);
	}

	return $node;
}

function _inquiry_deployer_create_update_additional_activity_content($design_activity, $content_key, $content_def) {
	$additional_content = nquire_commons_decode_data($design_activity->additional_content);

	$content_node = node_load($additional_content[$content_key]);
	$new = FALSE;
	$changed = FALSE;

	if ($content_node) {
		if ($content_node->type !== $content_def['type']) {
			node_delete($content_node->nid);
			$content_node = NULL;
		}
	}

	if (!$content_node) {
		$new = TRUE;
		$changed = TRUE;
		$content_node = new stdClass();
		$content_node->type = $content_def['type'];
		$content_node->uid = $design_activity->uid;
	}

	foreach ($content_def as $key => $value) {
		if ($content_node->$key != $value) {
			$changed = TRUE;
			$content_node->$key = $value;
		}
	}

	if ($changed) {
		$content_node->revision = !$new;
		node_save($content_node);
	}

	if ($new) {
		$additional_content[$content_key] = $content_node->nid;
		$design_activity->additional_content = json_encode($additional_content);
		$design_activity->revision = TRUE;
		node_save($design_activity);
	}
}

function _inquiry_deployer_delete_unwanted_additional_activity_content($design_activity, $additional_content) {
	$existing_additional_content = nquire_commons_decode_data($design_activity->additional_content);
	$changed = FALSE;

	foreach ($existing_additional_content as $key => $nid) {
		if (!isset($additional_content[$key])) {
			node_delete($nid);
			unset($existing_additional_content[$key]);
		}
	}

	if ($changed) {
		$design_activity->additional_content = json_encode($existing_additional_content);
		$design_activity->revision = TRUE;
		node_save($design_activity);
	}
}

function _inquiry_deployer_create_update_ref_node(&$design_node, $ref_attr, $node_type, $node_attrs) {
	$node = node_load($design_node->$ref_attr);

	$save = FALSE;
	$new = FALSE;

	if (!$node) {
		$node = new stdClass();
		$node->type = $node_type;
		$node->uid = $design_node->uid;
		$node->title = $design_node->title;
		$node->body = $node->teaser = $design_node->body;

		if (is_array($node_attrs)) {
			foreach ($node_attrs as $key => $value) {
				$node->$key = $value;
			}
		}

		$save = TRUE;
		$new = TRUE;
	} else {
		if ($design_node->title != $node->title || $design_node->body != $node->body) {
			$save = TRUE;
			$node->title = $design_node->title;
			$node->body = $node->teaser = $design_node->body;
			$node->revision = TRUE;
		}
		if (is_array($node_attrs)) {
			foreach ($node_attrs as $key => $value) {
				$equal = _inquiry_deployer_equal_values($value, $node->$key);
				if (!$equal) {
					$node->$key = $value;
					$save = TRUE;
					$node->revision = TRUE;
				}
			}
		}
	}

	if ($save) {
		node_save($node);
	}

	if ($new) {
		$design_node->$ref_attr = $node->nid;
		$design_node->revision = TRUE;
		node_save($design_node);
	}

	return $node;
}

function _inquiry_deployer_create_update_activity_content($ref_activity_node, $activity_content_def) {

	$content_node = node_load($ref_activity_node->referenced_node);
	$new = FALSE;
	$changed = FALSE;

	if ($content_node) {
		if ($content_node->type !== $activity_content_def['type']) {
			node_delete($content_node->nid);
			$content_node = NULL;
		}
	}

	if (!$content_node) {
		$new = TRUE;
		$changed = TRUE;
		$content_node = new stdClass();
		$content_node->type = $activity_content_def['type'];
		$content_node->uid = $ref_activity_node->uid;
	}

	foreach ($activity_content_def as $key => $value) {
		if ($content_node->$key != $value) {
			$changed = TRUE;
			$content_node->$key = $value;
		}
	}

	if ($changed) {
		$content_node->revision = !$new;
		node_save($content_node);
	}

	if ($new) {
		db_query('UPDATE pi_activity SET referenced_node=%d WHERE vid=%d', $content_node->nid, $ref_activity_node->vid);
	}
}

function _inquiry_deployer_equal_values($a, $b) {
	if (is_array($a) && is_array($b)) {
		if (count($a) != count($b)) {
			return FALSE;
		}

		foreach ($a as $k => $v) {
			if (!isset($b[$k]) || !_inquiry_deployer_equal_values($v, $b[$k])) {
				return FALSE;
			}
		}
		return TRUE;
	} else {
		return $a == $b;
	}
}
