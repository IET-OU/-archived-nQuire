<?php

// $Id: inquiry_design.module,v 0.1 2010/03/17 MCP $

/**
 * @file  This module provides the implementation of the Inquiry content type
 */

/**
 * hook_node_info()Define the inquiry_design node type
 */
function inquiry_design_node_info() {
  return array(
      'inquiry_design' => array(
          'name' => t('Inquiry Design'), // Required.
          'module' => 'inquiry_design', // Required.
          'description' => t('An nQuire Inquiry Design'), // Required.
          'has_title' => TRUE,
          'title_label' => t('Inquiry Name'),
          'has_body' => TRUE,
          'body_label' => t('Inquiry Description'),
      )
  );
}

/**
 * Define permissions available for inquiry_design module
 */
function inquiry_design_perm() {
  return array('create inquiry design', 'edit own inquiry design', 'edit any inquiry design', 'delete own inquiry design', 'delete any inquiry design');
}

/**
 * Work out if a user has permission to do something with an Inquiry
 */
function inquiry_design_access($op, $node, $account) {
  $is_author = $account->uid == $node->uid;
  switch ($op) {
    case 'create':
      // Allow if user's role has 'create inquiry' permission.
      return user_access('create inquiry design', $account);
    case 'update':
      // Allow if user's role has 'edit own inquiry' permission and user is
      // the author; or if the user's role has 'edit any inquiry' permission.
      return user_access('edit own inquiry design', $account) && is_author ||
              user_access('edit any inquiry design', $account);
    case 'delete':
      // Allow if user's role has 'delete own inquiry' permission and user is
      // the author; or if the user's role has 'delete any inquiry' permission.
      return user_access('delete own inquiry design', $account) && $is_author ||
              user_access('delete any inquiry design', $account);
  }
}

/**
 * The form for adding/editing an Inquiry Design
 */
function inquiry_design_form($node) {
  // Get metadata for the node type which is defined in inquiry_design_info()
  $type = node_get_types('type', $node);

  $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#description' => t('The title for the inquiry.'),
      '#required' => TRUE,
      '#default_value' => $node->title,
  );

  //Show a simple textarea, no input selector required....
  $form['body_filter']['body'] = array(
      '#type' => 'textarea',
      '#title' => check_plain($type->body_label),
      '#description' => t('An introduction to the inquiry, e.g. about the goals of the inquiry, the scientific field etc.'),
      '#default_value' => $node->body,
      '#required' => TRUE
  );

  return $form;
}

/**
 * INSERT command for a new inquiry
 */
function inquiry_design_insert($node) {
  db_query("INSERT INTO {inquiry_design} (nid, vid, inquiry, structure, stages, groups, roles) VALUES (%d, %d, %d, '%s', '%s', '%s', '%s')", $node->nid, $node->vid, $node->inquiry, $node->structure, $node->stages, $node->groups, $node->roles);
}

/**
 * UPDATE command for an existing inquiry
 */
function inquiry_design_update($node) {
  if ($node->revision) {
    inquiry_design_insert($node);
  } else {
    db_query("UPDATE {inquiry_design} SET inquiry='%d', structure='%s', stages='%s', groups='%s', roles='%s' WHERE vid='%d'", $node->inquiry, $node->structure, $node->stages, $node->groups, $node->roles, $node->vid);
  }
  return;
}

/**
 * Implementation of hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function inquiry_design_nodeapi(&$node, $op, $teaser, $page) {
  if ($node->type === 'inquiry_design') {
    switch ($op) {
      case 'delete revision':
        // Notice that we're matching a single revision based on the node's vid.
        db_query('DELETE FROM {inquiry_design} WHERE vid = %d', $node->vid);
        break;
    }
  }
  return;
}

/**
 * DELETE command for an inquiry
 * @todo this should delete all the associated data with the inquiry too!
 */
function inquiry_design_delete(&$node) {
  // Delete the related information we were saving for this node.
  db_query('DELETE FROM {inquiry_design} WHERE nid = %d', $node->nid);
}

/**
 * node loader function for inquiry type called when noad_load() is called
 */
function inquiry_design_load($node) {
  $design = db_fetch_object(db_query('SELECT * FROM {inquiry_design} WHERE vid = %d', $node->vid));

  return $design;
}

/**
 * Builds the view for the inquiry
 * @todo Add a detailed inquiry view to be used in the whole system
 */
function inquiry_design_view($node, $teaser = FALSE, $page = FALSE) {
  // If $teaser is FALSE, the entire node is being displayed.
  if (!$teaser) {
    //Use Drupal's default node view.
    $node = node_prepare($node, $teaser);

    // render the inquiry description using a theme function
    $node->content['layout'] = array(
        '#value' => theme('inquiry_layout', $node),
        '#weight' => 1,
    );
    // Add more involved inquiry layout here
  }

  // If $teaser is true, node is being displayed as a teaser,
  // in this case, just show the description and none of the rest of the inquiry stuff
  if ($teaser) {
    //Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }
  return $node;
}

function inquiry_design_set_item_title($node, $id, $title) {
  $structure = json_decode($node->structure);
  $found = FALSE;

  foreach ($structure as $phase) {
    if ($phase->id == $id) {
      $phase->title = $title;
      $found = TRUE;
      break;
    } else {
      foreach ($phase->activities as $activity) {
        if ($activity->id == $id) {
          $activity->title = $title;
          $found = TRUE;
          break 2;
        }
      }
    }
  }

  if ($found) {
    $node->structure = json_encode($structure);
  }

  return $found;
}

function inquiry_design_get_activities($node, $phase_nid) {
  $structure = nquire_commons_decode_data($node->structure);
  foreach ($structure as $phase_def) {
    if ($phase_def['id'] == $phase_nid) {
      return $phase_def['activities'];
    }
  }

  return FALSE;
}

function inquiry_design_remove_structure_item(&$design, $item_nid) {
  $structure = nquire_commons_decode_data($design->structure, '[]');
  $found = FALSE;

  if ($structure) {
    foreach ($structure as $i => $phase) {
      if ($phase['id'] == $item_nid) {
        array_splice($structure, $i, 1);
        $found = TRUE;
        break;
      }

      foreach ($phase['activities'] as $j => $activity) {
        if ($activity['id'] == $item_nid) {
          array_splice($structure[$i]['activities'], $j, 1);
          $found = TRUE;
          break 2;
        }
      }
    }
  }

  if ($found) {
    $design->structure = json_encode($structure);
    return TRUE;
  }

  return FALSE;
}

function inquiry_design_load_phase_for_activity($node, $activity_nid) {
  $structure = nquire_commons_decode_data($node->structure);
  foreach ($structure as $phase_def) {
    foreach ($phase_def['activities'] as $activity_def) {
      if ($activity_def['id'] == $activity_nid) {
        return node_load($phase_def['id']);
      }
    }
  }
  return FALSE;
}


function inquiry_design_path_to_inquiry_design($deployed_inquiry_id) {
  $query = "SELECT {inquiry_design}.nid FROM {inquiry_design} LEFT JOIN {node} ON {node}.vid={inquiry_design}.vid WHERE {inquiry_design}.inquiry=%d";
  $row = db_fetch_array(db_query($query, $deployed_inquiry_id));
  return $row ? "creator/{$row[nid]}" : FALSE;
}

function inquiry_design_get_phase_collaboration_mode($node, $design_phase_nid) {
	$groups = nquire_commons_decode_data($node->groups);
	$result = isset($groups[0]['values'][$design_phase_nid]) ? $groups[0]['values'][$design_phase_nid] : 'individual';
	return $result;
}
