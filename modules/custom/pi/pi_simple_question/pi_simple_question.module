<?php
// $Id$ maw

/**
 * @file
 * Simple question gets the question from the url and displays a text box to answer the question
 * we keep a record of the question as well as the answer in the db
 */

/**
 * Implementation of pi_simple_question_node_info().
 */
function pi_simple_question_node_info() {
  // We return an array since a module can define multiple node types.
  // We're only defining one node type, type 'pi_ask_expert'.
  return array(
    'pi_simple_question' => array(
      'name' => t('Question & Answer'), // Required.
      'module' => 'pi_simple_question',  // Required.
      'description' => t('Question & Answer.'), // Required.
      'has_title' => TRUE,
      'title_label' => t('Question & Answer'),
      'has_body' => TRUE,
      'body_label' => t('Question & Answer'),
      'locked' => '1',
    )
  );
}

/**
 * Implementation of pi_simple_question_perm().
 */
function pi_simple_question_perm() {
  return array('create pi_simple_question', 'edit own pi_simple_question');
}

/**
 * Implementation of pi_simple_question_access().
 */
function pi_simple_question_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return (user_access('create pi_simple_question'));
  }

  if ($op == 'update' || $op == 'delete') {
    return (user_access('edit own pi_simple_question'));
  }
}


/**
 * Implementation of pi_simple_question_form().
 */
function pi_simple_question_form(&$node) {

  drupal_set_title(t('Question & Answer'));
  
  global $user;
  
  $params = explode('&', arg(7));
  $question = $params[0];
  
  $prefix = "<p>Can you answer this question...</p>";
  $prefix .= "<p><strong>" . $question . "</strong></p>";
    
  $form['#prefix'] = $prefix;
  // Get metadata for this node type
  // (we use it for labeling title and body fields).
  // We defined this in pi_ask_expert_node_info().
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'hidden',
    '#title' => check_plain($type->title_label),
    '#required' => FALSE,
    '#default_value' => check_plain($type->title_label),
    '#weight' => -5
  );
  
  $form['qanda'] = array(
    '#type' => 'fieldset'
  );
  
  $form['qanda']['answer'] = array(
    '#type' => 'textarea',
    '#title' => t('My answer... '),
    '#required' => TRUE,
    '#default_value' => $node->answer,
    '#resizable' => FALSE,
    '#rows' => 2,
    '#cols' => 40,
    '#weight' => 2
  );
  
  $form['qanda']['question'] = array(
    '#type' => 'hidden',
    '#title' => 'question',
    '#required' => FALSE,
    '#default_value' => $question,
    '#weight' => -10
  );
  
  unset($form['delete']);

  return $form;
}

/**
 * Implementation of pi_simple_question_validate().
 */
function pi_simple_question_validate($node) {
  
}

/**
 * Implementation of pi_simple_question_insert().
 */
function pi_simple_question_insert($node) {
	global $user;
	$insert = "INSERT INTO pi_simple_question SET";
	$insert .= " nid = '" . $node->nid . "'";
	$insert .= ", vid = '" . $node->vid . "'";
	$insert .= ", question = '" . $node->question . "'";
	$insert .= ", answer = '" . $node->answer . "'";
	db_query($insert);
}

/**
 * Implementation of pi_simple_question_update().
 */
function pi_simple_question_update($node) {
  if ($node->revision) {
    pi_simple_question_insert($node);
  }
  else {
  	$update = "UPDATE pi_simple_question SET";
  	$update .= " question = '" . $node->question . "'";
  	$update .= ", answer = '" . $node->answer . "'";
  	$update .= " WHERE vid = '" . $node->vid . "'";
  	db_query($update);
  }
}

/**
 * Implementation of pi_simple_question_delete().
 */
function pi_simple_question_delete(&$node) {
	$delete = "DELETE FROM pi_simple_question WHERE nid = '" . $node->nid . "'";
  	db_query($delete);
}

/**
 * Implementation of pi_simple_question_load().
 */
function pi_simple_question_load($node) {
	$load = "SELECT * FROM pi_simple_question WHERE vid = '" . $node->vid . "'";
  	return db_fetch_object(db_query($load));
}

/**
 * Implementation of pi_simple_question_view().
 */
function pi_simple_question_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
    $node->content['pi_simple_question'] = array(
    	'#value' => theme_pi_simple_question($node),
    	'#weight' => 2
    );
  }

  if ($teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }
  return $node;
}

function pi_simple_question_theme() {
  return array(
    'pi_simple_question' => array(
      'arguments' => array('node'),
    ),
  );
}

function theme_pi_simple_question($node) {
	$output = "<strong>Question:</strong>";
  	$output .= '<div class="pi_simple_question">' . check_plain($node->question). '</div><br />';
  	$output = "<strong>Answer:</strong>";
  	$output .= '<div class="pi_simple_question">' . check_plain($node->answer). '</div><br />';
  	return $output;
}