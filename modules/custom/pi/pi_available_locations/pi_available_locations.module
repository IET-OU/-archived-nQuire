<?php
// $Id: pi_available_locations.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "available locations" node type
 */

/**
 * Implementation of pi_available_locations_node_info().
 */
function pi_available_locations_node_info() {
  return array(
	'pi_available_locations' => array(
      	 'name' => t('Available locations'), // Required.
	 'module' => 'pi_available_locations',  // Required.
	 'description' => t('Choose the locations where you would like to collect data'), // Required.
	 'has_title' => FALSE,
	 'title_label' => t('Area'),
	 'has_body' => TRUE,
	 'body_label' => t('Description'),
	 'min_word_count' => 2,
	 'locked' => TRUE
	)
   );
}

/**
 * Implementation of pi_available_locations_perm().
 */

function pi_available_locations_perm() {
  return array('create pi_available_locations content', 'edit own pi_available_locations');
}

/**
 * Implementation of pi_available_locations_access().
 */

function pi_available_locations_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return (user_access('create pi_available_locations'));
  }

  if ($op == 'update' || $op == 'delete') {
    return (user_access('edit own pi_available_locations') && ($user->uid == $node->uid));
  }
}

/**
 * Implementation of pi_available_locations_form().
 */

function pi_available_locations_form(&$node) {

  drupal_set_title(t('Enter location'));
  
  // Get metadata for this node type
  // (we use it for labeling title and body fields).
  // We defined this in pi_available_locations_node_info().
  $type = node_get_types('type', $node);

  $results = db_query("SELECT nid,title FROM node WHERE type = 'pi_available_areas' AND status = '1'");
  $options = array();
  
  while ($result = db_fetch_array($results)) {
    $options[$result['nid']] = $result['title'];
  }
  
  if (isset($node->image_id)) {
    $image = node_load($node->image_id);
    $current_text = '(current image = ' . $image->title . ')';
  }
  else {
    $current_text = '(no image currently selected)';
  };
  
  if (isset($node->map_image_id)) {
    $map = node_load($node->map_image_id);
    $current_map_text = '(current image = ' . $map->title . ')';
  }
  else {
    $current_map_text = '(no image currently selected)';
  };
  
  $form['#attributes']['enctype'] = 'multipart/form-data';

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5
  );
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#required' => TRUE,
    '#default_value' => $node->body,
    '#resizable' => FALSE,
    '#rows' => 5,
    '#weight' => -1
  );
  $form['area'] = array(
    '#type' => 'select',
    '#title' => t('Available areas'),
    '#required' => TRUE,
    '#default_value' => explode(",", $node->area),
    '#options' => $options,
    '#weight' => 0
  );
  $form['body_filter']['position'] = array(
    '#type' => 'textfield',
    '#title' => t('Position'),
    '#required' => FALSE,
    '#default_value' => $node->position,
    '#weight' => 1
  );
  $form['latitude'] = array(
    '#type' => 'textfield',
    '#title' => t('Latitude'),
    '#required' => FALSE,
    '#default_value' => $node->latitude,
    '#weight' => 2
  );
  $form['longitude'] = array(
    '#type' => 'textfield',
    '#title' => t('Longitude'),
    '#required' => FALSE,
    '#default_value' => $node->longitude,
    '#weight' => 3
  );
  $form['image_filename'] = array(
    '#type' => 'file',
    '#title' => t('Picture'),
    '#size' => 48,
    '#description' => t('Select an image to illustrate the location ' . $current_text . '.'),
    '#weight' => 5
  );
  $form['map_image_filename'] = array(
    '#type' => 'file',
    '#title' => t('Map image'),
    '#size' => 48,
    '#description' => t('Select an image of a map to help identify the location ' . $current_map_text . '.'),
    '#weight' => 7
  );
    
  return $form;
}

/**
 * Implementation of pi_available_locations_validate().
 */
function pi_available_locations_validate($node) {

}

/**
 * Implementation of pi_available_locations_insert().
 */

function pi_available_locations_insert($node) {

    $validators = array(
        'file_validate_is_image' => array(),
    );

  if($tdpic = file_save_upload('image_filename', $validators)) {
    $pic = $tdpic->filename; //this way you have the value of your posted file-field as you see in this line
    file_copy($tdpic,'images/'.$tdpic->filename);
    $image_node = image_create_node_from($tdpic->filepath); 
    $pic_nid = $image_node->nid;
 
    if($tdpic2 = file_save_upload('map_image_filename', $validators)) {
      $map = $tdpic2->filename; //this way you have the value of your posted file-field as you see in this line
     file_copy($tdpic2,'images/'.$tdpic2->filename);
      $map_image_node = image_create_node_from($tdpic2->filepath); 
      $map_nid = $map_image_node->nid;
      db_query("INSERT INTO {pi_available_locations} (nid, vid, area, position, latitude, longitude, image_id, map_image_id) VALUES (%d, %d, '%s', '%s', '%s', '%s', %d, %d)",
        $node->nid, $node->vid, $node->area, $node->position, $node->latitude|0, $node->longitude|0, $pic_nid, $map_nid);
    }
    else {
      db_query("INSERT INTO {pi_available_locations} (nid, vid, area, position, latitude, longitude, image_id) VALUES (%d, %d, '%s', '%s', '%s', '%s', '%d')",
        $node->nid, $node->vid, $node->area, $node->position, $node->latitude|0, $node->longitude|0, $pic_nid);
    };
  }
  else { 
    if($tdpic2 = file_save_upload('map_image_filename')) {
      $map = $tdpic2->filename; //this way you have the value of your posted file-field as you see in this line
      file_copy($tdpic2,'images/'.$tdpic2->filename);
      $map_image_node = image_create_node_from($tdpic2->filepath); 
      $map_nid = $map_image_node->nid;
      db_query("INSERT INTO {pi_available_locations} (nid, vid, area, position, latitude, longitude, map_image_id) VALUES (%d, %d, '%s', '%s', '%s', '%s', %d)",
        $node->nid, $node->vid, $node->area, $node->position, $node->latitude|0, $node->longitude|0, $map_nid);
    }
    else {
      db_query("INSERT INTO {pi_available_locations} (nid, vid, area, position, latitude, longitude) VALUES (%d, %d, '%s', '%s', '%s', '%s')",
        $node->nid, $node->vid, $node->area, $node->position, $node->latitude|0, $node->longitude|0);
    };
  };
}

/**
 * Implementation of available_locations_update().
 */
function pi_available_locations_update($node) {
  if ($node->revision) {
    pi_available_locations_insert($node);
  }
  else {
    if($tdpic = file_save_upload('image_filename')) {
      $pic = $tdpic->filename; //this way you have the value of your posted file-field as you see in this line
      file_copy($tdpic,'images/'.$tdpic->filename);
      $image_node = image_create_node_from($tdpic->filepath); 
      $pic_nid = $image_node->nid;
      
      if($tdpic2 = file_save_upload('map_image_filename')) {
        $map = $tdpic2->filename; //this way you have the value of your posted file-field as you see in this line
        file_copy($tdpic2,'images/'.$tdpic2->filename);
        $map_image_node = image_create_node_from($tdpic2->filepath); 
        $map_nid = $map_image_node->nid;
        db_query("UPDATE {pi_available_locations} SET area = '%s', position = '%s', latitude = '%s', longitude = '%s', image_id = %d, map_image_id = %d  WHERE vid = %d",
          $node->area, $node->position, $node->latitude|0, $node->longitude|0, $pic_nid, $map_nid, $node->vid);
      }
      else {
        db_query("UPDATE {pi_available_locations} SET area = '%s', position = '%s', latitude = '%s', longitude = '%s', image_id = %d  WHERE vid = %d",
          $node->area, $node->position, $node->latitude|0, $node->longitude|0, $pic_nid, $node->vid);
      };
    }
    else {
    
      if($tdpic2 = file_save_upload('map_image_filename')) {
        $map = $tdpic2->filename; //this way you have the value of your posted file-field as you see in this line
        file_copy($tdpic2,'images/'.$tdpic2->filename);
        $map_image_node = image_create_node_from($tdpic2->filepath); 
        $map_nid = $map_image_node->nid;
        db_query("UPDATE {pi_available_locations} SET area = '%s', position = '%s', latitude = '%s', longitude = '%s', map_image_id = %d  WHERE vid = %d",
          $node->area, $node->position, $node->latitude|0, $node->longitude|0, map_nid, $node->vid);
        }
      else {
        db_query("UPDATE {pi_available_locations} SET area = '%s', position = '%s', latitude = '%s', longitude = '%s'  WHERE vid = %d",
          $node->area, $node->position, $node->latitude|0, $node->longitude|0, $node->vid);
      };
    };
  };
}

/**
 * Implementation of available_locations_delete().
 */
function pi_available_locations_delete(&$node) {
  // Delete the related information we were saving for this node.
  db_query('DELETE FROM {pi_available_locations} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of available_locations_load().
 */
function pi_available_locations_load($node) {
  // drupal_add_js('misc/collapse.js');
  return db_fetch_object(db_query('SELECT area, position, latitude, longitude, image_id, map_image_id FROM {pi_available_locations} WHERE vid = %d',
    $node->vid));
}

/**
 * Implementation of pi_available_locations_view().
 */
function pi_available_locations_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);

    $node->content['pi_available_locations'] = array(
      '#value' => theme('pi_available_locations', $node),
      '#weight' => -2
      );
  }

  if ($teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }

  return $node;
}

function pi_available_locations_theme() {
  return array(
    'pi_available_locations' => array(
      'arguments' => array('node'),
    ),
  );
}


function theme_pi_available_locations($node) {
  
  $output = "";
  
  if ($node->image_id) {
    $page_nid = arg(1);
    if (is_numeric($page_nid)) {
      $page = node_load($page_nid);
      if ($page->type == 'pi_available_locations') {
        $output .= '<img style="float: right; clear: right; padding: 10px 0 10px 10px;" src="' . url("image/view/" . $node->image_id . "/preview") . '" />';
      }
      else {
        $output .= '<img style="float: right; clear: right; padding: 10px 0 10px 10px;" src="' . url("image/view/" . $node->image_id . "/thumbnail") . '" />';
      };
    }
    else {
      $output .= '<img style="float: right; clear: right; padding: 10px 0 10px 10px;" src="' . url("image/view/" . $node->image_id . "/thumbnail") . '" />';
    };
  };
  
  if ($node->map_image_id) {
    $page_nid = arg(1);
    if (is_numeric($page_nid)) {
      $page = node_load($page_nid);
      if ($page->type == 'pi_available_locations') {
        $output .= '<img style="float: right; clear: right; padding: 10px 0 10px 10px;" src="' . url("image/view/" . $node->map_image_id . "/preview") . '" />';
      }
      else {
        $output .= '<img style="float: right; clear: right; padding: 10px 0 10px 10px;" src="' . url("image/view/" . $node->map_image_id . "/thumbnail") . '" />';
      };
    }
    else {
      $output .= '<img style="float: right; clear: right; padding: 10px 0 10px 10px;" src="' . url("image/view/" . $node->map_image_id . "/thumbnail") . '" />';
    };
  };
  
  $output .= '<p>';
  if (isset($node->area) AND ($node->area != "")) {
    $area_node = node_load($node->area);
    $output .= t('<strong>Area:&nbsp;</strong>' . $area_node->title);
    $output .= '<br />';
  };
  
// TDC - Removed position for now as fractional positions could be misleading
// for students but they're also necessary for admin when editing ordering of locations

//  if (isset($node->position)) {
//    $output .= t('<strong>Position:&nbsp;</strong>' . $node->position);
//    $output .= '<br />';
//  };

  if (isset($node->latitude) AND ($node->latitudeks != 0)) {
    $output .= t('<strong>Latitude:&nbsp;</strong>' . $node->latitude);
    $output .= t(' &nbsp;&nbsp; ');
  };
  if (isset($node->longitude) AND ($node->longitude != 0)) {
    $output .= t('<strong>Longitude:&nbsp;</strong>' . $node->longitude);
    $output .= '<br />';
  };
  $output .= '</p>';
    
  return $output;
}
