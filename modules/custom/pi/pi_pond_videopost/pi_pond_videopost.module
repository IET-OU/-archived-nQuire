<?php
// $Id: pi_pond_postvideo.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "post video" node type
 */


/**
 * Implementation of hook_node_info().
 */

function pi_pond_videopost_node_info() {
  return array(
	'pi_pond_videopost' => array(
      	 'name' => t('Pond Inquiry video posting'), // Required.
	 'module' => 'pi_pond_videopost',  // Required.
	 'description' => t('Please post your video and describe it'), // Required.
	 'has_title' => TRUE,
	 'title_label' => t('Hadden Park Pond Life video posting'),
	 'has_body' => TRUE,
	 'body_label' => t('Video posting'),
	 'min_word_count' => 2,
	 'locked' => TRUE
	)
   );
}


/**
 * Implementation of hook_perm().
 */

function pi_pond_videopost_perm() {
  return array('create pi_pond_videopost content', 'edit pi_pond_videopost');
}

/**
 * Implementation of hook_access().
 */
function pi_pond_videopost_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return TRUE;
  }

  if ($op == 'update' || $op == 'delete') {
    return TRUE;
  }
}

/**
 * Implementation of hook_form().
 */

function pi_pond_videopost_form(&$node) {

  // Get metadata for this node type
  // (we use it for labeling title and body fields).
  // We defined this in pi_pond_videopost_node_info().
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'hidden',
    '#title' => check_plain($type->title_label),
    '#required' => FALSE,
    '#default_value' => check_plain($type->title_label),
    '#weight' => -5
  );

  $form['textarea_fieldset'] = array(
    '#type' => 'fieldset'
  );
  
  $form['textarea_fieldset']['video_desc'] = array(
    '#type' => 'textarea',
    '#title' => t('My video shows'),
    '#required' => TRUE,
    '#default_value' => $node->video_desc,
    '#resizable' => FALSE,
    '#rows' => 2,
    '#cols' => 40,
    '#weight' => 2
  );
  

  
  $prefix .= "<p>Please upload your video using the Attach File tool at the bottom of the page.</p>";
  $prefix .= "<p>First of all, describe what your video shows.</p>";
 
  $form['#prefix'] = $prefix;
  
  return $form;

}

/**
 * Implementation of hook_insert().
 */

 
function pi_pond_videopost_insert($node) {
  db_query("INSERT INTO {pi_pond_videopost} (nid, vid, video_desc) VALUES (%d, %d,'%s')",
    $node->nid, $node->vid, $node->video_desc);
}

/**
 * Implementation of hook_update().
 */

function pi_pond_videopost_update($node) {
  if ($node->revision) {
    pi_pond_videopost_insert($node);
  }
  
  else {
    db_query("UPDATE {pi_pond_videopost} SET video_desc = '%s' WHERE vid = %d", $node->video_desc,  $node->vid);
  }
}

/**
 * Implementation of hook_delete().
 */

function pi_pond_videopost_delete(&$node) {
  // Delete the related information we were saving for this node.
  db_query('DELETE FROM {pi_pond_videopost} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */

function pi_pond_videopost_load($node) {
  return db_fetch_object(db_query('SELECT * FROM {pi_pond_videopost} WHERE vid = %d',
    $node->vid));
}

/**
 * Implementation of hook_view().
 */
function pi_pond_videopost_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);

    $node->content['pi_pond_videopost'] = array(
    '#value' => theme('pi_pond_videopost', $node),
    '#weight' => 2
    );
      
  }

  if ($teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }

  return $node;
}

function pi_pond_videopost_theme() {
  return array(
    'pi_pond_videopost' => array(
      'arguments' => array('node'),
    ),
  );
}


function theme_pi_pond_videopost($node) {
  $output = '<div class="pi_pond_videopost">Your video posting description was: ' . check_plain($node->video_desc). '</div><br />';
  
  return $output;
}

