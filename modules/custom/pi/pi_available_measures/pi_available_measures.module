<?php
// $Id: pi_available_measures.module,v 1.1 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "available measurements" node type
 */

/**
 * Implementation of pi_available_measures_node_info().
 */
function pi_available_measures_node_info() {
 return array(
    'pi_available_measures' => array(
      'name' => t('Available measures'), // Required.
      'module' => 'pi_available_measures',  // Required.
      'description' => t('What are you going to measure?'), // Required.
      'has_title' => TRUE,
      'title_label' => t('Name'),
      'has_body' => TRUE,
      'body_label' => t('Description'),
      'min_word_count' => 2,
      'locked' => TRUE
    )
  );
}

/**
 * Implementation of pi_available_measures_perm().
 */

function pi_available_measures_perm() {
}

/**
 * Implementation of pi_available_measures_access().
 */

function pi_available_measures_access($op, $node) {
  global $user;
  $details = get_inquiry_details_from_current_path();
  if ($op == 'create') {
    return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
  }
  if ($op == 'update' || $op == 'delete') {
    return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
  }
}

/**
 * Implementation of pi_available_measures_form().
 */
function pi_available_measures_form(&$node) {

	$details = get_inquiry_details_from_current_path();
	
	//if activity_id then set title to activity title otherise Add measure
	if ($details->activity_id) {
		$loaded_activity = load_activity($details->activity_id);
		drupal_set_title(t($loaded_activity->name));
		$prefix = "<p>" . $loaded_activity->description . "</p>";
	}
	else {
		drupal_set_title(t('Enter measurement'));
		$prefix = "<p>Details of an available measure</p>";
	}
  
  $form['#attributes']['enctype'] = 'multipart/form-data';
  
  //title
	$type = node_get_types('type', $node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => 0
  );
  
  //body text
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#required' => TRUE,
    '#default_value' => $node->body,
    '#resizable' => FALSE,
    '#rows' => 5,
    '#weight' => 0.1
  );
  
  //find filter properties for this inquiry
  
  if ($details->inquiry_id) {
  	$result = db_fetch_object(db_query("SELECT nid FROM pi_measure_filter WHERE inquiry_id = '" . $details->inquiry_id . "' "));
  	if ($result->nid) {
  		$filter_node = node_load($result->nid);
  	}
  }
  
  $form['#prefix'] = $prefix;
  
  //symbol
  if ($node->symbol) {
  	$default = $node->symbol;
  }
  else {
  	$default = $filter_node->symbol_value;
  }
  if ($filter_node->symbol_test) {
  	$form['symbol'] = array(
   	 '#type' => 'textfield',
   	 '#title' => t('Symbol / short-name'),
   	 '#required' => FALSE,
     '#default_value' => $default,
   	 '#weight' => 0.2
  	);
  }
  else {
  	$form['symbol'] = array(
   	 '#type' => 'hidden',
     '#value' => $filter_node->symbol_value
  	);
  }
  
  //units
  if ($node->symbol) {
  	$default = $node->units;
  }
  else {
  	$default = $filter_node->units_value;
  }
  if ($filter_node->units_test) {
  $form['units'] = array(
    '#type' => 'textfield',
    '#title' => t('Units'),
    '#required' => FALSE,
    '#default_value' => $default,
    '#weight' => 0.3
  );
  }
  else {
  	$form['units'] = array(
   	 '#type' => 'hidden',
     '#value' => $filter_node->units_value
  	);
  }
  
  //units short
  if ($node->units_short) {
  	$default = $node->units_short;
  }
  else {
  	$default = $filter_node->units_short_value;
  }
  if ($filter_node->units_short_test) {
  $form['units_short'] = array(
    '#type' => 'textfield',
    '#title' => t('Units symbol / short name'),
    '#required' => FALSE,
    '#default_value' => $default,
    '#weight' => 0.4
  );
  }
  else {
  	$form['units_short'] = array(
   	 '#type' => 'hidden',
     '#value' => $filter_node->units_short
  	);
  }

	//field type
  if ($node->field_type) {
  	$default = $node->field_type;
  }
  else {
  	$default = $filter_node->field_type_value;
  }
  if ($filter_node->field_type_test) {
    $form['field_type'] = array(
    '#type' => 'select',
    '#title' => t('Select field type'),
    '#required' => TRUE,
    '#multiple' => FALSE,
    '#default_value' => $default,
    '#options' => array('textfield' => 'Single text line','textarea' => 'Multi-line text area','select' => 'Single select pull-down menu', 'radios' => 'Single select radio buttons', 'checkboxes' => 'Multi-select checkboxes'),
    '#description' => t('Select the type of form field you require. This will be used in the data collection interface.'),
    '#weight' => 0.5
  );
  }
  else {
  	$form['units_short'] = array(
   	 '#type' => 'hidden',
     '#value' => $filter_node->field_type_value
  	);
  }
  
  //data type
  if ($node->data_type) {
  	$default = $node->data_type;
  }
  else {
  	$default = $filter_node->data_type_value;
  }
  if ($filter_node->data_type_test) {
  $form['data_type'] = array(
    '#type' => 'select',
    '#title' => t('Select data type'),
    '#required' => TRUE,
    '#multiple' => FALSE,
    '#default_value' => $default,
    '#options' => array('numeric' => 'Numeric','text' => 'Text','menu' => 'Menu'),
    '#description' => t('Select the type of data that should be entered. This will be used to validate the submitted form.'),
    '#weight' => 0.6
  );
  }
  else {
  	$form['data_type'] = array(
   	 '#type' => 'hidden',
     '#value' => $filter_node->data_type_value
  	);
  }
  
  //menu options
  if ($node->list_options) {
  	$default = $node->list_options;
  }
  else {
  	$default = $filter_node->list_options_value;
  }
  
  //list_options
  if ($filter_node->list_options_test) {
  $form['list_options'] = array(
    '#type' => 'textarea',
    '#title' => t('Menu options [for menus only]'),
    '#required' => FALSE,
    '#default_value' => $default,
    '#description' => t('Enter the set of menu options (putting each option on a new line).'),
    '#resizable' => FALSE,
    '#rows' => 5,
    '#weight' => 0.7
  );
  }
  else {
  	$form['list_options'] = array(
   	 '#type' => 'hidden',
     '#value' => $filter_node->options_value
  	);
  }
  
  //options content type
  if ($node->content_options) {
  	$default = $node->content_options;
  }
  else {
  	$default = $filter_node->content_options_value;
  }
  $query = "SELECT node_type.type, node_type.name FROM node_type, pi_available_content_types WHERE node_type.type = pi_available_content_types.type";
  $results = db_query($query);
  $node_types = array();
  $node_types[0] = "";
  while($result = db_fetch_object($results)) {
  	$node_types[$result->type] = $result->name;
  }
  
  if ($filter_node->content_options_test) {
  $form['content_options'] = array(
    '#type' => 'select',
    '#title' => t('Menu options from content type [for menus only]'),
    '#required' => FALSE,
    '#description' => t('Alternatively, enter the content type from which the menu options will be taken.'),
    '#default_value' => $default,
		'#options' => $node_types,
    '#weight' => 0.8
  );
  }
  else {
  	$form['content_options'] = array(
   	 '#type' => 'hidden',
     '#value' => $filter_node->content_options_value
  	);
  }
  
  
  //measurement device name
  if ($node->measurement_device_name) {
  	$default = $node->measurement_device_name;
  }
  else {
  	$default = $filter_node->measurement_device_name_value;
  }
  if ($filter_node->measurement_device_name_test) {
  $form['measurement_device_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Device name'),
    '#required' => FALSE,
    '#default_value' => $default,
    '#weight' => 0.9
  );
  }
  else {
  	$form['measurement_device_name'] = array(
   	 '#type' => 'hidden',
     '#value' => $filter_node->measurement_device_name_value
  	);
  }
  
  //measurement device description
  if ($node->measurement_device_description) {
  	$default = $node->measurement_device_description;
  }
  else {
  	$default = $filter_node->measurement_device_description_value;
  }
  if ($filter_node->measurement_device_description_test) {
  $form['measurement_device_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Device description'),
    '#required' => FALSE,
    '#default_value' => $default,
    '#weight' => 1
  );
  }
  else {
  	$form['measurement_device_description'] = array(
   	 '#type' => 'hidden',
     '#value' => $filter_node->measurement_device_description_value
  	);
  }
 
  
  if ($node->image_filename) {
  	$default = $node->image_filename;
  	$image = node_load($node->image_filename);
  	$current_text = '(current image = ' . $image->title . ')';
  }
  elseif ($default = $filter_node->image_filename_value) {
  	$default = $filter_node->image_filename_value;
  	$image = node_load($filter_node->image_filename_value);
  	$current_text = '(current image = ' . $image->title . ')';
  }
  else {
  	$current_text = '(no image currently selected)';
  }
  if ($filter_node->image_filename_test) {
  $form['image_filename'] = array(
    '#type' => 'file',
    '#title' => t('Picture'),
    '#size' => 48,
    '#description' => t('Select an image to illustrate the measurement or measurement device ' . $current_text . '.'),
    '#default_value' => $default,
    '#weight' => 7
  );
  }
  else {
  	$form['image_filename'] = array(
   	 '#type' => 'hidden',
     '#value' => $filter_node->image_filename_value
  	);
  }
    
  return $form;
}

/**
 * Implementation of pi_available_measures_validate().
 */
function pi_available_measures_validate($node) {

}

/**
 * Implementation of pi_available_measures_insert().
 */

function pi_available_measures_insert($node) {

    $validators = array(
        'file_validate_is_image' => array(),
    );

  if($tdpic = file_save_upload('image_filename', $validators)) {
    $pic = $tdpic->filename; //this way you have the value of your posted file-field as you see in this line
    file_copy($tdpic,'images/'.$tdpic->filename);
    $image_node = image_create_node_from($tdpic->filepath); 
    $pic_nid = $image_node->nid;
    db_query("INSERT INTO {pi_available_measures} (nid, vid, symbol, units, units_short, field_type, data_type, list_options, content_options, measurement_device_name, measurement_device_description, image_id) VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s','%s', %d)",
      $node->nid, $node->vid, $node->symbol, $node->units, $node->units_short, $node->field_type, $node->data_type, $node->list_options, $node->content_options, $node->measurement_device_name, $node->measurement_device_description, $pic_nid);
  }

  else {
    db_query("INSERT INTO {pi_available_measures} (nid, vid, symbol, units, units_short, field_type, data_type, list_options, content_options, measurement_device_name, measurement_device_description) VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')",
      $node->nid, $node->vid, $node->symbol, $node->units, $node->units_short, $node->field_type, $node->data_type, $node->list_options, $node->content_options, $node->measurement_device_name, $node->measurement_device_description);
  };
}

/**
 * Implementation of pi_available_measures_update().
 */
function pi_available_measures_update($node) {
  if ($node->revision) {
    pi_available_measures_insert($node);
  }
  else {
    if($tdpic = file_save_upload('image_filename')) {
      $pic = $tdpic->filename; //this way you have the value of your posted file-field as you see in this line
      file_copy($tdpic,'images/'.$tdpic->filename);
      $image_node = image_create_node_from($tdpic->filepath); 
      $pic_nid = $image_node->nid;
      db_query("UPDATE {pi_available_measures} SET symbol = '%s', units = '%s', units_short = '%s', field_type = '%s', data_type = '%s', list_options = '%s', content_options = '%s', measurement_device_name = '%s', measurement_device_description = '%s', image_id = '%d' 
        WHERE vid = %d", $node->symbol, $node->units, $node->units_short, $node->field_type, $node->data_type, $node->list_options, $node->content_options, $node->measurement_device_name, $node->measurement_device_description, $pic_nid, $node->vid);
    }
    else {
      db_query("UPDATE {pi_available_measures} SET symbol = '%s', units = '%s', units_short = '%s', field_type = '%s', data_type = '%s', list_options = '%s', content_options = '%s', measurement_device_name = '%s', measurement_device_description = '%s' WHERE vid = %d",
        $node->symbol, $node->units, $node->units_short, $node->field_type, $node->data_type, $node->list_options, $node->content_options, $node->measurement_device_name, $node->measurement_device_description, $node->vid);
    };
  }
}

/**
 * Implementation of pi_available_measures_delete().
 */
function pi_available_measures_delete(&$node) {
  // Delete the related information we were saving for this node.
  db_query('DELETE FROM {pi_available_measures} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of pi_available_measures_load().
 */
function pi_available_measures_load($node) {
  // drupal_add_js('misc/collapse.js');
  return db_fetch_object(db_query('SELECT * FROM {pi_available_measures} WHERE vid = %d',
    $node->vid));
}

/**
 * Implementation of hook_view().
 */
function pi_available_measures_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);

    $node->content['pi_available_measures'] = array(
      '#value' => theme('pi_available_measures', $node),
      '#weight' => 2
      );
  }

  if ($teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }

  return $node;
}

function pi_available_measures_theme() {
  return array(
    'pi_available_measures' => array(
      'arguments' => array('node'),
    ),
  );
}


function theme_pi_available_measures($node) {
  
  if ($node->image_id) {
    $page_nid = arg(1);
    if (is_numeric($page_nid)) {
      $page = node_load($page_nid);
      if ($page->type == 'pi_available_measures') {
        $output = '<img style="float: right; clear: right; padding: 10px 0 10px 10px;" src="' . url("image/view/" . $node->image_id . "/preview") . '" />';
      }
      else {
        $output = '<img style="float: right; clear: right; padding: 10px 0 10px 10px;" src="' . url("image/view/" . $node->image_id . "/thumbnail") . '" />';
      };
    }
    else {
      $output = '<img style="float: right; clear: right; padding: 10px 0 10px 10px;" src="' . url("image/view/" . $node->image_id . "/thumbnail") . '" />';
    };
  };
  
  $types = array(t('Type a number'), t('Type text'), t('Select menu option'));
  
  $output .= '<p>';
  if (isset($node->symbol) AND ($node->symbol != '')) {
    $output .= t('<strong>Symbol / short name: </strong>' . $node->symbol);
    $output .= '<br />';
  };
  if (isset($node->units) AND ($node->units != '')) {
    $output .= t('<strong>Units: </strong>' . $node->units);
    $output .= '<br />';
  };
  if (isset($node->units_short) AND ($node->units_short != '')) {
    $output .= t('<strong>Units symbol / short name: </strong>' . $node->units_short);
  };
  $output .= '</p>';
  $output .= '<p>';
  if (isset($node->field_type)) {
    $output .= t('<strong>Field type: </strong>' . $node->field_type);
    $output .= '<br />';
  };
  $output .= '<p>';
  if (isset($node->data_type)) {
    $output .= t('<strong>Data type: </strong>' . $node->data_type);
    $output .= '<br />';
  };
  $output .= '</p>';
  if (($node->field_type == 'checkboxes' || $node->field_type == 'select' ) AND ((isset($node->list_options)) AND ($node->list_options != ''))) {
  	$output .= '<p>';
    $output .= t('<strong>Menu options: </strong>' . str_replace(array("\r\n", "\n", "\r"), '; ', $node->list_options) . '.');
    $output .= '</p>';
  };
  if (($node->field_type == 'checkboxes' || $node->field_type == 'select' ) AND ((isset($node->content_options)) AND ($node->content_options != '0'))) {
  	$output .= '<p>';
    $output .= t('<strong>Menu content: </strong>' . str_replace(array("\r\n", "\n", "\r"), '; ', $node->content_options) . '.');
    $output .= '</p>';
  };

  $output .= '<p>';
  if (isset($node->measurement_device_name) AND ($node->measurement_device_name != '')) {
    $output .= t('<strong>Device name: </strong>' . $node->measurement_device_name);
    $output .= '<br />';
  };
  if (isset($node->measurement_device_description) AND ($node->measurement_device_description != '')) {
    $output .= t('<strong>Instructions: </strong>' . $node->measurement_device_description);
  };
  $output .= '</p>';
  
  return $output;
}

















