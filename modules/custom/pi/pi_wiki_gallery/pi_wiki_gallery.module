<?php
// $Id: pi_wiki_gallery.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "[pi_wiki_gallery" node type
 */


/**
 * Implementation of hook_node_info().
 */

function pi_wiki_gallery_node_info() {

    return array(
    'pi_wiki_gallery' => array(
    'name' => t('Inquiry Wiki Gallery'), // Required.
    'module' => 'pi_wiki_gallery',  // Required.
    'description' => t('A shared image gallery'), // Required.
    'has_title' => TRUE,
    'title_label' => t('Title'),
    'has_body' => FALSE,
    'body_label' => t('Description'),
    'locked' => TRUE)
    );

}


//hide node revisions box - this is a node type often set to keep revisions
//if form alter not included then user sees the log message box
function pi_wiki_gallery_form_alter(&$form, $form_state, $form_id) {
    global $user; // Bring $user object into scope if displaying shall depend on userid or role
    #if ( $user->uid != 1 ) // 0 -> Anonymous, 1 -> SuperAdmin, 2+ -> Authenticated users
    if ( !in_array('USER ROLE NAME', $user->roles) ) // Check for role (using role name)
    {
    // add class 'hideme' to elements which shall be hidden
        $form['revision_information']['#attributes'] = array('class' => 'hideme'); // Revision information
    // This class has been added to the CSS file:
    //  .hideme { display: none; }
    }
}

/**
 * Implementation of hook_perm().
 */

function pi_wiki_gallery_perm() {
    return array('create pi_wiki_gallery content', 'edit pi_wiki_gallery');
}

/**
 * Implementation of hook_access().
 */
function pi_wiki_gallery_access($op, $node) {
    global $user;
    $details = get_inquiry_details_from_current_path();

    if ($op == 'create') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
    //return (user_access('create pi_wiki_gallery'));
    }

    if ($op == 'update' || $op == 'delete') {
        return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    //return (user_access('edit own pi_wiki_gallery'));
    }
}

/**
 * Implementation of hook_form().
 */

function pi_wiki_gallery_form(&$node) {

// Get metadata for this node type
// (we use it for labeling title and body fields).
// We defined this in pi_wiki_gallery_node_info().
    $type = node_get_types('type', $node);
    
    global $user;
    $node_details = get_inquiry_details_from_current_path();

    if (is_numeric($node_details->activity_id)) {
        $current_activity = load_activity($node_details->activity_id);
    }

    if ($current_activity->name) {
        drupal_set_title(t($current_activity->name));
    }

    $form['title'] = array(
        '#type' => 'textfield',
        '#title' => check_plain($type->title_label),
        '#required' => FALSE,
        '#default_value' => check_plain($node->title),
        '#weight' => -5
    );

/*
    $form['body_filter']['body'] = array(
        '#type' => 'textarea',
        '#title' => t('Comments'),
        '#required' => FALSE,
        '#default_value' => check_plain($node->body),
        '#description' => t('optional - image gallery comments'),
        '#resizable' => FALSE,
        '#rows' => 5,
        '#cols' => 40,
        '#weight' => 2
    );
*/

    $prefix = "";

    /*
    if ($current_activity->description) {
    	$prefix .= "<p>" . t($current_activity->description) . "</p>";
    }
    else {
    	$prefix .= "<p>Shared image gallery.</p>";
    }
    */

    if(arg(2) == 'edit') {
        $link = build_link('node', $node->nid, 'view', $node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id);

        switch ($current_activity->destination) {
            case "self":
                $destination = "";
                break;
            case "phase":
                $destination = t("destination=" . build_link("phase", $node_details->phase_id, "view", $node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id,$node_details->activity_id));
                break;
            default:
                $destination = t("destination=" . build_home_link($node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id));
                break;
        }

        $prefix .= '<div style=\'display: block; clear: both; float: right;\'>';
        $prefix .= l(t('View'), $link,  array('html' => true, 'query' => $destination));
        $prefix .= '</div>';
    }

    $form['#prefix'] = $prefix;

    return $form;

}

/**
 * Implementation of hook_view().
 */
function pi_wiki_gallery_view($node, $teaser = FALSE, $page = FALSE) {
    if (!$teaser) {
    // Use Drupal's default node view.
        $node = node_prepare($node, $teaser);

        $node->content['pi_wiki_gallery'] = array(
            '#value' => theme('pi_wiki_gallery', $node),
            '#weight' => 2
        );

    }

    if ($teaser) {
    // Use Drupal's default node view.
        $node = node_prepare($node, $teaser);
    }

    return $node;
}

function pi_wiki_gallery_theme() {
    return array(
    'pi_wiki_gallery' => array(
    'arguments' => array('node'),
    ),
    );
}


function theme_pi_wiki_gallery($node) {

    $output = '';

    global $user;
    $node_details = get_inquiry_details_from_current_path();

    if (check_node_function_of_activity ($node_details->inquiry_id, $node_details->activity_id, $user->uid, 'edit')) {

        $link = build_link('node', $node->nid, 'edit', $node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id);

        switch ($current_activity->destination) {
            case "self":
                $destination = "";
                break;
            case "phase":
                $destination = t("destination=" . build_link("phase", $node_details->phase_id, "view", $node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id,$node_details->activity_id));
                break;
            default:
                $destination = t("destination=" . build_home_link($node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id));
                break;
        }

        $output .= '<div style=\'display: block; clear: both; float: right;\'>';
        $output .= l(t('Edit'), $link,  array('html' => true, 'query' => $destination));
        $output .= '</div>';
        $output .= '<div style=\'display: block; clear: both;\'>';
        $output .= '</div>';

    }

    return $output;
}
